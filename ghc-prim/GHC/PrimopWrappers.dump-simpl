
==================== Tidy Core ====================
2018-03-16 15:50:15.818365809 UTC

Result size of Tidy Core
  = {terms: 892, types: 3,684, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
gtChar# [InlPrag=NOINLINE] :: Char# -> Char# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.gtChar#}]
gtChar# = GHC.Prim.gtChar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
geChar# [InlPrag=NOINLINE] :: Char# -> Char# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.geChar#}]
geChar# = GHC.Prim.geChar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
eqChar# [InlPrag=NOINLINE] :: Char# -> Char# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.eqChar#}]
eqChar# = GHC.Prim.eqChar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
neChar# [InlPrag=NOINLINE] :: Char# -> Char# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.neChar#}]
neChar# = GHC.Prim.neChar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ltChar# [InlPrag=NOINLINE] :: Char# -> Char# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ltChar#}]
ltChar# = GHC.Prim.ltChar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
leChar# [InlPrag=NOINLINE] :: Char# -> Char# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.leChar#}]
leChar# = GHC.Prim.leChar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ord# [InlPrag=NOINLINE] :: Char# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ord#}]
ord# = GHC.Prim.ord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
+# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.+#}]
+# = GHC.Prim.+#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
-# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.-#}]
-# = GHC.Prim.-#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
*# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.*#}]
*# = GHC.Prim.*#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
mulIntMayOflo# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.mulIntMayOflo#}]
mulIntMayOflo# = GHC.Prim.mulIntMayOflo#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
quotInt# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.quotInt#}]
quotInt# = GHC.Prim.quotInt#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
remInt# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.remInt#}]
remInt# = GHC.Prim.remInt#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
quotRemInt# [InlPrag=NOINLINE] :: Int# -> Int# -> (# Int#, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.quotRemInt#}]
quotRemInt# = GHC.Prim.quotRemInt#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
andI# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.andI#}]
andI# = GHC.Prim.andI#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
orI# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.orI#}]
orI# = GHC.Prim.orI#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
xorI# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.xorI#}]
xorI# = GHC.Prim.xorI#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
notI# [InlPrag=NOINLINE] :: Int# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.notI#}]
notI# = GHC.Prim.notI#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
negateInt# [InlPrag=NOINLINE] :: Int# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.negateInt#}]
negateInt# = GHC.Prim.negateInt#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
addIntC# [InlPrag=NOINLINE] :: Int# -> Int# -> (# Int#, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.addIntC#}]
addIntC# = GHC.Prim.addIntC#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
subIntC# [InlPrag=NOINLINE] :: Int# -> Int# -> (# Int#, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.subIntC#}]
subIntC# = GHC.Prim.subIntC#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
># [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.>#}]
># = GHC.Prim.>#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
>=# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.>=#}]
>=# = GHC.Prim.>=#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
==# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.==#}]
==# = GHC.Prim.==#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
/=# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim./=#}]
/=# = GHC.Prim./=#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
<# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.<#}]
<# = GHC.Prim.<#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
<=# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.<=#}]
<=# = GHC.Prim.<=#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
chr# [InlPrag=NOINLINE] :: Int# -> Char#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.chr#}]
chr# = GHC.Prim.chr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
int2Word# [InlPrag=NOINLINE] :: Int# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.int2Word#}]
int2Word# = GHC.Prim.int2Word#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
int2Float# [InlPrag=NOINLINE] :: Int# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.int2Float#}]
int2Float# = GHC.Prim.int2Float#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
int2Double# [InlPrag=NOINLINE] :: Int# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.int2Double#}]
int2Double# = GHC.Prim.int2Double#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
word2Float# [InlPrag=NOINLINE] :: Word# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.word2Float#}]
word2Float# = GHC.Prim.word2Float#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
word2Double# [InlPrag=NOINLINE] :: Word# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.word2Double#}]
word2Double# = GHC.Prim.word2Double#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
uncheckedIShiftL# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.uncheckedIShiftL#}]
uncheckedIShiftL# = GHC.Prim.uncheckedIShiftL#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
uncheckedIShiftRA# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.uncheckedIShiftRA#}]
uncheckedIShiftRA# = GHC.Prim.uncheckedIShiftRA#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
uncheckedIShiftRL# [InlPrag=NOINLINE] :: Int# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.uncheckedIShiftRL#}]
uncheckedIShiftRL# = GHC.Prim.uncheckedIShiftRL#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
plusWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.plusWord#}]
plusWord# = GHC.Prim.plusWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
subWordC# [InlPrag=NOINLINE] :: Word# -> Word# -> (# Word#, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.subWordC#}]
subWordC# = GHC.Prim.subWordC#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
plusWord2# [InlPrag=NOINLINE]
  :: Word# -> Word# -> (# Word#, Word# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.plusWord2#}]
plusWord2# = GHC.Prim.plusWord2#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
minusWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.minusWord#}]
minusWord# = GHC.Prim.minusWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
timesWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.timesWord#}]
timesWord# = GHC.Prim.timesWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
timesWord2# [InlPrag=NOINLINE]
  :: Word# -> Word# -> (# Word#, Word# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.timesWord2#}]
timesWord2# = GHC.Prim.timesWord2#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
quotWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.quotWord#}]
quotWord# = GHC.Prim.quotWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
remWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.remWord#}]
remWord# = GHC.Prim.remWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
quotRemWord# [InlPrag=NOINLINE]
  :: Word# -> Word# -> (# Word#, Word# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.quotRemWord#}]
quotRemWord# = GHC.Prim.quotRemWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
quotRemWord2# [InlPrag=NOINLINE]
  :: Word# -> Word# -> Word# -> (# Word#, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.quotRemWord2#}]
quotRemWord2# = GHC.Prim.quotRemWord2#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
and# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.and#}]
and# = GHC.Prim.and#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
or# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.or#}]
or# = GHC.Prim.or#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
xor# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.xor#}]
xor# = GHC.Prim.xor#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
not# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.not#}]
not# = GHC.Prim.not#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
uncheckedShiftL# [InlPrag=NOINLINE] :: Word# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.uncheckedShiftL#}]
uncheckedShiftL# = GHC.Prim.uncheckedShiftL#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
uncheckedShiftRL# [InlPrag=NOINLINE] :: Word# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.uncheckedShiftRL#}]
uncheckedShiftRL# = GHC.Prim.uncheckedShiftRL#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
word2Int# [InlPrag=NOINLINE] :: Word# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.word2Int#}]
word2Int# = GHC.Prim.word2Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
gtWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.gtWord#}]
gtWord# = GHC.Prim.gtWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
geWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.geWord#}]
geWord# = GHC.Prim.geWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
eqWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.eqWord#}]
eqWord# = GHC.Prim.eqWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
neWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.neWord#}]
neWord# = GHC.Prim.neWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ltWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ltWord#}]
ltWord# = GHC.Prim.ltWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
leWord# [InlPrag=NOINLINE] :: Word# -> Word# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.leWord#}]
leWord# = GHC.Prim.leWord#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
popCnt8# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.popCnt8#}]
popCnt8# = GHC.Prim.popCnt8#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
popCnt16# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.popCnt16#}]
popCnt16# = GHC.Prim.popCnt16#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
popCnt32# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.popCnt32#}]
popCnt32# = GHC.Prim.popCnt32#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
popCnt64# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.popCnt64#}]
popCnt64# = GHC.Prim.popCnt64#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
popCnt# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.popCnt#}]
popCnt# = GHC.Prim.popCnt#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pdep8# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pdep8#}]
pdep8# = GHC.Prim.pdep8#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pdep16# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pdep16#}]
pdep16# = GHC.Prim.pdep16#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pdep32# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pdep32#}]
pdep32# = GHC.Prim.pdep32#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pdep64# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pdep64#}]
pdep64# = GHC.Prim.pdep64#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pdep# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pdep#}]
pdep# = GHC.Prim.pdep#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pext8# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pext8#}]
pext8# = GHC.Prim.pext8#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pext16# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pext16#}]
pext16# = GHC.Prim.pext16#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pext32# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pext32#}]
pext32# = GHC.Prim.pext32#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pext64# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pext64#}]
pext64# = GHC.Prim.pext64#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pext# [InlPrag=NOINLINE] :: Word# -> Word# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.pext#}]
pext# = GHC.Prim.pext#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
clz8# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.clz8#}]
clz8# = GHC.Prim.clz8#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
clz16# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.clz16#}]
clz16# = GHC.Prim.clz16#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
clz32# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.clz32#}]
clz32# = GHC.Prim.clz32#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
clz64# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.clz64#}]
clz64# = GHC.Prim.clz64#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
clz# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.clz#}]
clz# = GHC.Prim.clz#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ctz8# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ctz8#}]
ctz8# = GHC.Prim.ctz8#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ctz16# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ctz16#}]
ctz16# = GHC.Prim.ctz16#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ctz32# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ctz32#}]
ctz32# = GHC.Prim.ctz32#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ctz64# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ctz64#}]
ctz64# = GHC.Prim.ctz64#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ctz# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ctz#}]
ctz# = GHC.Prim.ctz#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
byteSwap16# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.byteSwap16#}]
byteSwap16# = GHC.Prim.byteSwap16#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
byteSwap32# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.byteSwap32#}]
byteSwap32# = GHC.Prim.byteSwap32#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
byteSwap64# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.byteSwap64#}]
byteSwap64# = GHC.Prim.byteSwap64#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
byteSwap# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.byteSwap#}]
byteSwap# = GHC.Prim.byteSwap#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
narrow8Int# [InlPrag=NOINLINE] :: Int# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.narrow8Int#}]
narrow8Int# = GHC.Prim.narrow8Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
narrow16Int# [InlPrag=NOINLINE] :: Int# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.narrow16Int#}]
narrow16Int# = GHC.Prim.narrow16Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
narrow32Int# [InlPrag=NOINLINE] :: Int# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.narrow32Int#}]
narrow32Int# = GHC.Prim.narrow32Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
narrow8Word# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.narrow8Word#}]
narrow8Word# = GHC.Prim.narrow8Word#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
narrow16Word# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.narrow16Word#}]
narrow16Word# = GHC.Prim.narrow16Word#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
narrow32Word# [InlPrag=NOINLINE] :: Word# -> Word#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.narrow32Word#}]
narrow32Word# = GHC.Prim.narrow32Word#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
>## [InlPrag=NOINLINE] :: Double# -> Double# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.>##}]
>## = GHC.Prim.>##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
>=## [InlPrag=NOINLINE] :: Double# -> Double# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.>=##}]
>=## = GHC.Prim.>=##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
==## [InlPrag=NOINLINE] :: Double# -> Double# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.==##}]
==## = GHC.Prim.==##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
/=## [InlPrag=NOINLINE] :: Double# -> Double# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim./=##}]
/=## = GHC.Prim./=##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
<## [InlPrag=NOINLINE] :: Double# -> Double# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.<##}]
<## = GHC.Prim.<##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
<=## [InlPrag=NOINLINE] :: Double# -> Double# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.<=##}]
<=## = GHC.Prim.<=##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
+## [InlPrag=NOINLINE] :: Double# -> Double# -> Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.+##}]
+## = GHC.Prim.+##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
-## [InlPrag=NOINLINE] :: Double# -> Double# -> Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.-##}]
-## = GHC.Prim.-##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
*## [InlPrag=NOINLINE] :: Double# -> Double# -> Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.*##}]
*## = GHC.Prim.*##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
/## [InlPrag=NOINLINE] :: Double# -> Double# -> Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim./##}]
/## = GHC.Prim./##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
negateDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.negateDouble#}]
negateDouble# = GHC.Prim.negateDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fabsDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fabsDouble#}]
fabsDouble# = GHC.Prim.fabsDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
double2Int# [InlPrag=NOINLINE] :: Double# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.double2Int#}]
double2Int# = GHC.Prim.double2Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
double2Float# [InlPrag=NOINLINE] :: Double# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.double2Float#}]
double2Float# = GHC.Prim.double2Float#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
expDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.expDouble#}]
expDouble# = GHC.Prim.expDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
logDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.logDouble#}]
logDouble# = GHC.Prim.logDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sqrtDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sqrtDouble#}]
sqrtDouble# = GHC.Prim.sqrtDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sinDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sinDouble#}]
sinDouble# = GHC.Prim.sinDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cosDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.cosDouble#}]
cosDouble# = GHC.Prim.cosDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
tanDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.tanDouble#}]
tanDouble# = GHC.Prim.tanDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
asinDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.asinDouble#}]
asinDouble# = GHC.Prim.asinDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
acosDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.acosDouble#}]
acosDouble# = GHC.Prim.acosDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
atanDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.atanDouble#}]
atanDouble# = GHC.Prim.atanDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sinhDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sinhDouble#}]
sinhDouble# = GHC.Prim.sinhDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
coshDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.coshDouble#}]
coshDouble# = GHC.Prim.coshDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
tanhDouble# [InlPrag=NOINLINE] :: Double# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.tanhDouble#}]
tanhDouble# = GHC.Prim.tanhDouble#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
**## [InlPrag=NOINLINE] :: Double# -> Double# -> Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.**##}]
**## = GHC.Prim.**##

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
decodeDouble_2Int# [InlPrag=NOINLINE]
  :: Double# -> (# Int#, Word#, Word#, Int# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.decodeDouble_2Int#}]
decodeDouble_2Int# = GHC.Prim.decodeDouble_2Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
decodeDouble_Int64# [InlPrag=NOINLINE]
  :: Double# -> (# Int#, Int# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.decodeDouble_Int64#}]
decodeDouble_Int64# = GHC.Prim.decodeDouble_Int64#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
gtFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.gtFloat#}]
gtFloat# = GHC.Prim.gtFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
geFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.geFloat#}]
geFloat# = GHC.Prim.geFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
eqFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.eqFloat#}]
eqFloat# = GHC.Prim.eqFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
neFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.neFloat#}]
neFloat# = GHC.Prim.neFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ltFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ltFloat#}]
ltFloat# = GHC.Prim.ltFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
leFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.leFloat#}]
leFloat# = GHC.Prim.leFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
plusFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.plusFloat#}]
plusFloat# = GHC.Prim.plusFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
minusFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.minusFloat#}]
minusFloat# = GHC.Prim.minusFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
timesFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.timesFloat#}]
timesFloat# = GHC.Prim.timesFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
divideFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.divideFloat#}]
divideFloat# = GHC.Prim.divideFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
negateFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.negateFloat#}]
negateFloat# = GHC.Prim.negateFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fabsFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fabsFloat#}]
fabsFloat# = GHC.Prim.fabsFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
float2Int# [InlPrag=NOINLINE] :: Float# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.float2Int#}]
float2Int# = GHC.Prim.float2Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
expFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.expFloat#}]
expFloat# = GHC.Prim.expFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
logFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.logFloat#}]
logFloat# = GHC.Prim.logFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sqrtFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sqrtFloat#}]
sqrtFloat# = GHC.Prim.sqrtFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sinFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sinFloat#}]
sinFloat# = GHC.Prim.sinFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cosFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.cosFloat#}]
cosFloat# = GHC.Prim.cosFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
tanFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.tanFloat#}]
tanFloat# = GHC.Prim.tanFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
asinFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.asinFloat#}]
asinFloat# = GHC.Prim.asinFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
acosFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.acosFloat#}]
acosFloat# = GHC.Prim.acosFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
atanFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.atanFloat#}]
atanFloat# = GHC.Prim.atanFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sinhFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sinhFloat#}]
sinhFloat# = GHC.Prim.sinhFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
coshFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.coshFloat#}]
coshFloat# = GHC.Prim.coshFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
tanhFloat# [InlPrag=NOINLINE] :: Float# -> Float#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.tanhFloat#}]
tanhFloat# = GHC.Prim.tanhFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
powerFloat# [InlPrag=NOINLINE] :: Float# -> Float# -> Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.powerFloat#}]
powerFloat# = GHC.Prim.powerFloat#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
float2Double# [InlPrag=NOINLINE] :: Float# -> Double#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.float2Double#}]
float2Double# = GHC.Prim.float2Double#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
decodeFloat_Int# [InlPrag=NOINLINE] :: Float# -> (# Int#, Int# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.decodeFloat_Int#}]
decodeFloat_Int# = GHC.Prim.decodeFloat_Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newArray# [InlPrag=NOINLINE]
  :: forall a s.
     Int# -> a -> State# s -> (# State# s, MutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newArray#}]
newArray# = GHC.Prim.newArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sameMutableArray# [InlPrag=NOINLINE]
  :: forall s a. MutableArray# s a -> MutableArray# s a -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sameMutableArray#}]
sameMutableArray# = GHC.Prim.sameMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableArray# s a -> Int# -> State# s -> (# State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readArray#}]
readArray# = GHC.Prim.readArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableArray# s a -> Int# -> a -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeArray#}]
writeArray# = GHC.Prim.writeArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofArray# [InlPrag=NOINLINE] :: forall a. Array# a -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofArray#}]
sizeofArray# = GHC.Prim.sizeofArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofMutableArray# [InlPrag=NOINLINE]
  :: forall s a. MutableArray# s a -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofMutableArray#}]
sizeofMutableArray# = GHC.Prim.sizeofMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexArray# [InlPrag=NOINLINE]
  :: forall a. Array# a -> Int# -> (# a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexArray#}]
indexArray# = GHC.Prim.indexArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unsafeFreezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableArray# s a -> State# s -> (# State# s, Array# a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unsafeFreezeArray#}]
unsafeFreezeArray# = GHC.Prim.unsafeFreezeArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unsafeThawArray# [InlPrag=NOINLINE]
  :: forall a s.
     Array# a -> State# s -> (# State# s, MutableArray# s a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unsafeThawArray#}]
unsafeThawArray# = GHC.Prim.unsafeThawArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyArray# [InlPrag=NOINLINE]
  :: forall a s.
     Array# a
     -> Int#
     -> MutableArray# s a
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyArray#}]
copyArray# = GHC.Prim.copyArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableArray# s a
     -> Int#
     -> MutableArray# s a
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyMutableArray#}]
copyMutableArray# = GHC.Prim.copyMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cloneArray# [InlPrag=NOINLINE]
  :: forall a. Array# a -> Int# -> Int# -> Array# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.cloneArray#}]
cloneArray# = GHC.Prim.cloneArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cloneMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableArray# s a
     -> Int# -> Int# -> State# s -> (# State# s, MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.cloneMutableArray#}]
cloneMutableArray# = GHC.Prim.cloneMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
freezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableArray# s a
     -> Int# -> Int# -> State# s -> (# State# s, Array# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.freezeArray#}]
freezeArray# = GHC.Prim.freezeArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
thawArray# [InlPrag=NOINLINE]
  :: forall a s.
     Array# a
     -> Int# -> Int# -> State# s -> (# State# s, MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.thawArray#}]
thawArray# = GHC.Prim.thawArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
casArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableArray# s a
     -> Int# -> a -> a -> State# s -> (# State# s, Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.casArray#}]
casArray# = GHC.Prim.casArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     Int# -> a -> State# s -> (# State# s, SmallMutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newSmallArray#}]
newSmallArray# = GHC.Prim.newSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sameSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a -> SmallMutableArray# s a -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sameSmallMutableArray#}]
sameSmallMutableArray# = GHC.Prim.sameSmallMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a -> Int# -> State# s -> (# State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readSmallArray#}]
readSmallArray# = GHC.Prim.readSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a -> Int# -> a -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeSmallArray#}]
writeSmallArray# = GHC.Prim.writeSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofSmallArray# [InlPrag=NOINLINE]
  :: forall a. SmallArray# a -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofSmallArray#}]
sizeofSmallArray# = GHC.Prim.sizeofSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a. SmallMutableArray# s a -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofSmallMutableArray#}]
sizeofSmallMutableArray# = GHC.Prim.sizeofSmallMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexSmallArray# [InlPrag=NOINLINE]
  :: forall a. SmallArray# a -> Int# -> (# a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexSmallArray#}]
indexSmallArray# = GHC.Prim.indexSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unsafeFreezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a -> State# s -> (# State# s, SmallArray# a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unsafeFreezeSmallArray#}]
unsafeFreezeSmallArray# = GHC.Prim.unsafeFreezeSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unsafeThawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     SmallArray# a -> State# s -> (# State# s, SmallMutableArray# s a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unsafeThawSmallArray#}]
unsafeThawSmallArray# = GHC.Prim.unsafeThawSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copySmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     SmallArray# a
     -> Int#
     -> SmallMutableArray# s a
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copySmallArray#}]
copySmallArray# = GHC.Prim.copySmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copySmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a
     -> Int#
     -> SmallMutableArray# s a
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copySmallMutableArray#}]
copySmallMutableArray# = GHC.Prim.copySmallMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cloneSmallArray# [InlPrag=NOINLINE]
  :: forall a. SmallArray# a -> Int# -> Int# -> SmallArray# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.cloneSmallArray#}]
cloneSmallArray# = GHC.Prim.cloneSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cloneSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a
     -> Int#
     -> Int#
     -> State# s
     -> (# State# s, SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.cloneSmallMutableArray#}]
cloneSmallMutableArray# = GHC.Prim.cloneSmallMutableArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
freezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a
     -> Int# -> Int# -> State# s -> (# State# s, SmallArray# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.freezeSmallArray#}]
freezeSmallArray# = GHC.Prim.freezeSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
thawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     SmallArray# a
     -> Int#
     -> Int#
     -> State# s
     -> (# State# s, SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.thawSmallArray#}]
thawSmallArray# = GHC.Prim.thawSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
casSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     SmallMutableArray# s a
     -> Int# -> a -> a -> State# s -> (# State# s, Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.casSmallArray#}]
casSmallArray# = GHC.Prim.casSmallArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newByteArray# [InlPrag=NOINLINE]
  :: forall s.
     Int# -> State# s -> (# State# s, MutableByteArray# s #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newByteArray#}]
newByteArray# = GHC.Prim.newByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     Int# -> State# s -> (# State# s, MutableByteArray# s #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newPinnedByteArray#}]
newPinnedByteArray# = GHC.Prim.newPinnedByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newAlignedPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     Int# -> Int# -> State# s -> (# State# s, MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newAlignedPinnedByteArray#}]
newAlignedPinnedByteArray# = GHC.Prim.newAlignedPinnedByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
isMutableByteArrayPinned# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.isMutableByteArrayPinned#}]
isMutableByteArrayPinned# = GHC.Prim.isMutableByteArrayPinned#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
isByteArrayPinned# [InlPrag=NOINLINE] :: ByteArray# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.isByteArrayPinned#}]
isByteArrayPinned# = GHC.Prim.isByteArrayPinned#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
byteArrayContents# [InlPrag=NOINLINE] :: ByteArray# -> Addr#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.byteArrayContents#}]
byteArrayContents# = GHC.Prim.byteArrayContents#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sameMutableByteArray# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> MutableByteArray# s -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sameMutableByteArray#}]
sameMutableByteArray# = GHC.Prim.sameMutableByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
shrinkMutableByteArray# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.shrinkMutableByteArray#}]
shrinkMutableByteArray# = GHC.Prim.shrinkMutableByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
resizeMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> State# s -> (# State# s, MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.resizeMutableByteArray#}]
resizeMutableByteArray# = GHC.Prim.resizeMutableByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unsafeFreezeByteArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> State# s -> (# State# s, ByteArray# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unsafeFreezeByteArray#}]
unsafeFreezeByteArray# = GHC.Prim.unsafeFreezeByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofByteArray# [InlPrag=NOINLINE] :: ByteArray# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofByteArray#}]
sizeofByteArray# = GHC.Prim.sizeofByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofMutableByteArray#}]
sizeofMutableByteArray# = GHC.Prim.sizeofMutableByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getSizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.getSizeofMutableByteArray#}]
getSizeofMutableByteArray# = GHC.Prim.getSizeofMutableByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexCharArray# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Char#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexCharArray#}]
indexCharArray# = GHC.Prim.indexCharArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWideCharArray# [InlPrag=NOINLINE]
  :: ByteArray# -> Int# -> Char#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWideCharArray#}]
indexWideCharArray# = GHC.Prim.indexWideCharArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexIntArray# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexIntArray#}]
indexIntArray# = GHC.Prim.indexIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWordArray# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWordArray#}]
indexWordArray# = GHC.Prim.indexWordArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexAddrArray# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Addr#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexAddrArray#}]
indexAddrArray# = GHC.Prim.indexAddrArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexFloatArray# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexFloatArray#}]
indexFloatArray# = GHC.Prim.indexFloatArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexDoubleArray# [InlPrag=NOINLINE]
  :: ByteArray# -> Int# -> Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexDoubleArray#}]
indexDoubleArray# = GHC.Prim.indexDoubleArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexStablePtrArray# [InlPrag=NOINLINE]
  :: forall a. ByteArray# -> Int# -> StablePtr# a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexStablePtrArray#}]
indexStablePtrArray# = GHC.Prim.indexStablePtrArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt8Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt8Array#}]
indexInt8Array# = GHC.Prim.indexInt8Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt16Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt16Array#}]
indexInt16Array# = GHC.Prim.indexInt16Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt32Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt32Array#}]
indexInt32Array# = GHC.Prim.indexInt32Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt64Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt64Array#}]
indexInt64Array# = GHC.Prim.indexInt64Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord8Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord8Array#}]
indexWord8Array# = GHC.Prim.indexWord8Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord16Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord16Array#}]
indexWord16Array# = GHC.Prim.indexWord16Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord32Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord32Array#}]
indexWord32Array# = GHC.Prim.indexWord32Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord64Array# [InlPrag=NOINLINE] :: ByteArray# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord64Array#}]
indexWord64Array# = GHC.Prim.indexWord64Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readCharArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readCharArray#}]
readCharArray# = GHC.Prim.readCharArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWideCharArray#}]
readWideCharArray# = GHC.Prim.readWideCharArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readIntArray#}]
readIntArray# = GHC.Prim.readIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWordArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWordArray#}]
readWordArray# = GHC.Prim.readWordArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readAddrArray#}]
readAddrArray# = GHC.Prim.readAddrArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readFloatArray#}]
readFloatArray# = GHC.Prim.readFloatArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readDoubleArray#}]
readDoubleArray# = GHC.Prim.readDoubleArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableByteArray# s
     -> Int# -> State# s -> (# State# s, StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readStablePtrArray#}]
readStablePtrArray# = GHC.Prim.readStablePtrArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt8Array#}]
readInt8Array# = GHC.Prim.readInt8Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt16Array#}]
readInt16Array# = GHC.Prim.readInt16Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt32Array#}]
readInt32Array# = GHC.Prim.readInt32Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt64Array#}]
readInt64Array# = GHC.Prim.readInt64Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord8Array#}]
readWord8Array# = GHC.Prim.readWord8Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord16Array#}]
readWord16Array# = GHC.Prim.readWord16Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord32Array#}]
readWord32Array# = GHC.Prim.readWord32Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord64Array#}]
readWord64Array# = GHC.Prim.readWord64Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeCharArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Char# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeCharArray#}]
writeCharArray# = GHC.Prim.writeCharArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Char# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWideCharArray#}]
writeWideCharArray# = GHC.Prim.writeWideCharArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeIntArray#}]
writeIntArray# = GHC.Prim.writeIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWordArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWordArray#}]
writeWordArray# = GHC.Prim.writeWordArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Addr# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeAddrArray#}]
writeAddrArray# = GHC.Prim.writeAddrArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Float# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeFloatArray#}]
writeFloatArray# = GHC.Prim.writeFloatArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Double# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeDoubleArray#}]
writeDoubleArray# = GHC.Prim.writeDoubleArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     MutableByteArray# s -> Int# -> StablePtr# a -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeStablePtrArray#}]
writeStablePtrArray# = GHC.Prim.writeStablePtrArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt8Array#}]
writeInt8Array# = GHC.Prim.writeInt8Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt16Array#}]
writeInt16Array# = GHC.Prim.writeInt16Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt32Array#}]
writeInt32Array# = GHC.Prim.writeInt32Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt64Array#}]
writeInt64Array# = GHC.Prim.writeInt64Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord8Array#}]
writeWord8Array# = GHC.Prim.writeWord8Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord16Array#}]
writeWord16Array# = GHC.Prim.writeWord16Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord32Array#}]
writeWord32Array# = GHC.Prim.writeWord32Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord64Array#}]
writeWord64Array# = GHC.Prim.writeWord64Array#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compareByteArrays# [InlPrag=NOINLINE]
  :: ByteArray# -> Int# -> ByteArray# -> Int# -> Int# -> Int#
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compareByteArrays#}]
compareByteArrays# = GHC.Prim.compareByteArrays#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyByteArray# [InlPrag=NOINLINE]
  :: forall s.
     ByteArray#
     -> Int#
     -> MutableByteArray# s
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyByteArray#}]
copyByteArray# = GHC.Prim.copyByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int#
     -> MutableByteArray# s
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyMutableByteArray#}]
copyMutableByteArray# = GHC.Prim.copyMutableByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     ByteArray# -> Int# -> Addr# -> Int# -> State# s -> State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyByteArrayToAddr#}]
copyByteArrayToAddr# = GHC.Prim.copyByteArrayToAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyMutableByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Addr# -> Int# -> State# s -> State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyMutableByteArrayToAddr#}]
copyMutableByteArrayToAddr# = GHC.Prim.copyMutableByteArrayToAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyAddrToByteArray# [InlPrag=NOINLINE]
  :: forall s.
     Addr#
     -> MutableByteArray# s -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyAddrToByteArray#}]
copyAddrToByteArray# = GHC.Prim.copyAddrToByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
setByteArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.setByteArray#}]
setByteArray# = GHC.Prim.setByteArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
atomicReadIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.atomicReadIntArray#}]
atomicReadIntArray# = GHC.Prim.atomicReadIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
atomicWriteIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.atomicWriteIntArray#}]
atomicWriteIntArray# = GHC.Prim.atomicWriteIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
casIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Int# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.casIntArray#}]
casIntArray# = GHC.Prim.casIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fetchAddIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fetchAddIntArray#}]
fetchAddIntArray# = GHC.Prim.fetchAddIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fetchSubIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fetchSubIntArray#}]
fetchSubIntArray# = GHC.Prim.fetchSubIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fetchAndIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fetchAndIntArray#}]
fetchAndIntArray# = GHC.Prim.fetchAndIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fetchNandIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fetchNandIntArray#}]
fetchNandIntArray# = GHC.Prim.fetchNandIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fetchOrIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fetchOrIntArray#}]
fetchOrIntArray# = GHC.Prim.fetchOrIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fetchXorIntArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableByteArray# s
     -> Int# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fetchXorIntArray#}]
fetchXorIntArray# = GHC.Prim.fetchXorIntArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     Int# -> State# s -> (# State# s, MutableArrayArray# s #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newArrayArray#}]
newArrayArray# = GHC.Prim.newArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sameMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s. MutableArrayArray# s -> MutableArrayArray# s -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sameMutableArrayArray#}]
sameMutableArrayArray# = GHC.Prim.sameMutableArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unsafeFreezeArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s -> State# s -> (# State# s, ArrayArray# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unsafeFreezeArrayArray#}]
unsafeFreezeArrayArray# = GHC.Prim.unsafeFreezeArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofArrayArray# [InlPrag=NOINLINE] :: ArrayArray# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofArrayArray#}]
sizeofArrayArray# = GHC.Prim.sizeofArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sizeofMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s. MutableArrayArray# s -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sizeofMutableArrayArray#}]
sizeofMutableArrayArray# = GHC.Prim.sizeofMutableArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexByteArrayArray# [InlPrag=NOINLINE]
  :: ArrayArray# -> Int# -> ByteArray#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexByteArrayArray#}]
indexByteArrayArray# = GHC.Prim.indexByteArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexArrayArrayArray# [InlPrag=NOINLINE]
  :: ArrayArray# -> Int# -> ArrayArray#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexArrayArrayArray#}]
indexArrayArrayArray# = GHC.Prim.indexArrayArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s
     -> Int# -> State# s -> (# State# s, ByteArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readByteArrayArray#}]
readByteArrayArray# = GHC.Prim.readByteArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s
     -> Int# -> State# s -> (# State# s, MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readMutableByteArrayArray#}]
readMutableByteArrayArray# = GHC.Prim.readMutableByteArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s
     -> Int# -> State# s -> (# State# s, ArrayArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readArrayArrayArray#}]
readArrayArrayArray# = GHC.Prim.readArrayArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s
     -> Int# -> State# s -> (# State# s, MutableArrayArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readMutableArrayArrayArray#}]
readMutableArrayArrayArray# = GHC.Prim.readMutableArrayArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s -> Int# -> ByteArray# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeByteArrayArray#}]
writeByteArrayArray# = GHC.Prim.writeByteArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s
     -> Int# -> MutableByteArray# s -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeMutableByteArrayArray#}]
writeMutableByteArrayArray# = GHC.Prim.writeMutableByteArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s -> Int# -> ArrayArray# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeArrayArrayArray#}]
writeArrayArrayArray# = GHC.Prim.writeArrayArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s
     -> Int# -> MutableArrayArray# s -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeMutableArrayArrayArray#}]
writeMutableArrayArrayArray#
  = GHC.Prim.writeMutableArrayArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     ArrayArray#
     -> Int#
     -> MutableArrayArray# s
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyArrayArray#}]
copyArrayArray# = GHC.Prim.copyArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
copyMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     MutableArrayArray# s
     -> Int#
     -> MutableArrayArray# s
     -> Int#
     -> Int#
     -> State# s
     -> State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.copyMutableArrayArray#}]
copyMutableArrayArray# = GHC.Prim.copyMutableArrayArray#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
plusAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Addr#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.plusAddr#}]
plusAddr# = GHC.Prim.plusAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
minusAddr# [InlPrag=NOINLINE] :: Addr# -> Addr# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.minusAddr#}]
minusAddr# = GHC.Prim.minusAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
remAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.remAddr#}]
remAddr# = GHC.Prim.remAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
addr2Int# [InlPrag=NOINLINE] :: Addr# -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.addr2Int#}]
addr2Int# = GHC.Prim.addr2Int#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
int2Addr# [InlPrag=NOINLINE] :: Int# -> Addr#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.int2Addr#}]
int2Addr# = GHC.Prim.int2Addr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
gtAddr# [InlPrag=NOINLINE] :: Addr# -> Addr# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.gtAddr#}]
gtAddr# = GHC.Prim.gtAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
geAddr# [InlPrag=NOINLINE] :: Addr# -> Addr# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.geAddr#}]
geAddr# = GHC.Prim.geAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
eqAddr# [InlPrag=NOINLINE] :: Addr# -> Addr# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.eqAddr#}]
eqAddr# = GHC.Prim.eqAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
neAddr# [InlPrag=NOINLINE] :: Addr# -> Addr# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.neAddr#}]
neAddr# = GHC.Prim.neAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
ltAddr# [InlPrag=NOINLINE] :: Addr# -> Addr# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.ltAddr#}]
ltAddr# = GHC.Prim.ltAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
leAddr# [InlPrag=NOINLINE] :: Addr# -> Addr# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.leAddr#}]
leAddr# = GHC.Prim.leAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexCharOffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Char#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexCharOffAddr#}]
indexCharOffAddr# = GHC.Prim.indexCharOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWideCharOffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Char#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWideCharOffAddr#}]
indexWideCharOffAddr# = GHC.Prim.indexWideCharOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexIntOffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexIntOffAddr#}]
indexIntOffAddr# = GHC.Prim.indexIntOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWordOffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWordOffAddr#}]
indexWordOffAddr# = GHC.Prim.indexWordOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexAddrOffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Addr#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexAddrOffAddr#}]
indexAddrOffAddr# = GHC.Prim.indexAddrOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexFloatOffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexFloatOffAddr#}]
indexFloatOffAddr# = GHC.Prim.indexFloatOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexDoubleOffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexDoubleOffAddr#}]
indexDoubleOffAddr# = GHC.Prim.indexDoubleOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a. Addr# -> Int# -> StablePtr# a
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexStablePtrOffAddr#}]
indexStablePtrOffAddr# = GHC.Prim.indexStablePtrOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt8OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt8OffAddr#}]
indexInt8OffAddr# = GHC.Prim.indexInt8OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt16OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt16OffAddr#}]
indexInt16OffAddr# = GHC.Prim.indexInt16OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt32OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt32OffAddr#}]
indexInt32OffAddr# = GHC.Prim.indexInt32OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexInt64OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexInt64OffAddr#}]
indexInt64OffAddr# = GHC.Prim.indexInt64OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord8OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord8OffAddr#}]
indexWord8OffAddr# = GHC.Prim.indexWord8OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord16OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord16OffAddr#}]
indexWord16OffAddr# = GHC.Prim.indexWord16OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord32OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord32OffAddr#}]
indexWord32OffAddr# = GHC.Prim.indexWord32OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
indexWord64OffAddr# [InlPrag=NOINLINE] :: Addr# -> Int# -> Word#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.indexWord64OffAddr#}]
indexWord64OffAddr# = GHC.Prim.indexWord64OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readCharOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readCharOffAddr#}]
readCharOffAddr# = GHC.Prim.readCharOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWideCharOffAddr#}]
readWideCharOffAddr# = GHC.Prim.readWideCharOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readIntOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readIntOffAddr#}]
readIntOffAddr# = GHC.Prim.readIntOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWordOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWordOffAddr#}]
readWordOffAddr# = GHC.Prim.readWordOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readAddrOffAddr#}]
readAddrOffAddr# = GHC.Prim.readAddrOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readFloatOffAddr#}]
readFloatOffAddr# = GHC.Prim.readFloatOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readDoubleOffAddr#}]
readDoubleOffAddr# = GHC.Prim.readDoubleOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall s a.
     Addr# -> Int# -> State# s -> (# State# s, StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readStablePtrOffAddr#}]
readStablePtrOffAddr# = GHC.Prim.readStablePtrOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt8OffAddr#}]
readInt8OffAddr# = GHC.Prim.readInt8OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt16OffAddr#}]
readInt16OffAddr# = GHC.Prim.readInt16OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt32OffAddr#}]
readInt32OffAddr# = GHC.Prim.readInt32OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readInt64OffAddr#}]
readInt64OffAddr# = GHC.Prim.readInt64OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord8OffAddr#}]
readWord8OffAddr# = GHC.Prim.readWord8OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord16OffAddr#}]
readWord16OffAddr# = GHC.Prim.readWord16OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord32OffAddr#}]
readWord32OffAddr# = GHC.Prim.readWord32OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> (# State# s, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readWord64OffAddr#}]
readWord64OffAddr# = GHC.Prim.readWord64OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeCharOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Char# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeCharOffAddr#}]
writeCharOffAddr# = GHC.Prim.writeCharOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Char# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWideCharOffAddr#}]
writeWideCharOffAddr# = GHC.Prim.writeWideCharOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeIntOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeIntOffAddr#}]
writeIntOffAddr# = GHC.Prim.writeIntOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWordOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWordOffAddr#}]
writeWordOffAddr# = GHC.Prim.writeWordOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Addr# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeAddrOffAddr#}]
writeAddrOffAddr# = GHC.Prim.writeAddrOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Float# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeFloatOffAddr#}]
writeFloatOffAddr# = GHC.Prim.writeFloatOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Double# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeDoubleOffAddr#}]
writeDoubleOffAddr# = GHC.Prim.writeDoubleOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a s.
     Addr# -> Int# -> StablePtr# a -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeStablePtrOffAddr#}]
writeStablePtrOffAddr# = GHC.Prim.writeStablePtrOffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt8OffAddr#}]
writeInt8OffAddr# = GHC.Prim.writeInt8OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt16OffAddr#}]
writeInt16OffAddr# = GHC.Prim.writeInt16OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt32OffAddr#}]
writeInt32OffAddr# = GHC.Prim.writeInt32OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Int# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeInt64OffAddr#}]
writeInt64OffAddr# = GHC.Prim.writeInt64OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord8OffAddr#}]
writeWord8OffAddr# = GHC.Prim.writeWord8OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord16OffAddr#}]
writeWord16OffAddr# = GHC.Prim.writeWord16OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord32OffAddr#}]
writeWord32OffAddr# = GHC.Prim.writeWord32OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> Word# -> State# s -> State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeWord64OffAddr#}]
writeWord64OffAddr# = GHC.Prim.writeWord64OffAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newMutVar# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> (# State# s, MutVar# s a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newMutVar#}]
newMutVar# = GHC.Prim.newMutVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readMutVar# [InlPrag=NOINLINE]
  :: forall s a. MutVar# s a -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readMutVar#}]
readMutVar# = GHC.Prim.readMutVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeMutVar# [InlPrag=NOINLINE]
  :: forall s a. MutVar# s a -> a -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeMutVar#}]
writeMutVar# = GHC.Prim.writeMutVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sameMutVar# [InlPrag=NOINLINE]
  :: forall s a. MutVar# s a -> MutVar# s a -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sameMutVar#}]
sameMutVar# = GHC.Prim.sameMutVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
atomicModifyMutVar# [InlPrag=NOINLINE]
  :: forall s a b c.
     MutVar# s a -> (a -> b) -> State# s -> (# State# s, c #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.atomicModifyMutVar#}]
atomicModifyMutVar# = GHC.Prim.atomicModifyMutVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
casMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     MutVar# s a -> a -> a -> State# s -> (# State# s, Int#, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.casMutVar#}]
casMutVar# = GHC.Prim.casMutVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
catch# [InlPrag=NOINLINE]
  :: forall a b.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> (b -> State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld
     -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.catch#}]
catch# = GHC.Prim.catch#

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
raise# [InlPrag=NOINLINE] :: forall b o. b -> o
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<B,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=1,unsat_ok=True,boring_ok=True)
         Tmpl= \ (@ b_avHj) (@ o_avHk) (a1_au4E [Occ=Once] :: b_avHj) ->
                 GHC.Prim.raise# @ b_avHj @ 'GHC.Types.LiftedRep @ o_avHk a1_au4E}]
raise#
  = \ (@ b_avHj) (@ o_avHk) (a1_au4E :: b_avHj) ->
      GHC.Prim.raise# @ b_avHj @ 'GHC.Types.LiftedRep @ o_avHk a1_au4E

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
raiseIO# [InlPrag=NOINLINE]
  :: forall a b. a -> State# RealWorld -> (# State# RealWorld, b #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.raiseIO#}]
raiseIO# = GHC.Prim.raiseIO#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
maskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.maskAsyncExceptions#}]
maskAsyncExceptions# = GHC.Prim.maskAsyncExceptions#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
maskUninterruptible# [InlPrag=NOINLINE]
  :: forall a.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.maskUninterruptible#}]
maskUninterruptible# = GHC.Prim.maskUninterruptible#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unmaskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unmaskAsyncExceptions#}]
unmaskAsyncExceptions# = GHC.Prim.unmaskAsyncExceptions#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getMaskingState# [InlPrag=NOINLINE]
  :: State# RealWorld -> (# State# RealWorld, Int# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.getMaskingState#}]
getMaskingState# = GHC.Prim.getMaskingState#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
atomically# [InlPrag=NOINLINE]
  :: forall a.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.atomically#}]
atomically# = GHC.Prim.atomically#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
retry# [InlPrag=NOINLINE]
  :: forall a. State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>x,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.retry#}]
retry# = GHC.Prim.retry#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
catchRetry# [InlPrag=NOINLINE]
  :: forall a.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> (State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld
     -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.catchRetry#}]
catchRetry# = GHC.Prim.catchRetry#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
catchSTM# [InlPrag=NOINLINE]
  :: forall a b.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> (b -> State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld
     -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.catchSTM#}]
catchSTM# = GHC.Prim.catchSTM#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
check# [InlPrag=NOINLINE]
  :: forall a.
     (State# RealWorld -> (# State# RealWorld, a #))
     -> State# RealWorld -> State# RealWorld
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.check#}]
check# = GHC.Prim.check#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newTVar# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> (# State# s, TVar# s a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newTVar#}]
newTVar# = GHC.Prim.newTVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readTVar# [InlPrag=NOINLINE]
  :: forall s a. TVar# s a -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readTVar#}]
readTVar# = GHC.Prim.readTVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readTVarIO# [InlPrag=NOINLINE]
  :: forall s a. TVar# s a -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readTVarIO#}]
readTVarIO# = GHC.Prim.readTVarIO#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
writeTVar# [InlPrag=NOINLINE]
  :: forall s a. TVar# s a -> a -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.writeTVar#}]
writeTVar# = GHC.Prim.writeTVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sameTVar# [InlPrag=NOINLINE]
  :: forall s a. TVar# s a -> TVar# s a -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sameTVar#}]
sameTVar# = GHC.Prim.sameTVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newMVar# [InlPrag=NOINLINE]
  :: forall s a. State# s -> (# State# s, MVar# s a #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newMVar#}]
newMVar# = GHC.Prim.newMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
takeMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.takeMVar#}]
takeMVar# = GHC.Prim.takeMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
tryTakeMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> State# s -> (# State# s, Int#, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.tryTakeMVar#}]
tryTakeMVar# = GHC.Prim.tryTakeMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
putMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> a -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.putMVar#}]
putMVar# = GHC.Prim.putMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
tryPutMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> a -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.tryPutMVar#}]
tryPutMVar# = GHC.Prim.tryPutMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
readMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.readMVar#}]
readMVar# = GHC.Prim.readMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
tryReadMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> State# s -> (# State# s, Int#, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.tryReadMVar#}]
tryReadMVar# = GHC.Prim.tryReadMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
sameMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> MVar# s a -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.sameMVar#}]
sameMVar# = GHC.Prim.sameMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
isEmptyMVar# [InlPrag=NOINLINE]
  :: forall s a. MVar# s a -> State# s -> (# State# s, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.isEmptyMVar#}]
isEmptyMVar# = GHC.Prim.isEmptyMVar#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
delay# [InlPrag=NOINLINE] :: forall s. Int# -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.delay#}]
delay# = GHC.Prim.delay#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
waitRead# [InlPrag=NOINLINE]
  :: forall s. Int# -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.waitRead#}]
waitRead# = GHC.Prim.waitRead#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
waitWrite# [InlPrag=NOINLINE]
  :: forall s. Int# -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.waitWrite#}]
waitWrite# = GHC.Prim.waitWrite#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fork# [InlPrag=NOINLINE]
  :: forall a.
     a -> State# RealWorld -> (# State# RealWorld, ThreadId# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.fork#}]
fork# = GHC.Prim.fork#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
forkOn# [InlPrag=NOINLINE]
  :: forall a.
     Int# -> a -> State# RealWorld -> (# State# RealWorld, ThreadId# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.forkOn#}]
forkOn# = GHC.Prim.forkOn#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
killThread# [InlPrag=NOINLINE]
  :: forall a. ThreadId# -> a -> State# RealWorld -> State# RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.killThread#}]
killThread# = GHC.Prim.killThread#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
yield# [InlPrag=NOINLINE] :: State# RealWorld -> State# RealWorld
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.yield#}]
yield# = GHC.Prim.yield#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
myThreadId# [InlPrag=NOINLINE]
  :: State# RealWorld -> (# State# RealWorld, ThreadId# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.myThreadId#}]
myThreadId# = GHC.Prim.myThreadId#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
labelThread# [InlPrag=NOINLINE]
  :: ThreadId# -> Addr# -> State# RealWorld -> State# RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.labelThread#}]
labelThread# = GHC.Prim.labelThread#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
isCurrentThreadBound# [InlPrag=NOINLINE]
  :: State# RealWorld -> (# State# RealWorld, Int# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.isCurrentThreadBound#}]
isCurrentThreadBound# = GHC.Prim.isCurrentThreadBound#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
noDuplicate# [InlPrag=NOINLINE] :: forall s. State# s -> State# s
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.noDuplicate#}]
noDuplicate# = GHC.Prim.noDuplicate#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
threadStatus# [InlPrag=NOINLINE]
  :: ThreadId#
     -> State# RealWorld -> (# State# RealWorld, Int#, Int#, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.threadStatus#}]
threadStatus# = GHC.Prim.threadStatus#

-- RHS size: {terms: 1, types: 1, coercions: 0, joins: 0/0}
mkWeak# [InlPrag=NOINLINE]
  :: forall o b c.
     o
     -> b
     -> (State# RealWorld -> (# State# RealWorld, c #))
     -> State# RealWorld
     -> (# State# RealWorld, Weak# b #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.mkWeak# @ 'GHC.Types.LiftedRep}]
mkWeak# = GHC.Prim.mkWeak# @ 'GHC.Types.LiftedRep

-- RHS size: {terms: 1, types: 1, coercions: 0, joins: 0/0}
mkWeakNoFinalizer# [InlPrag=NOINLINE]
  :: forall o b.
     o -> b -> State# RealWorld -> (# State# RealWorld, Weak# b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.mkWeakNoFinalizer# @ 'GHC.Types.LiftedRep}]
mkWeakNoFinalizer#
  = GHC.Prim.mkWeakNoFinalizer# @ 'GHC.Types.LiftedRep

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
addCFinalizerToWeak# [InlPrag=NOINLINE]
  :: forall b.
     Addr#
     -> Addr#
     -> Int#
     -> Addr#
     -> Weak# b
     -> State# RealWorld
     -> (# State# RealWorld, Int# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.addCFinalizerToWeak#}]
addCFinalizerToWeak# = GHC.Prim.addCFinalizerToWeak#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
deRefWeak# [InlPrag=NOINLINE]
  :: forall a.
     Weak# a -> State# RealWorld -> (# State# RealWorld, Int#, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.deRefWeak#}]
deRefWeak# = GHC.Prim.deRefWeak#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
finalizeWeak# [InlPrag=NOINLINE]
  :: forall a b.
     Weak# a
     -> State# RealWorld
     -> (# State# RealWorld, Int#,
           State# RealWorld -> (# State# RealWorld, b #) #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.finalizeWeak#}]
finalizeWeak# = GHC.Prim.finalizeWeak#

-- RHS size: {terms: 1, types: 1, coercions: 0, joins: 0/0}
touch# [InlPrag=NOINLINE]
  :: forall o. o -> State# RealWorld -> State# RealWorld
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.touch# @ 'GHC.Types.LiftedRep}]
touch# = GHC.Prim.touch# @ 'GHC.Types.LiftedRep

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
makeStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     a -> State# RealWorld -> (# State# RealWorld, StablePtr# a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.makeStablePtr#}]
makeStablePtr# = GHC.Prim.makeStablePtr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
deRefStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     StablePtr# a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.deRefStablePtr#}]
deRefStablePtr# = GHC.Prim.deRefStablePtr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
eqStablePtr# [InlPrag=NOINLINE]
  :: forall a. StablePtr# a -> StablePtr# a -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.eqStablePtr#}]
eqStablePtr# = GHC.Prim.eqStablePtr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
makeStableName# [InlPrag=NOINLINE]
  :: forall a.
     a -> State# RealWorld -> (# State# RealWorld, StableName# a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.makeStableName#}]
makeStableName# = GHC.Prim.makeStableName#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
eqStableName# [InlPrag=NOINLINE]
  :: forall a b. StableName# a -> StableName# b -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.eqStableName#}]
eqStableName# = GHC.Prim.eqStableName#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
stableNameToInt# [InlPrag=NOINLINE]
  :: forall a. StableName# a -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.stableNameToInt#}]
stableNameToInt# = GHC.Prim.stableNameToInt#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactNew# [InlPrag=NOINLINE]
  :: Word# -> State# RealWorld -> (# State# RealWorld, Compact# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactNew#}]
compactNew# = GHC.Prim.compactNew#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactResize# [InlPrag=NOINLINE]
  :: Compact# -> Word# -> State# RealWorld -> State# RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactResize#}]
compactResize# = GHC.Prim.compactResize#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactContains# [InlPrag=NOINLINE]
  :: forall a.
     Compact# -> a -> State# RealWorld -> (# State# RealWorld, Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactContains#}]
compactContains# = GHC.Prim.compactContains#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactContainsAny# [InlPrag=NOINLINE]
  :: forall a. a -> State# RealWorld -> (# State# RealWorld, Int# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactContainsAny#}]
compactContainsAny# = GHC.Prim.compactContainsAny#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactGetFirstBlock# [InlPrag=NOINLINE]
  :: Compact#
     -> State# RealWorld -> (# State# RealWorld, Addr#, Word# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactGetFirstBlock#}]
compactGetFirstBlock# = GHC.Prim.compactGetFirstBlock#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactGetNextBlock# [InlPrag=NOINLINE]
  :: Compact#
     -> Addr#
     -> State# RealWorld
     -> (# State# RealWorld, Addr#, Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactGetNextBlock#}]
compactGetNextBlock# = GHC.Prim.compactGetNextBlock#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactAllocateBlock# [InlPrag=NOINLINE]
  :: Word#
     -> Addr# -> State# RealWorld -> (# State# RealWorld, Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactAllocateBlock#}]
compactAllocateBlock# = GHC.Prim.compactAllocateBlock#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactFixupPointers# [InlPrag=NOINLINE]
  :: Addr#
     -> Addr#
     -> State# RealWorld
     -> (# State# RealWorld, Compact#, Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactFixupPointers#}]
compactFixupPointers# = GHC.Prim.compactFixupPointers#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactAdd# [InlPrag=NOINLINE]
  :: forall a.
     Compact# -> a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactAdd#}]
compactAdd# = GHC.Prim.compactAdd#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactAddWithSharing# [InlPrag=NOINLINE]
  :: forall a.
     Compact# -> a -> State# RealWorld -> (# State# RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactAddWithSharing#}]
compactAddWithSharing# = GHC.Prim.compactAddWithSharing#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
compactSize# [InlPrag=NOINLINE]
  :: Compact# -> State# RealWorld -> (# State# RealWorld, Word# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.compactSize#}]
compactSize# = GHC.Prim.compactSize#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
reallyUnsafePtrEquality# [InlPrag=NOINLINE]
  :: forall a. a -> a -> Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.reallyUnsafePtrEquality#}]
reallyUnsafePtrEquality# = GHC.Prim.reallyUnsafePtrEquality#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
par# [InlPrag=NOINLINE] :: forall a. a -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.par#}]
par# = GHC.Prim.par#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
spark# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.spark#}]
spark# = GHC.Prim.spark#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
seq# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.seq#}]
seq# = GHC.Prim.seq#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getSpark# [InlPrag=NOINLINE]
  :: forall s a. State# s -> (# State# s, Int#, a #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.getSpark#}]
getSpark# = GHC.Prim.getSpark#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
numSparks# [InlPrag=NOINLINE]
  :: forall s. State# s -> (# State# s, Int# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.numSparks#}]
numSparks# = GHC.Prim.numSparks#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
dataToTag# [InlPrag=NOINLINE] :: forall a. a -> Int#
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.dataToTag#}]
dataToTag# = GHC.Prim.dataToTag#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
addrToAny# [InlPrag=NOINLINE] :: forall a. Addr# -> (# a #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.addrToAny#}]
addrToAny# = GHC.Prim.addrToAny#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
anyToAddr# [InlPrag=NOINLINE]
  :: forall a. a -> State# RealWorld -> (# State# RealWorld, Addr# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.anyToAddr#}]
anyToAddr# = GHC.Prim.anyToAddr#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
mkApUpd0# [InlPrag=NOINLINE] :: forall a. BCO# -> (# a #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.mkApUpd0#}]
mkApUpd0# = GHC.Prim.mkApUpd0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
newBCO# [InlPrag=NOINLINE]
  :: forall a s.
     ByteArray#
     -> ByteArray#
     -> Array# a
     -> Int#
     -> ByteArray#
     -> State# s
     -> (# State# s, BCO# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.newBCO#}]
newBCO# = GHC.Prim.newBCO#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
unpackClosure# [InlPrag=NOINLINE]
  :: forall a b. a -> (# Addr#, Array# b, ByteArray# #)
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.unpackClosure#}]
unpackClosure# = GHC.Prim.unpackClosure#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getApStackVal# [InlPrag=NOINLINE]
  :: forall a b. a -> Int# -> (# Int#, b #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.getApStackVal#}]
getApStackVal# = GHC.Prim.getApStackVal#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getCCSOf# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> (# State# s, Addr# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.getCCSOf#}]
getCCSOf# = GHC.Prim.getCCSOf#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getCurrentCCS# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> (# State# s, Addr# #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.getCurrentCCS#}]
getCurrentCCS# = GHC.Prim.getCurrentCCS#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
clearCCS# [InlPrag=NOINLINE]
  :: forall s a.
     (State# s -> (# State# s, a #)) -> State# s -> (# State# s, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.clearCCS#}]
clearCCS# = GHC.Prim.clearCCS#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
traceEvent# [InlPrag=NOINLINE]
  :: forall s. Addr# -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.traceEvent#}]
traceEvent# = GHC.Prim.traceEvent#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
traceMarker# [InlPrag=NOINLINE]
  :: forall s. Addr# -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.traceMarker#}]
traceMarker# = GHC.Prim.traceMarker#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchByteArray3# [InlPrag=NOINLINE]
  :: forall s. ByteArray# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchByteArray3#}]
prefetchByteArray3# = GHC.Prim.prefetchByteArray3#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchMutableByteArray3# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchMutableByteArray3#}]
prefetchMutableByteArray3# = GHC.Prim.prefetchMutableByteArray3#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchAddr3# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchAddr3#}]
prefetchAddr3# = GHC.Prim.prefetchAddr3#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchValue3# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<B,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchValue3#}]
prefetchValue3# = GHC.Prim.prefetchValue3#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchByteArray2# [InlPrag=NOINLINE]
  :: forall s. ByteArray# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchByteArray2#}]
prefetchByteArray2# = GHC.Prim.prefetchByteArray2#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchMutableByteArray2# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchMutableByteArray2#}]
prefetchMutableByteArray2# = GHC.Prim.prefetchMutableByteArray2#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchAddr2# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchAddr2#}]
prefetchAddr2# = GHC.Prim.prefetchAddr2#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchValue2# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<B,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchValue2#}]
prefetchValue2# = GHC.Prim.prefetchValue2#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchByteArray1# [InlPrag=NOINLINE]
  :: forall s. ByteArray# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchByteArray1#}]
prefetchByteArray1# = GHC.Prim.prefetchByteArray1#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchMutableByteArray1# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchMutableByteArray1#}]
prefetchMutableByteArray1# = GHC.Prim.prefetchMutableByteArray1#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchAddr1# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchAddr1#}]
prefetchAddr1# = GHC.Prim.prefetchAddr1#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchValue1# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<B,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchValue1#}]
prefetchValue1# = GHC.Prim.prefetchValue1#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchByteArray0# [InlPrag=NOINLINE]
  :: forall s. ByteArray# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchByteArray0#}]
prefetchByteArray0# = GHC.Prim.prefetchByteArray0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchMutableByteArray0# [InlPrag=NOINLINE]
  :: forall s. MutableByteArray# s -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchMutableByteArray0#}]
prefetchMutableByteArray0# = GHC.Prim.prefetchMutableByteArray0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchAddr0# [InlPrag=NOINLINE]
  :: forall s. Addr# -> Int# -> State# s -> State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchAddr0#}]
prefetchAddr0# = GHC.Prim.prefetchAddr0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
prefetchValue0# [InlPrag=NOINLINE]
  :: forall a s. a -> State# s -> State# s
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<B,A><L,U>,
 Unf=Unf{Src=InlineStable, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True,
         Guidance=ALWAYS_IF(arity=0,unsat_ok=True,boring_ok=True)
         Tmpl= GHC.Prim.prefetchValue0#}]
prefetchValue0# = GHC.Prim.prefetchValue0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.PrimopWrappers.$trModule4 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 30 0}]
GHC.PrimopWrappers.$trModule4 = "ghc-prim"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.PrimopWrappers.$trModule3 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.PrimopWrappers.$trModule3
  = GHC.Types.TrNameS GHC.PrimopWrappers.$trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
GHC.PrimopWrappers.$trModule2 :: Addr#
[GblId,
 Caf=NoCafRefs,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 60 0}]
GHC.PrimopWrappers.$trModule2 = "GHC.PrimopWrappers"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
GHC.PrimopWrappers.$trModule1 :: GHC.Types.TrName
[GblId,
 Caf=NoCafRefs,
 Str=m1,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 20}]
GHC.PrimopWrappers.$trModule1
  = GHC.Types.TrNameS GHC.PrimopWrappers.$trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
GHC.PrimopWrappers.$trModule :: GHC.Types.Module
[GblId,
 Caf=NoCafRefs,
 Str=m,
 Unf=Unf{Src=<vanilla>, TopLvl=True, Value=True, ConLike=True,
         WorkFree=True, Expandable=True, Guidance=IF_ARGS [] 10 30}]
GHC.PrimopWrappers.$trModule
  = GHC.Types.Module
      GHC.PrimopWrappers.$trModule3 GHC.PrimopWrappers.$trModule1


