
==================== Pre unarise: ====================
2018-03-16 15:50:15.908767327 UTC

GHC.PrimopWrappers.gtChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.geChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.neChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.leChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ord# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ord# [eta_B1];

GHC.PrimopWrappers.+# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +# [eta_B2 eta_B1];

GHC.PrimopWrappers.-# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -# [eta_B2 eta_B1];

GHC.PrimopWrappers.*# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *# [eta_B2 eta_B1];

GHC.PrimopWrappers.mulIntMayOflo# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] mulIntMayOflo# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.remInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.andI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] andI# [eta_B2 eta_B1];

GHC.PrimopWrappers.orI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] orI# [eta_B2 eta_B1];

GHC.PrimopWrappers.xorI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xorI# [eta_B2 eta_B1];

GHC.PrimopWrappers.notI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] notI# [eta_B1];

GHC.PrimopWrappers.negateInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateInt# [eta_B1];

GHC.PrimopWrappers.addIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] addIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.subIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.># [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ># [eta_B2 eta_B1];

GHC.PrimopWrappers.>=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=# [eta_B2 eta_B1];

GHC.PrimopWrappers.==# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==# [eta_B2 eta_B1];

GHC.PrimopWrappers./=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=# [eta_B2 eta_B1];

GHC.PrimopWrappers.<# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <# [eta_B2 eta_B1];

GHC.PrimopWrappers.<=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=# [eta_B2 eta_B1];

GHC.PrimopWrappers.chr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] chr# [eta_B1];

GHC.PrimopWrappers.int2Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Word# [eta_B1];

GHC.PrimopWrappers.int2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Float# [eta_B1];

GHC.PrimopWrappers.int2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Double# [eta_B1];

GHC.PrimopWrappers.word2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Float# [eta_B1];

GHC.PrimopWrappers.word2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Double# [eta_B1];

GHC.PrimopWrappers.uncheckedIShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRA# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.subWordC# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subWordC# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.remWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] quotRemWord2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.and# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] and# [eta_B2 eta_B1];

GHC.PrimopWrappers.or# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] or# [eta_B2 eta_B1];

GHC.PrimopWrappers.xor# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xor# [eta_B2 eta_B1];

GHC.PrimopWrappers.not# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] not# [eta_B1];

GHC.PrimopWrappers.uncheckedShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.word2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Int# [eta_B1];

GHC.PrimopWrappers.gtWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.geWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.neWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.leWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.popCnt8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt8# [eta_B1];

GHC.PrimopWrappers.popCnt16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt16# [eta_B1];

GHC.PrimopWrappers.popCnt32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt32# [eta_B1];

GHC.PrimopWrappers.popCnt64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt64# [eta_B1];

GHC.PrimopWrappers.popCnt# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt# [eta_B1];

GHC.PrimopWrappers.pdep8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext# [eta_B2 eta_B1];

GHC.PrimopWrappers.clz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz8# [eta_B1];

GHC.PrimopWrappers.clz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz16# [eta_B1];

GHC.PrimopWrappers.clz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz32# [eta_B1];

GHC.PrimopWrappers.clz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz64# [eta_B1];

GHC.PrimopWrappers.clz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz# [eta_B1];

GHC.PrimopWrappers.ctz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz8# [eta_B1];

GHC.PrimopWrappers.ctz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz16# [eta_B1];

GHC.PrimopWrappers.ctz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz32# [eta_B1];

GHC.PrimopWrappers.ctz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz64# [eta_B1];

GHC.PrimopWrappers.ctz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz# [eta_B1];

GHC.PrimopWrappers.byteSwap16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap16# [eta_B1];

GHC.PrimopWrappers.byteSwap32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap32# [eta_B1];

GHC.PrimopWrappers.byteSwap64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap64# [eta_B1];

GHC.PrimopWrappers.byteSwap# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap# [eta_B1];

GHC.PrimopWrappers.narrow8Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Int# [eta_B1];

GHC.PrimopWrappers.narrow16Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Int# [eta_B1];

GHC.PrimopWrappers.narrow32Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Int# [eta_B1];

GHC.PrimopWrappers.narrow8Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Word# [eta_B1];

GHC.PrimopWrappers.narrow16Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Word# [eta_B1];

GHC.PrimopWrappers.narrow32Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Word# [eta_B1];

GHC.PrimopWrappers.>## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >## [eta_B2 eta_B1];

GHC.PrimopWrappers.>=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=## [eta_B2 eta_B1];

GHC.PrimopWrappers.==## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==## [eta_B2 eta_B1];

GHC.PrimopWrappers./=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=## [eta_B2 eta_B1];

GHC.PrimopWrappers.<## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <## [eta_B2 eta_B1];

GHC.PrimopWrappers.<=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=## [eta_B2 eta_B1];

GHC.PrimopWrappers.+## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +## [eta_B2 eta_B1];

GHC.PrimopWrappers.-## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -## [eta_B2 eta_B1];

GHC.PrimopWrappers.*## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *## [eta_B2 eta_B1];

GHC.PrimopWrappers./## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /## [eta_B2 eta_B1];

GHC.PrimopWrappers.negateDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateDouble# [eta_B1];

GHC.PrimopWrappers.fabsDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsDouble# [eta_B1];

GHC.PrimopWrappers.double2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Int# [eta_B1];

GHC.PrimopWrappers.double2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Float# [eta_B1];

GHC.PrimopWrappers.expDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expDouble# [eta_B1];

GHC.PrimopWrappers.logDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logDouble# [eta_B1];

GHC.PrimopWrappers.sqrtDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtDouble# [eta_B1];

GHC.PrimopWrappers.sinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinDouble# [eta_B1];

GHC.PrimopWrappers.cosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosDouble# [eta_B1];

GHC.PrimopWrappers.tanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanDouble# [eta_B1];

GHC.PrimopWrappers.asinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinDouble# [eta_B1];

GHC.PrimopWrappers.acosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosDouble# [eta_B1];

GHC.PrimopWrappers.atanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanDouble# [eta_B1];

GHC.PrimopWrappers.sinhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhDouble# [eta_B1];

GHC.PrimopWrappers.coshDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshDouble# [eta_B1];

GHC.PrimopWrappers.tanhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhDouble# [eta_B1];

GHC.PrimopWrappers.**## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] **## [eta_B2 eta_B1];

GHC.PrimopWrappers.decodeDouble_2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Prim.Int#, GHC.Prim.Word#, GHC.Prim.Word#,
           GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_2Int# [eta_B1];

GHC.PrimopWrappers.decodeDouble_Int64# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_Int64# [eta_B1];

GHC.PrimopWrappers.gtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.geFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.neFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.leFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.divideFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] divideFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.negateFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateFloat# [eta_B1];

GHC.PrimopWrappers.fabsFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsFloat# [eta_B1];

GHC.PrimopWrappers.float2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Int# [eta_B1];

GHC.PrimopWrappers.expFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expFloat# [eta_B1];

GHC.PrimopWrappers.logFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logFloat# [eta_B1];

GHC.PrimopWrappers.sqrtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtFloat# [eta_B1];

GHC.PrimopWrappers.sinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinFloat# [eta_B1];

GHC.PrimopWrappers.cosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosFloat# [eta_B1];

GHC.PrimopWrappers.tanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanFloat# [eta_B1];

GHC.PrimopWrappers.asinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinFloat# [eta_B1];

GHC.PrimopWrappers.acosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosFloat# [eta_B1];

GHC.PrimopWrappers.atanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanFloat# [eta_B1];

GHC.PrimopWrappers.sinhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhFloat# [eta_B1];

GHC.PrimopWrappers.coshFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshFloat# [eta_B1];

GHC.PrimopWrappers.tanhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhFloat# [eta_B1];

GHC.PrimopWrappers.powerFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] powerFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.float2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Double# [eta_B1];

GHC.PrimopWrappers.decodeFloat_Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeFloat_Int# [eta_B1];

GHC.PrimopWrappers.newArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] newArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArray# [eta_B1];

GHC.PrimopWrappers.indexArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeThawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeThawArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.copyArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Array# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Array# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] cloneArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        cloneMutableArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.freezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        freezeArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.thawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        thawArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        casArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] newSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameSmallMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeSmallArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallArray# [eta_B1];

GHC.PrimopWrappers.sizeofSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallMutableArray# [eta_B1];

GHC.PrimopWrappers.indexSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeThawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeThawSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.copySmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copySmallArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copySmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copySmallMutableArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneSmallArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.SmallArray# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        cloneSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        cloneSmallMutableArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.freezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        freezeSmallArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.thawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        thawSmallArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        casSmallArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.newPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newPinnedByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.newAlignedPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        newAlignedPinnedByteArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.isMutableByteArrayPinned# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isMutableByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.isByteArrayPinned# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.byteArrayContents# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteArrayContents# [eta_B1];

GHC.PrimopWrappers.sameMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.shrinkMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        shrinkMutableByteArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.resizeMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        resizeMutableByteArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofByteArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofByteArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableByteArray# [eta_B1];

GHC.PrimopWrappers.getSizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getSizeofMutableByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readCharArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWideCharArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readIntArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readWordArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readAddrArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readFloatArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readDoubleArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readStablePtrArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readInt8Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt16Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt32Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt64Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord8Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord16Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord32Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord64Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeCharArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWideCharArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWordArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeAddrArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeFloatArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeDoubleArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeStablePtrArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt8Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt16Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt32Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt64Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord8Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord16Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord32Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord64Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compareByteArrays# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        compareByteArrays# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyByteArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableByteArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyByteArrayToAddr# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableByteArrayToAddr# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyAddrToByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyAddrToByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.setByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        setByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.atomicReadIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        atomicReadIntArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.atomicWriteIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        atomicWriteIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        casIntArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchAddIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchAddIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchSubIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchSubIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchAndIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchAndIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchNandIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchNandIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchOrIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchOrIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchXorIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchXorIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.sameMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArrayArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArrayArray# [eta_B1];

GHC.PrimopWrappers.indexByteArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ByteArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexByteArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexArrayArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ArrayArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArrayArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readByteArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readMutableByteArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readArrayArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readMutableArrayArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeByteArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeMutableByteArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ArrayArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeArrayArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeMutableArrayArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ArrayArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyArrayArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableArrayArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.plusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.remAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.addr2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addr2Int# [eta_B1];

GHC.PrimopWrappers.int2Addr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Addr# [eta_B1];

GHC.PrimopWrappers.gtAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.geAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.neAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.leAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readCharOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWideCharOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readIntOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWordOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readAddrOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readFloatOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readDoubleOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readStablePtrOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt8OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt16OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt32OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt64OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord8OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord16OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord32OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord64OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeCharOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWideCharOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeIntOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWordOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeAddrOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeFloatOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeDoubleOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeStablePtrOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt8OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt16OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt32OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt64OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord8OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord16OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord32OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord64OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newMutVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.readMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.writeMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] writeMutVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> GHC.Prim.MutVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.atomicModifyMutVar# [InlPrag=NOINLINE]
  :: forall s a b c.
     GHC.Prim.MutVar# s a
     -> (a -> b) -> GHC.Prim.State# s -> (# GHC.Prim.State# s, c #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        atomicModifyMutVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        casMutVar# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.catch# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catch# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.raise# [InlPrag=NOINLINE] :: forall b o. b -> o
[GblId, Arity=1, Caf=NoCafRefs, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [a1_sw06] raise# [a1_sw06];

GHC.PrimopWrappers.raiseIO# [InlPrag=NOINLINE]
  :: forall a b.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] raiseIO# [eta_B2 eta_B1];

GHC.PrimopWrappers.maskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] maskAsyncExceptions# [eta_B2 eta_B1];

GHC.PrimopWrappers.maskUninterruptible# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] maskUninterruptible# [eta_B2 eta_B1];

GHC.PrimopWrappers.unmaskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unmaskAsyncExceptions# [eta_B2 eta_B1];

GHC.PrimopWrappers.getMaskingState# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] getMaskingState# [eta_B1];

GHC.PrimopWrappers.atomically# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] atomically# [eta_B2 eta_B1];

GHC.PrimopWrappers.retry# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.PrimopWrappers.catchRetry# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.catchSTM# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catchSTM# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.check# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] check# [eta_B2 eta_B1];

GHC.PrimopWrappers.newTVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.TVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.readTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.readTVarIO# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readTVarIO# [eta_B2 eta_B1];

GHC.PrimopWrappers.writeTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] writeTVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> GHC.Prim.TVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.newMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.MVar# s a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] newMVar# [eta_B1];

GHC.PrimopWrappers.takeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] takeMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.tryTakeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] tryTakeMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.putMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] putMVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.tryPutMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] tryPutMVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.tryReadMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] tryReadMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.sameMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> GHC.Prim.MVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.isEmptyMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] isEmptyMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.delay# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] delay# [eta_B2 eta_B1];

GHC.PrimopWrappers.waitRead# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] waitRead# [eta_B2 eta_B1];

GHC.PrimopWrappers.waitWrite# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] waitWrite# [eta_B2 eta_B1];

GHC.PrimopWrappers.fork# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] fork# [eta_B2 eta_B1];

GHC.PrimopWrappers.forkOn# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] forkOn# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.killThread# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ThreadId#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] killThread# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.yield# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] yield# [eta_B1];

GHC.PrimopWrappers.myThreadId# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] myThreadId# [eta_B1];

GHC.PrimopWrappers.labelThread# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] labelThread# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.isCurrentThreadBound# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isCurrentThreadBound# [eta_B1];

GHC.PrimopWrappers.noDuplicate# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] noDuplicate# [eta_B1];

GHC.PrimopWrappers.threadStatus# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] threadStatus# [eta_B2 eta_B1];

GHC.PrimopWrappers.mkWeak# [InlPrag=NOINLINE]
  :: forall o b c.
     o
     -> b
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        mkWeak# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.mkWeakNoFinalizer# [InlPrag=NOINLINE]
  :: forall o b.
     o
     -> b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        mkWeakNoFinalizer# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.addCFinalizerToWeak# [InlPrag=NOINLINE]
  :: forall b.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Weak# b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        addCFinalizerToWeak# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.deRefWeak# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] deRefWeak# [eta_B2 eta_B1];

GHC.PrimopWrappers.finalizeWeak# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #) #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] finalizeWeak# [eta_B2 eta_B1];

GHC.PrimopWrappers.touch# [InlPrag=NOINLINE]
  :: forall o.
     o
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] touch# [eta_B2 eta_B1];

GHC.PrimopWrappers.makeStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StablePtr# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] makeStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.deRefStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] deRefStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a -> GHC.Prim.StablePtr# a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.makeStableName# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StableName# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] makeStableName# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqStableName# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.StableName# a -> GHC.Prim.StableName# b -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStableName# [eta_B2 eta_B1];

GHC.PrimopWrappers.stableNameToInt# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.StableName# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] stableNameToInt# [eta_B1];

GHC.PrimopWrappers.compactNew# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactNew# [eta_B2 eta_B1];

GHC.PrimopWrappers.compactResize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] compactResize# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactContains# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactContains# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactContainsAny# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactContainsAny# [eta_B2 eta_B1];

GHC.PrimopWrappers.compactGetFirstBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactGetFirstBlock# [eta_B2 eta_B1];

GHC.PrimopWrappers.compactGetNextBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactGetNextBlock# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactAllocateBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactAllocateBlock# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactFixupPointers# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact#,
           GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactFixupPointers# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactAdd# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] compactAdd# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactAddWithSharing# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactAddWithSharing# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactSize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactSize# [eta_B2 eta_B1];

GHC.PrimopWrappers.reallyUnsafePtrEquality# [InlPrag=NOINLINE]
  :: forall a. a -> a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] reallyUnsafePtrEquality# [eta_B2 eta_B1];

GHC.PrimopWrappers.par# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] par# [eta_B1];

GHC.PrimopWrappers.spark# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] spark# [eta_B2 eta_B1];

GHC.PrimopWrappers.seq# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] seq# [eta_B2 eta_B1];

GHC.PrimopWrappers.getSpark# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] getSpark# [eta_B1];

GHC.PrimopWrappers.numSparks# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] numSparks# [eta_B1];

GHC.PrimopWrappers.dataToTag# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        case eta_B1 of sat_sw07 { __DEFAULT -> dataToTag# [sat_sw07]; };

GHC.PrimopWrappers.addrToAny# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Addr# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addrToAny# [eta_B1];

GHC.PrimopWrappers.anyToAddr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] anyToAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.mkApUpd0# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.BCO# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] mkApUpd0# [eta_B1];

GHC.PrimopWrappers.newBCO# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.BCO# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        newBCO# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.unpackClosure# [InlPrag=NOINLINE]
  :: forall a b.
     a -> (# GHC.Prim.Addr#, GHC.Prim.Array# b, GHC.Prim.ByteArray# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] unpackClosure# [eta_B1];

GHC.PrimopWrappers.getApStackVal# [InlPrag=NOINLINE]
  :: forall a b. a -> GHC.Prim.Int# -> (# GHC.Prim.Int#, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getApStackVal# [eta_B2 eta_B1];

GHC.PrimopWrappers.getCCSOf# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getCCSOf# [eta_B2 eta_B1];

GHC.PrimopWrappers.getCurrentCCS# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getCurrentCCS# [eta_B2 eta_B1];

GHC.PrimopWrappers.clearCCS# [InlPrag=NOINLINE]
  :: forall s a.
     (GHC.Prim.State# s -> (# GHC.Prim.State# s, a #))
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] clearCCS# [eta_B2 eta_B1];

GHC.PrimopWrappers.traceEvent# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] traceEvent# [eta_B2 eta_B1];

GHC.PrimopWrappers.traceMarker# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] traceMarker# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray3# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray3# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr3# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue3# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue3# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue2# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue2# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray1# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray1# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr1# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue1# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue1# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray0# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray0# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr0# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue0# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue0# [eta_B2 eta_B1];

GHC.PrimopWrappers.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.PrimopWrappers.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule4];

GHC.PrimopWrappers.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.PrimopWrappers"#;

GHC.PrimopWrappers.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule2];

GHC.PrimopWrappers.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.PrimopWrappers.$trModule3
                                     GHC.PrimopWrappers.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:50:16.074401865 UTC

GHC.PrimopWrappers.gtChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.geChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.neChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.leChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ord# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ord# [eta_B1];

GHC.PrimopWrappers.+# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +# [eta_B2 eta_B1];

GHC.PrimopWrappers.-# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -# [eta_B2 eta_B1];

GHC.PrimopWrappers.*# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *# [eta_B2 eta_B1];

GHC.PrimopWrappers.mulIntMayOflo# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] mulIntMayOflo# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.remInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.andI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] andI# [eta_B2 eta_B1];

GHC.PrimopWrappers.orI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] orI# [eta_B2 eta_B1];

GHC.PrimopWrappers.xorI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xorI# [eta_B2 eta_B1];

GHC.PrimopWrappers.notI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] notI# [eta_B1];

GHC.PrimopWrappers.negateInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateInt# [eta_B1];

GHC.PrimopWrappers.addIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] addIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.subIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.># [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ># [eta_B2 eta_B1];

GHC.PrimopWrappers.>=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=# [eta_B2 eta_B1];

GHC.PrimopWrappers.==# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==# [eta_B2 eta_B1];

GHC.PrimopWrappers./=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=# [eta_B2 eta_B1];

GHC.PrimopWrappers.<# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <# [eta_B2 eta_B1];

GHC.PrimopWrappers.<=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=# [eta_B2 eta_B1];

GHC.PrimopWrappers.chr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] chr# [eta_B1];

GHC.PrimopWrappers.int2Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Word# [eta_B1];

GHC.PrimopWrappers.int2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Float# [eta_B1];

GHC.PrimopWrappers.int2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Double# [eta_B1];

GHC.PrimopWrappers.word2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Float# [eta_B1];

GHC.PrimopWrappers.word2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Double# [eta_B1];

GHC.PrimopWrappers.uncheckedIShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRA# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.subWordC# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subWordC# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.remWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] quotRemWord2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.and# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] and# [eta_B2 eta_B1];

GHC.PrimopWrappers.or# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] or# [eta_B2 eta_B1];

GHC.PrimopWrappers.xor# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xor# [eta_B2 eta_B1];

GHC.PrimopWrappers.not# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] not# [eta_B1];

GHC.PrimopWrappers.uncheckedShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.word2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Int# [eta_B1];

GHC.PrimopWrappers.gtWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.geWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.neWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.leWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.popCnt8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt8# [eta_B1];

GHC.PrimopWrappers.popCnt16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt16# [eta_B1];

GHC.PrimopWrappers.popCnt32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt32# [eta_B1];

GHC.PrimopWrappers.popCnt64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt64# [eta_B1];

GHC.PrimopWrappers.popCnt# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt# [eta_B1];

GHC.PrimopWrappers.pdep8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext# [eta_B2 eta_B1];

GHC.PrimopWrappers.clz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz8# [eta_B1];

GHC.PrimopWrappers.clz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz16# [eta_B1];

GHC.PrimopWrappers.clz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz32# [eta_B1];

GHC.PrimopWrappers.clz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz64# [eta_B1];

GHC.PrimopWrappers.clz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz# [eta_B1];

GHC.PrimopWrappers.ctz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz8# [eta_B1];

GHC.PrimopWrappers.ctz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz16# [eta_B1];

GHC.PrimopWrappers.ctz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz32# [eta_B1];

GHC.PrimopWrappers.ctz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz64# [eta_B1];

GHC.PrimopWrappers.ctz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz# [eta_B1];

GHC.PrimopWrappers.byteSwap16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap16# [eta_B1];

GHC.PrimopWrappers.byteSwap32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap32# [eta_B1];

GHC.PrimopWrappers.byteSwap64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap64# [eta_B1];

GHC.PrimopWrappers.byteSwap# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap# [eta_B1];

GHC.PrimopWrappers.narrow8Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Int# [eta_B1];

GHC.PrimopWrappers.narrow16Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Int# [eta_B1];

GHC.PrimopWrappers.narrow32Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Int# [eta_B1];

GHC.PrimopWrappers.narrow8Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Word# [eta_B1];

GHC.PrimopWrappers.narrow16Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Word# [eta_B1];

GHC.PrimopWrappers.narrow32Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Word# [eta_B1];

GHC.PrimopWrappers.>## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >## [eta_B2 eta_B1];

GHC.PrimopWrappers.>=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=## [eta_B2 eta_B1];

GHC.PrimopWrappers.==## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==## [eta_B2 eta_B1];

GHC.PrimopWrappers./=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=## [eta_B2 eta_B1];

GHC.PrimopWrappers.<## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <## [eta_B2 eta_B1];

GHC.PrimopWrappers.<=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=## [eta_B2 eta_B1];

GHC.PrimopWrappers.+## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +## [eta_B2 eta_B1];

GHC.PrimopWrappers.-## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -## [eta_B2 eta_B1];

GHC.PrimopWrappers.*## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *## [eta_B2 eta_B1];

GHC.PrimopWrappers./## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /## [eta_B2 eta_B1];

GHC.PrimopWrappers.negateDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateDouble# [eta_B1];

GHC.PrimopWrappers.fabsDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsDouble# [eta_B1];

GHC.PrimopWrappers.double2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Int# [eta_B1];

GHC.PrimopWrappers.double2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Float# [eta_B1];

GHC.PrimopWrappers.expDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expDouble# [eta_B1];

GHC.PrimopWrappers.logDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logDouble# [eta_B1];

GHC.PrimopWrappers.sqrtDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtDouble# [eta_B1];

GHC.PrimopWrappers.sinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinDouble# [eta_B1];

GHC.PrimopWrappers.cosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosDouble# [eta_B1];

GHC.PrimopWrappers.tanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanDouble# [eta_B1];

GHC.PrimopWrappers.asinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinDouble# [eta_B1];

GHC.PrimopWrappers.acosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosDouble# [eta_B1];

GHC.PrimopWrappers.atanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanDouble# [eta_B1];

GHC.PrimopWrappers.sinhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhDouble# [eta_B1];

GHC.PrimopWrappers.coshDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshDouble# [eta_B1];

GHC.PrimopWrappers.tanhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhDouble# [eta_B1];

GHC.PrimopWrappers.**## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] **## [eta_B2 eta_B1];

GHC.PrimopWrappers.decodeDouble_2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Prim.Int#, GHC.Prim.Word#, GHC.Prim.Word#,
           GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_2Int# [eta_B1];

GHC.PrimopWrappers.decodeDouble_Int64# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_Int64# [eta_B1];

GHC.PrimopWrappers.gtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.geFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.neFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.leFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.divideFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] divideFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.negateFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateFloat# [eta_B1];

GHC.PrimopWrappers.fabsFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsFloat# [eta_B1];

GHC.PrimopWrappers.float2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Int# [eta_B1];

GHC.PrimopWrappers.expFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expFloat# [eta_B1];

GHC.PrimopWrappers.logFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logFloat# [eta_B1];

GHC.PrimopWrappers.sqrtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtFloat# [eta_B1];

GHC.PrimopWrappers.sinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinFloat# [eta_B1];

GHC.PrimopWrappers.cosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosFloat# [eta_B1];

GHC.PrimopWrappers.tanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanFloat# [eta_B1];

GHC.PrimopWrappers.asinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinFloat# [eta_B1];

GHC.PrimopWrappers.acosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosFloat# [eta_B1];

GHC.PrimopWrappers.atanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanFloat# [eta_B1];

GHC.PrimopWrappers.sinhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhFloat# [eta_B1];

GHC.PrimopWrappers.coshFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshFloat# [eta_B1];

GHC.PrimopWrappers.tanhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhFloat# [eta_B1];

GHC.PrimopWrappers.powerFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] powerFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.float2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Double# [eta_B1];

GHC.PrimopWrappers.decodeFloat_Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeFloat_Int# [eta_B1];

GHC.PrimopWrappers.newArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        newArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArray# [eta_B1];

GHC.PrimopWrappers.indexArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] unsafeFreezeArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unsafeThawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] unsafeThawArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableArray# [eta_B6
                           eta_B5
                           eta_B4
                           eta_B3
                           eta_B2
                           GHC.Prim.void#];

GHC.PrimopWrappers.cloneArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Array# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Array# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] cloneArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        cloneMutableArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.freezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        freezeArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.thawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        thawArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        casArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        newSmallArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameSmallMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readSmallArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeSmallArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallArray# [eta_B1];

GHC.PrimopWrappers.sizeofSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallMutableArray# [eta_B1];

GHC.PrimopWrappers.indexSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeFreezeSmallArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unsafeThawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeThawSmallArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copySmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copySmallArray# [eta_B6
                         eta_B5
                         eta_B4
                         eta_B3
                         eta_B2
                         GHC.Prim.void#];

GHC.PrimopWrappers.copySmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copySmallMutableArray# [eta_B6
                                eta_B5
                                eta_B4
                                eta_B3
                                eta_B2
                                GHC.Prim.void#];

GHC.PrimopWrappers.cloneSmallArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.SmallArray# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        cloneSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        cloneSmallMutableArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.freezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        freezeSmallArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.thawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        thawSmallArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        casSmallArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newPinnedByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newAlignedPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        newAlignedPinnedByteArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.isMutableByteArrayPinned# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isMutableByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.isByteArrayPinned# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.byteArrayContents# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteArrayContents# [eta_B1];

GHC.PrimopWrappers.sameMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.shrinkMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        shrinkMutableByteArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.resizeMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        resizeMutableByteArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unsafeFreezeByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeFreezeByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofByteArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofByteArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableByteArray# [eta_B1];

GHC.PrimopWrappers.getSizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        getSizeofMutableByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.indexCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readCharArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWideCharArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readIntArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWordArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readAddrArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readFloatArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readDoubleArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readStablePtrArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt8Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt16Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt32Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt64Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord8Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord16Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord32Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord64Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeCharArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWideCharArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWordArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeAddrArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeFloatArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeDoubleArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeStablePtrArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt8Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt16Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt32Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt64Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord8Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord16Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord32Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord64Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compareByteArrays# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        compareByteArrays# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyByteArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableByteArray# [eta_B6
                               eta_B5
                               eta_B4
                               eta_B3
                               eta_B2
                               GHC.Prim.void#];

GHC.PrimopWrappers.copyByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyByteArrayToAddr# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableByteArrayToAddr# [eta_B5
                                     eta_B4
                                     eta_B3
                                     eta_B2
                                     GHC.Prim.void#];

GHC.PrimopWrappers.copyAddrToByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyAddrToByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.setByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        setByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.atomicReadIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        atomicReadIntArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.atomicWriteIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        atomicWriteIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        casIntArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchAddIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchAddIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchSubIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchSubIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchAndIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchAndIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchNandIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchNandIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchOrIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchOrIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchXorIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchXorIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newArrayArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeFreezeArrayArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArrayArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArrayArray# [eta_B1];

GHC.PrimopWrappers.indexByteArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ByteArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexByteArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexArrayArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ArrayArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArrayArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readByteArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readMutableByteArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readArrayArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readMutableArrayArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeByteArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeMutableByteArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ArrayArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeArrayArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeMutableArrayArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ArrayArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyArrayArray# [eta_B6
                         eta_B5
                         eta_B4
                         eta_B3
                         eta_B2
                         GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableArrayArray# [eta_B6
                                eta_B5
                                eta_B4
                                eta_B3
                                eta_B2
                                GHC.Prim.void#];

GHC.PrimopWrappers.plusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.remAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.addr2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addr2Int# [eta_B1];

GHC.PrimopWrappers.int2Addr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Addr# [eta_B1];

GHC.PrimopWrappers.gtAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.geAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.neAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.leAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readCharOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWideCharOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readIntOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWordOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readAddrOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readFloatOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readDoubleOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readStablePtrOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt8OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt16OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt32OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt64OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord8OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord16OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord32OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord64OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeCharOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWideCharOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeIntOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWordOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeAddrOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeFloatOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeDoubleOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeStablePtrOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt8OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt16OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt32OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt64OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord8OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord16OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord32OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord64OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newMutVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newMutVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readMutVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        writeMutVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> GHC.Prim.MutVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.atomicModifyMutVar# [InlPrag=NOINLINE]
  :: forall s a b c.
     GHC.Prim.MutVar# s a
     -> (a -> b) -> GHC.Prim.State# s -> (# GHC.Prim.State# s, c #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        atomicModifyMutVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        casMutVar# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.catch# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catch# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.raise# [InlPrag=NOINLINE] :: forall b o. b -> o
[GblId, Arity=1, Caf=NoCafRefs, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [a1_sw06] raise# [a1_sw06];

GHC.PrimopWrappers.raiseIO# [InlPrag=NOINLINE]
  :: forall a b.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] raiseIO# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.maskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        maskAsyncExceptions# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.maskUninterruptible# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        maskUninterruptible# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unmaskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.getMaskingState# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] getMaskingState# [GHC.Prim.void#];

GHC.PrimopWrappers.atomically# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] atomically# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.retry# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.PrimopWrappers.catchRetry# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.catchSTM# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchSTM# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.check# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] check# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newTVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.TVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newTVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readTVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readTVarIO# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readTVarIO# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        writeTVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> GHC.Prim.TVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.newMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.MVar# s a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] newMVar# [GHC.Prim.void#];

GHC.PrimopWrappers.takeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] takeMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.tryTakeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] tryTakeMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.putMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        putMVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.tryPutMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        tryPutMVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.tryReadMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] tryReadMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> GHC.Prim.MVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.isEmptyMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] isEmptyMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.delay# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] delay# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.waitRead# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] waitRead# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.waitWrite# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] waitWrite# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fork# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] fork# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.forkOn# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        forkOn# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.killThread# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ThreadId#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        killThread# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.yield# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] yield# [GHC.Prim.void#];

GHC.PrimopWrappers.myThreadId# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] myThreadId# [GHC.Prim.void#];

GHC.PrimopWrappers.labelThread# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        labelThread# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.isCurrentThreadBound# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] isCurrentThreadBound# [GHC.Prim.void#];

GHC.PrimopWrappers.noDuplicate# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] noDuplicate# [GHC.Prim.void#];

GHC.PrimopWrappers.threadStatus# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] threadStatus# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.mkWeak# [InlPrag=NOINLINE]
  :: forall o b c.
     o
     -> b
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        mkWeak# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.mkWeakNoFinalizer# [InlPrag=NOINLINE]
  :: forall o b.
     o
     -> b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        mkWeakNoFinalizer# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.addCFinalizerToWeak# [InlPrag=NOINLINE]
  :: forall b.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Weak# b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        addCFinalizerToWeak# [eta_B6
                              eta_B5
                              eta_B4
                              eta_B3
                              eta_B2
                              GHC.Prim.void#];

GHC.PrimopWrappers.deRefWeak# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] deRefWeak# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.finalizeWeak# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #) #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] finalizeWeak# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.touch# [InlPrag=NOINLINE]
  :: forall o.
     o
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] touch# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.makeStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StablePtr# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] makeStablePtr# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.deRefStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] deRefStablePtr# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.eqStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a -> GHC.Prim.StablePtr# a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.makeStableName# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StableName# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] makeStableName# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.eqStableName# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.StableName# a -> GHC.Prim.StableName# b -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStableName# [eta_B2 eta_B1];

GHC.PrimopWrappers.stableNameToInt# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.StableName# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] stableNameToInt# [eta_B1];

GHC.PrimopWrappers.compactNew# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] compactNew# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactResize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactResize# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactContains# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactContains# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactContainsAny# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] compactContainsAny# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactGetFirstBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        compactGetFirstBlock# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactGetNextBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactGetNextBlock# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactAllocateBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactAllocateBlock# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactFixupPointers# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact#,
           GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactFixupPointers# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactAdd# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactAdd# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactAddWithSharing# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactAddWithSharing# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactSize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] compactSize# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.reallyUnsafePtrEquality# [InlPrag=NOINLINE]
  :: forall a. a -> a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] reallyUnsafePtrEquality# [eta_B2 eta_B1];

GHC.PrimopWrappers.par# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] par# [eta_B1];

GHC.PrimopWrappers.spark# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] spark# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.seq# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] seq# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.getSpark# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] getSpark# [GHC.Prim.void#];

GHC.PrimopWrappers.numSparks# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] numSparks# [GHC.Prim.void#];

GHC.PrimopWrappers.dataToTag# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        case eta_B1 of sat_sw07 { __DEFAULT -> dataToTag# [sat_sw07]; };

GHC.PrimopWrappers.addrToAny# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Addr# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addrToAny# [eta_B1];

GHC.PrimopWrappers.anyToAddr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] anyToAddr# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.mkApUpd0# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.BCO# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] mkApUpd0# [eta_B1];

GHC.PrimopWrappers.newBCO# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.BCO# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        newBCO# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unpackClosure# [InlPrag=NOINLINE]
  :: forall a b.
     a -> (# GHC.Prim.Addr#, GHC.Prim.Array# b, GHC.Prim.ByteArray# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] unpackClosure# [eta_B1];

GHC.PrimopWrappers.getApStackVal# [InlPrag=NOINLINE]
  :: forall a b. a -> GHC.Prim.Int# -> (# GHC.Prim.Int#, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getApStackVal# [eta_B2 eta_B1];

GHC.PrimopWrappers.getCCSOf# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] getCCSOf# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.getCurrentCCS# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] getCurrentCCS# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.clearCCS# [InlPrag=NOINLINE]
  :: forall s a.
     (GHC.Prim.State# s -> (# GHC.Prim.State# s, a #))
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] clearCCS# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.traceEvent# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] traceEvent# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.traceMarker# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] traceMarker# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray3# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray3# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr3# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue3# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue3# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray2# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray2# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr2# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue2# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue2# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray1# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray1# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr1# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue1# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue1# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray0# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray0# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr0# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue0# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue0# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.PrimopWrappers.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule4];

GHC.PrimopWrappers.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.PrimopWrappers"#;

GHC.PrimopWrappers.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule2];

GHC.PrimopWrappers.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.PrimopWrappers.$trModule3
                                     GHC.PrimopWrappers.$trModule1];


==================== Pre unarise: ====================
2018-03-16 15:50:20.461733693 UTC

GHC.PrimopWrappers.gtChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.geChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.neChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.leChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ord# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ord# [eta_B1];

GHC.PrimopWrappers.+# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +# [eta_B2 eta_B1];

GHC.PrimopWrappers.-# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -# [eta_B2 eta_B1];

GHC.PrimopWrappers.*# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *# [eta_B2 eta_B1];

GHC.PrimopWrappers.mulIntMayOflo# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] mulIntMayOflo# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.remInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.andI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] andI# [eta_B2 eta_B1];

GHC.PrimopWrappers.orI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] orI# [eta_B2 eta_B1];

GHC.PrimopWrappers.xorI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xorI# [eta_B2 eta_B1];

GHC.PrimopWrappers.notI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] notI# [eta_B1];

GHC.PrimopWrappers.negateInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateInt# [eta_B1];

GHC.PrimopWrappers.addIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] addIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.subIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.># [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ># [eta_B2 eta_B1];

GHC.PrimopWrappers.>=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=# [eta_B2 eta_B1];

GHC.PrimopWrappers.==# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==# [eta_B2 eta_B1];

GHC.PrimopWrappers./=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=# [eta_B2 eta_B1];

GHC.PrimopWrappers.<# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <# [eta_B2 eta_B1];

GHC.PrimopWrappers.<=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=# [eta_B2 eta_B1];

GHC.PrimopWrappers.chr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] chr# [eta_B1];

GHC.PrimopWrappers.int2Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Word# [eta_B1];

GHC.PrimopWrappers.int2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Float# [eta_B1];

GHC.PrimopWrappers.int2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Double# [eta_B1];

GHC.PrimopWrappers.word2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Float# [eta_B1];

GHC.PrimopWrappers.word2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Double# [eta_B1];

GHC.PrimopWrappers.uncheckedIShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRA# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.subWordC# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subWordC# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.remWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] quotRemWord2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.and# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] and# [eta_B2 eta_B1];

GHC.PrimopWrappers.or# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] or# [eta_B2 eta_B1];

GHC.PrimopWrappers.xor# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xor# [eta_B2 eta_B1];

GHC.PrimopWrappers.not# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] not# [eta_B1];

GHC.PrimopWrappers.uncheckedShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.word2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Int# [eta_B1];

GHC.PrimopWrappers.gtWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.geWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.neWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.leWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.popCnt8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt8# [eta_B1];

GHC.PrimopWrappers.popCnt16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt16# [eta_B1];

GHC.PrimopWrappers.popCnt32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt32# [eta_B1];

GHC.PrimopWrappers.popCnt64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt64# [eta_B1];

GHC.PrimopWrappers.popCnt# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt# [eta_B1];

GHC.PrimopWrappers.pdep8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext# [eta_B2 eta_B1];

GHC.PrimopWrappers.clz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz8# [eta_B1];

GHC.PrimopWrappers.clz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz16# [eta_B1];

GHC.PrimopWrappers.clz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz32# [eta_B1];

GHC.PrimopWrappers.clz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz64# [eta_B1];

GHC.PrimopWrappers.clz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz# [eta_B1];

GHC.PrimopWrappers.ctz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz8# [eta_B1];

GHC.PrimopWrappers.ctz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz16# [eta_B1];

GHC.PrimopWrappers.ctz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz32# [eta_B1];

GHC.PrimopWrappers.ctz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz64# [eta_B1];

GHC.PrimopWrappers.ctz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz# [eta_B1];

GHC.PrimopWrappers.byteSwap16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap16# [eta_B1];

GHC.PrimopWrappers.byteSwap32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap32# [eta_B1];

GHC.PrimopWrappers.byteSwap64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap64# [eta_B1];

GHC.PrimopWrappers.byteSwap# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap# [eta_B1];

GHC.PrimopWrappers.narrow8Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Int# [eta_B1];

GHC.PrimopWrappers.narrow16Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Int# [eta_B1];

GHC.PrimopWrappers.narrow32Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Int# [eta_B1];

GHC.PrimopWrappers.narrow8Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Word# [eta_B1];

GHC.PrimopWrappers.narrow16Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Word# [eta_B1];

GHC.PrimopWrappers.narrow32Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Word# [eta_B1];

GHC.PrimopWrappers.>## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >## [eta_B2 eta_B1];

GHC.PrimopWrappers.>=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=## [eta_B2 eta_B1];

GHC.PrimopWrappers.==## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==## [eta_B2 eta_B1];

GHC.PrimopWrappers./=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=## [eta_B2 eta_B1];

GHC.PrimopWrappers.<## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <## [eta_B2 eta_B1];

GHC.PrimopWrappers.<=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=## [eta_B2 eta_B1];

GHC.PrimopWrappers.+## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +## [eta_B2 eta_B1];

GHC.PrimopWrappers.-## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -## [eta_B2 eta_B1];

GHC.PrimopWrappers.*## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *## [eta_B2 eta_B1];

GHC.PrimopWrappers./## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /## [eta_B2 eta_B1];

GHC.PrimopWrappers.negateDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateDouble# [eta_B1];

GHC.PrimopWrappers.fabsDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsDouble# [eta_B1];

GHC.PrimopWrappers.double2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Int# [eta_B1];

GHC.PrimopWrappers.double2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Float# [eta_B1];

GHC.PrimopWrappers.expDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expDouble# [eta_B1];

GHC.PrimopWrappers.logDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logDouble# [eta_B1];

GHC.PrimopWrappers.sqrtDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtDouble# [eta_B1];

GHC.PrimopWrappers.sinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinDouble# [eta_B1];

GHC.PrimopWrappers.cosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosDouble# [eta_B1];

GHC.PrimopWrappers.tanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanDouble# [eta_B1];

GHC.PrimopWrappers.asinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinDouble# [eta_B1];

GHC.PrimopWrappers.acosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosDouble# [eta_B1];

GHC.PrimopWrappers.atanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanDouble# [eta_B1];

GHC.PrimopWrappers.sinhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhDouble# [eta_B1];

GHC.PrimopWrappers.coshDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshDouble# [eta_B1];

GHC.PrimopWrappers.tanhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhDouble# [eta_B1];

GHC.PrimopWrappers.**## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] **## [eta_B2 eta_B1];

GHC.PrimopWrappers.decodeDouble_2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Prim.Int#, GHC.Prim.Word#, GHC.Prim.Word#,
           GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_2Int# [eta_B1];

GHC.PrimopWrappers.decodeDouble_Int64# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_Int64# [eta_B1];

GHC.PrimopWrappers.gtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.geFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.neFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.leFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.divideFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] divideFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.negateFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateFloat# [eta_B1];

GHC.PrimopWrappers.fabsFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsFloat# [eta_B1];

GHC.PrimopWrappers.float2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Int# [eta_B1];

GHC.PrimopWrappers.expFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expFloat# [eta_B1];

GHC.PrimopWrappers.logFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logFloat# [eta_B1];

GHC.PrimopWrappers.sqrtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtFloat# [eta_B1];

GHC.PrimopWrappers.sinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinFloat# [eta_B1];

GHC.PrimopWrappers.cosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosFloat# [eta_B1];

GHC.PrimopWrappers.tanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanFloat# [eta_B1];

GHC.PrimopWrappers.asinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinFloat# [eta_B1];

GHC.PrimopWrappers.acosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosFloat# [eta_B1];

GHC.PrimopWrappers.atanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanFloat# [eta_B1];

GHC.PrimopWrappers.sinhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhFloat# [eta_B1];

GHC.PrimopWrappers.coshFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshFloat# [eta_B1];

GHC.PrimopWrappers.tanhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhFloat# [eta_B1];

GHC.PrimopWrappers.powerFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] powerFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.float2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Double# [eta_B1];

GHC.PrimopWrappers.decodeFloat_Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeFloat_Int# [eta_B1];

GHC.PrimopWrappers.newArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] newArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArray# [eta_B1];

GHC.PrimopWrappers.indexArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeThawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeThawArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.copyArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Array# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Array# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] cloneArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        cloneMutableArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.freezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        freezeArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.thawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        thawArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        casArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] newSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameSmallMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeSmallArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallArray# [eta_B1];

GHC.PrimopWrappers.sizeofSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallMutableArray# [eta_B1];

GHC.PrimopWrappers.indexSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeThawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeThawSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.copySmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copySmallArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copySmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copySmallMutableArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneSmallArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.SmallArray# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        cloneSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        cloneSmallMutableArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.freezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        freezeSmallArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.thawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        thawSmallArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        casSmallArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.newPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newPinnedByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.newAlignedPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        newAlignedPinnedByteArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.isMutableByteArrayPinned# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isMutableByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.isByteArrayPinned# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.byteArrayContents# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteArrayContents# [eta_B1];

GHC.PrimopWrappers.sameMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.shrinkMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        shrinkMutableByteArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.resizeMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        resizeMutableByteArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofByteArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofByteArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableByteArray# [eta_B1];

GHC.PrimopWrappers.getSizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getSizeofMutableByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readCharArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWideCharArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readIntArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readWordArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readAddrArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readFloatArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readDoubleArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readStablePtrArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] readInt8Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt16Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt32Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt64Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord8Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord16Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord32Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord64Array# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeCharArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWideCharArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWordArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeAddrArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeFloatArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeDoubleArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeStablePtrArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt8Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt16Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt32Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt64Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord8Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord16Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord32Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord64Array# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compareByteArrays# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        compareByteArrays# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyByteArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableByteArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyByteArrayToAddr# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableByteArrayToAddr# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyAddrToByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyAddrToByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.setByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        setByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.atomicReadIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        atomicReadIntArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.atomicWriteIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        atomicWriteIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        casIntArray# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchAddIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchAddIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchSubIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchSubIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchAndIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchAndIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchNandIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchNandIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchOrIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchOrIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.fetchXorIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        fetchXorIntArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.sameMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unsafeFreezeArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.sizeofArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArrayArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArrayArray# [eta_B1];

GHC.PrimopWrappers.indexByteArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ByteArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexByteArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexArrayArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ArrayArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArrayArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readByteArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readMutableByteArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readArrayArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readMutableArrayArrayArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeByteArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeMutableByteArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ArrayArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeArrayArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeMutableArrayArrayArray# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ArrayArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyArrayArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        copyMutableArrayArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.plusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.remAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.addr2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addr2Int# [eta_B1];

GHC.PrimopWrappers.int2Addr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Addr# [eta_B1];

GHC.PrimopWrappers.gtAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.geAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.neAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.leAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readCharOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWideCharOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readIntOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWordOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readAddrOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readFloatOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readDoubleOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readStablePtrOffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt8OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt16OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt32OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readInt64OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord8OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord16OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord32OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        readWord64OffAddr# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeCharOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWideCharOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeIntOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWordOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeAddrOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeFloatOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeDoubleOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeStablePtrOffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt8OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt16OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt32OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeInt64OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord8OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord16OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord32OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.writeWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        writeWord64OffAddr# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.newMutVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.readMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.writeMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] writeMutVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> GHC.Prim.MutVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.atomicModifyMutVar# [InlPrag=NOINLINE]
  :: forall s a b c.
     GHC.Prim.MutVar# s a
     -> (a -> b) -> GHC.Prim.State# s -> (# GHC.Prim.State# s, c #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        atomicModifyMutVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.casMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        casMutVar# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.catch# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catch# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.raise# [InlPrag=NOINLINE] :: forall b o. b -> o
[GblId, Arity=1, Caf=NoCafRefs, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [a1_szpo] raise# [a1_szpo];

GHC.PrimopWrappers.raiseIO# [InlPrag=NOINLINE]
  :: forall a b.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] raiseIO# [eta_B2 eta_B1];

GHC.PrimopWrappers.maskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] maskAsyncExceptions# [eta_B2 eta_B1];

GHC.PrimopWrappers.maskUninterruptible# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] maskUninterruptible# [eta_B2 eta_B1];

GHC.PrimopWrappers.unmaskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] unmaskAsyncExceptions# [eta_B2 eta_B1];

GHC.PrimopWrappers.getMaskingState# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] getMaskingState# [eta_B1];

GHC.PrimopWrappers.atomically# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] atomically# [eta_B2 eta_B1];

GHC.PrimopWrappers.retry# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [eta_B1] retry# [eta_B1];

GHC.PrimopWrappers.catchRetry# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catchRetry# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.catchSTM# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] catchSTM# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.check# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] check# [eta_B2 eta_B1];

GHC.PrimopWrappers.newTVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.TVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] newTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.readTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.readTVarIO# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readTVarIO# [eta_B2 eta_B1];

GHC.PrimopWrappers.writeTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] writeTVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.sameTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> GHC.Prim.TVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.newMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.MVar# s a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] newMVar# [eta_B1];

GHC.PrimopWrappers.takeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] takeMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.tryTakeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] tryTakeMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.putMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] putMVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.tryPutMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] tryPutMVar# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.readMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] readMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.tryReadMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] tryReadMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.sameMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> GHC.Prim.MVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.isEmptyMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] isEmptyMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.delay# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] delay# [eta_B2 eta_B1];

GHC.PrimopWrappers.waitRead# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] waitRead# [eta_B2 eta_B1];

GHC.PrimopWrappers.waitWrite# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] waitWrite# [eta_B2 eta_B1];

GHC.PrimopWrappers.fork# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] fork# [eta_B2 eta_B1];

GHC.PrimopWrappers.forkOn# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] forkOn# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.killThread# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ThreadId#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] killThread# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.yield# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] yield# [eta_B1];

GHC.PrimopWrappers.myThreadId# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] myThreadId# [eta_B1];

GHC.PrimopWrappers.labelThread# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] labelThread# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.isCurrentThreadBound# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isCurrentThreadBound# [eta_B1];

GHC.PrimopWrappers.noDuplicate# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] noDuplicate# [eta_B1];

GHC.PrimopWrappers.threadStatus# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] threadStatus# [eta_B2 eta_B1];

GHC.PrimopWrappers.mkWeak# [InlPrag=NOINLINE]
  :: forall o b c.
     o
     -> b
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 eta_B1]
        mkWeak# [eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.mkWeakNoFinalizer# [InlPrag=NOINLINE]
  :: forall o b.
     o
     -> b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        mkWeakNoFinalizer# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.addCFinalizerToWeak# [InlPrag=NOINLINE]
  :: forall b.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Weak# b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        addCFinalizerToWeak# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.deRefWeak# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] deRefWeak# [eta_B2 eta_B1];

GHC.PrimopWrappers.finalizeWeak# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #) #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] finalizeWeak# [eta_B2 eta_B1];

GHC.PrimopWrappers.touch# [InlPrag=NOINLINE]
  :: forall o.
     o
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] touch# [eta_B2 eta_B1];

GHC.PrimopWrappers.makeStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StablePtr# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] makeStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.deRefStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] deRefStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a -> GHC.Prim.StablePtr# a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.makeStableName# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StableName# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] makeStableName# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqStableName# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.StableName# a -> GHC.Prim.StableName# b -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStableName# [eta_B2 eta_B1];

GHC.PrimopWrappers.stableNameToInt# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.StableName# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] stableNameToInt# [eta_B1];

GHC.PrimopWrappers.compactNew# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactNew# [eta_B2 eta_B1];

GHC.PrimopWrappers.compactResize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] compactResize# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactContains# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactContains# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactContainsAny# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactContainsAny# [eta_B2 eta_B1];

GHC.PrimopWrappers.compactGetFirstBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactGetFirstBlock# [eta_B2 eta_B1];

GHC.PrimopWrappers.compactGetNextBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactGetNextBlock# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactAllocateBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactAllocateBlock# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactFixupPointers# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact#,
           GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactFixupPointers# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactAdd# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] compactAdd# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactAddWithSharing# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        compactAddWithSharing# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.compactSize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] compactSize# [eta_B2 eta_B1];

GHC.PrimopWrappers.reallyUnsafePtrEquality# [InlPrag=NOINLINE]
  :: forall a. a -> a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] reallyUnsafePtrEquality# [eta_B2 eta_B1];

GHC.PrimopWrappers.par# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] par# [eta_B1];

GHC.PrimopWrappers.spark# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] spark# [eta_B2 eta_B1];

GHC.PrimopWrappers.seq# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] seq# [eta_B2 eta_B1];

GHC.PrimopWrappers.getSpark# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] getSpark# [eta_B1];

GHC.PrimopWrappers.numSparks# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] numSparks# [eta_B1];

GHC.PrimopWrappers.dataToTag# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        case eta_B1 of sat_szpp { __DEFAULT -> dataToTag# [sat_szpp]; };

GHC.PrimopWrappers.addrToAny# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Addr# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addrToAny# [eta_B1];

GHC.PrimopWrappers.anyToAddr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] anyToAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.mkApUpd0# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.BCO# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] mkApUpd0# [eta_B1];

GHC.PrimopWrappers.newBCO# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.BCO# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        newBCO# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.unpackClosure# [InlPrag=NOINLINE]
  :: forall a b.
     a -> (# GHC.Prim.Addr#, GHC.Prim.Array# b, GHC.Prim.ByteArray# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] unpackClosure# [eta_B1];

GHC.PrimopWrappers.getApStackVal# [InlPrag=NOINLINE]
  :: forall a b. a -> GHC.Prim.Int# -> (# GHC.Prim.Int#, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getApStackVal# [eta_B2 eta_B1];

GHC.PrimopWrappers.getCCSOf# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getCCSOf# [eta_B2 eta_B1];

GHC.PrimopWrappers.getCurrentCCS# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getCurrentCCS# [eta_B2 eta_B1];

GHC.PrimopWrappers.clearCCS# [InlPrag=NOINLINE]
  :: forall s a.
     (GHC.Prim.State# s -> (# GHC.Prim.State# s, a #))
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] clearCCS# [eta_B2 eta_B1];

GHC.PrimopWrappers.traceEvent# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] traceEvent# [eta_B2 eta_B1];

GHC.PrimopWrappers.traceMarker# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] traceMarker# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray3# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray3# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr3# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue3# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue3# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue2# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue2# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray1# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray1# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr1# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue1# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue1# [eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchByteArray0# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchMutableByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        prefetchMutableByteArray0# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchAddr0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] prefetchAddr0# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.prefetchValue0# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] prefetchValue0# [eta_B2 eta_B1];

GHC.PrimopWrappers.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.PrimopWrappers.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule4];

GHC.PrimopWrappers.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.PrimopWrappers"#;

GHC.PrimopWrappers.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule2];

GHC.PrimopWrappers.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.PrimopWrappers.$trModule3
                                     GHC.PrimopWrappers.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:50:20.52913316 UTC

GHC.PrimopWrappers.gtChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.geChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.neChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.leChar# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leChar# [eta_B2 eta_B1];

GHC.PrimopWrappers.ord# [InlPrag=NOINLINE]
  :: GHC.Prim.Char# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ord# [eta_B1];

GHC.PrimopWrappers.+# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +# [eta_B2 eta_B1];

GHC.PrimopWrappers.-# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -# [eta_B2 eta_B1];

GHC.PrimopWrappers.*# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *# [eta_B2 eta_B1];

GHC.PrimopWrappers.mulIntMayOflo# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] mulIntMayOflo# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.remInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemInt# [eta_B2 eta_B1];

GHC.PrimopWrappers.andI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] andI# [eta_B2 eta_B1];

GHC.PrimopWrappers.orI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] orI# [eta_B2 eta_B1];

GHC.PrimopWrappers.xorI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xorI# [eta_B2 eta_B1];

GHC.PrimopWrappers.notI# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] notI# [eta_B1];

GHC.PrimopWrappers.negateInt# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateInt# [eta_B1];

GHC.PrimopWrappers.addIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] addIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.subIntC# [InlPrag=NOINLINE]
  :: GHC.Prim.Int#
     -> GHC.Prim.Int# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subIntC# [eta_B2 eta_B1];

GHC.PrimopWrappers.># [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ># [eta_B2 eta_B1];

GHC.PrimopWrappers.>=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=# [eta_B2 eta_B1];

GHC.PrimopWrappers.==# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==# [eta_B2 eta_B1];

GHC.PrimopWrappers./=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=# [eta_B2 eta_B1];

GHC.PrimopWrappers.<# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <# [eta_B2 eta_B1];

GHC.PrimopWrappers.<=# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=# [eta_B2 eta_B1];

GHC.PrimopWrappers.chr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] chr# [eta_B1];

GHC.PrimopWrappers.int2Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Word# [eta_B1];

GHC.PrimopWrappers.int2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Float# [eta_B1];

GHC.PrimopWrappers.int2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Double# [eta_B1];

GHC.PrimopWrappers.word2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Float# [eta_B1];

GHC.PrimopWrappers.word2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Double# [eta_B1];

GHC.PrimopWrappers.uncheckedIShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRA# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRA# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedIShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedIShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.subWordC# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] subWordC# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesWord2# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.remWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word# -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] quotRemWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.quotRemWord2# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> GHC.Prim.Word#
     -> (# GHC.Prim.Word#, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] quotRemWord2# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.and# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] and# [eta_B2 eta_B1];

GHC.PrimopWrappers.or# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] or# [eta_B2 eta_B1];

GHC.PrimopWrappers.xor# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] xor# [eta_B2 eta_B1];

GHC.PrimopWrappers.not# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] not# [eta_B1];

GHC.PrimopWrappers.uncheckedShiftL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftL# [eta_B2 eta_B1];

GHC.PrimopWrappers.uncheckedShiftRL# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] uncheckedShiftRL# [eta_B2 eta_B1];

GHC.PrimopWrappers.word2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] word2Int# [eta_B1];

GHC.PrimopWrappers.gtWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.geWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.neWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.leWord# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leWord# [eta_B2 eta_B1];

GHC.PrimopWrappers.popCnt8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt8# [eta_B1];

GHC.PrimopWrappers.popCnt16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt16# [eta_B1];

GHC.PrimopWrappers.popCnt32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt32# [eta_B1];

GHC.PrimopWrappers.popCnt64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt64# [eta_B1];

GHC.PrimopWrappers.popCnt# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] popCnt# [eta_B1];

GHC.PrimopWrappers.pdep8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pdep# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pdep# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext8# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext16# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext32# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext64# [eta_B2 eta_B1];

GHC.PrimopWrappers.pext# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] pext# [eta_B2 eta_B1];

GHC.PrimopWrappers.clz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz8# [eta_B1];

GHC.PrimopWrappers.clz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz16# [eta_B1];

GHC.PrimopWrappers.clz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz32# [eta_B1];

GHC.PrimopWrappers.clz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz64# [eta_B1];

GHC.PrimopWrappers.clz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] clz# [eta_B1];

GHC.PrimopWrappers.ctz8# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz8# [eta_B1];

GHC.PrimopWrappers.ctz16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz16# [eta_B1];

GHC.PrimopWrappers.ctz32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz32# [eta_B1];

GHC.PrimopWrappers.ctz64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz64# [eta_B1];

GHC.PrimopWrappers.ctz# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] ctz# [eta_B1];

GHC.PrimopWrappers.byteSwap16# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap16# [eta_B1];

GHC.PrimopWrappers.byteSwap32# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap32# [eta_B1];

GHC.PrimopWrappers.byteSwap64# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap64# [eta_B1];

GHC.PrimopWrappers.byteSwap# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteSwap# [eta_B1];

GHC.PrimopWrappers.narrow8Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Int# [eta_B1];

GHC.PrimopWrappers.narrow16Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Int# [eta_B1];

GHC.PrimopWrappers.narrow32Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Int# [eta_B1];

GHC.PrimopWrappers.narrow8Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow8Word# [eta_B1];

GHC.PrimopWrappers.narrow16Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow16Word# [eta_B1];

GHC.PrimopWrappers.narrow32Word# [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] narrow32Word# [eta_B1];

GHC.PrimopWrappers.>## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >## [eta_B2 eta_B1];

GHC.PrimopWrappers.>=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] >=## [eta_B2 eta_B1];

GHC.PrimopWrappers.==## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ==## [eta_B2 eta_B1];

GHC.PrimopWrappers./=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /=## [eta_B2 eta_B1];

GHC.PrimopWrappers.<## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <## [eta_B2 eta_B1];

GHC.PrimopWrappers.<=## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] <=## [eta_B2 eta_B1];

GHC.PrimopWrappers.+## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] +## [eta_B2 eta_B1];

GHC.PrimopWrappers.-## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] -## [eta_B2 eta_B1];

GHC.PrimopWrappers.*## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] *## [eta_B2 eta_B1];

GHC.PrimopWrappers./## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] /## [eta_B2 eta_B1];

GHC.PrimopWrappers.negateDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateDouble# [eta_B1];

GHC.PrimopWrappers.fabsDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsDouble# [eta_B1];

GHC.PrimopWrappers.double2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Int# [eta_B1];

GHC.PrimopWrappers.double2Float# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] double2Float# [eta_B1];

GHC.PrimopWrappers.expDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expDouble# [eta_B1];

GHC.PrimopWrappers.logDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logDouble# [eta_B1];

GHC.PrimopWrappers.sqrtDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtDouble# [eta_B1];

GHC.PrimopWrappers.sinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinDouble# [eta_B1];

GHC.PrimopWrappers.cosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosDouble# [eta_B1];

GHC.PrimopWrappers.tanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanDouble# [eta_B1];

GHC.PrimopWrappers.asinDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinDouble# [eta_B1];

GHC.PrimopWrappers.acosDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosDouble# [eta_B1];

GHC.PrimopWrappers.atanDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanDouble# [eta_B1];

GHC.PrimopWrappers.sinhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhDouble# [eta_B1];

GHC.PrimopWrappers.coshDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshDouble# [eta_B1];

GHC.PrimopWrappers.tanhDouble# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhDouble# [eta_B1];

GHC.PrimopWrappers.**## [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] **## [eta_B2 eta_B1];

GHC.PrimopWrappers.decodeDouble_2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Prim.Int#, GHC.Prim.Word#, GHC.Prim.Word#,
           GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_2Int# [eta_B1];

GHC.PrimopWrappers.decodeDouble_Int64# [InlPrag=NOINLINE]
  :: GHC.Prim.Double# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeDouble_Int64# [eta_B1];

GHC.PrimopWrappers.gtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.geFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.neFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.leFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.plusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.timesFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] timesFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.divideFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] divideFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.negateFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] negateFloat# [eta_B1];

GHC.PrimopWrappers.fabsFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] fabsFloat# [eta_B1];

GHC.PrimopWrappers.float2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Int# [eta_B1];

GHC.PrimopWrappers.expFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] expFloat# [eta_B1];

GHC.PrimopWrappers.logFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] logFloat# [eta_B1];

GHC.PrimopWrappers.sqrtFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sqrtFloat# [eta_B1];

GHC.PrimopWrappers.sinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinFloat# [eta_B1];

GHC.PrimopWrappers.cosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] cosFloat# [eta_B1];

GHC.PrimopWrappers.tanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanFloat# [eta_B1];

GHC.PrimopWrappers.asinFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] asinFloat# [eta_B1];

GHC.PrimopWrappers.acosFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] acosFloat# [eta_B1];

GHC.PrimopWrappers.atanFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] atanFloat# [eta_B1];

GHC.PrimopWrappers.sinhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sinhFloat# [eta_B1];

GHC.PrimopWrappers.coshFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] coshFloat# [eta_B1];

GHC.PrimopWrappers.tanhFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] tanhFloat# [eta_B1];

GHC.PrimopWrappers.powerFloat# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Float# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] powerFloat# [eta_B2 eta_B1];

GHC.PrimopWrappers.float2Double# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] float2Double# [eta_B1];

GHC.PrimopWrappers.decodeFloat_Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] decodeFloat_Int# [eta_B1];

GHC.PrimopWrappers.newArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        newArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.MutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArray# [eta_B1];

GHC.PrimopWrappers.indexArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Array# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] unsafeFreezeArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unsafeThawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] unsafeThawArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableArray# [eta_B6
                           eta_B5
                           eta_B4
                           eta_B3
                           eta_B2
                           GHC.Prim.void#];

GHC.PrimopWrappers.cloneArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Array# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.Array# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1] cloneArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        cloneMutableArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.freezeArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Array# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        freezeArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.thawArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        thawArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        casArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        newSmallArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameSmallMutableArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readSmallArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int# -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeSmallArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallArray# [eta_B1];

GHC.PrimopWrappers.sizeofSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a. GHC.Prim.SmallMutableArray# s a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofSmallMutableArray# [eta_B1];

GHC.PrimopWrappers.indexSmallArray# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.SmallArray# a -> GHC.Prim.Int# -> (# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexSmallArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeFreezeSmallArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unsafeThawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeThawSmallArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copySmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copySmallArray# [eta_B6
                         eta_B5
                         eta_B4
                         eta_B3
                         eta_B2
                         GHC.Prim.void#];

GHC.PrimopWrappers.copySmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copySmallMutableArray# [eta_B6
                                eta_B5
                                eta_B4
                                eta_B3
                                eta_B2
                                GHC.Prim.void#];

GHC.PrimopWrappers.cloneSmallArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Prim.SmallArray# a
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 eta_B1]
        cloneSmallArray# [eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.cloneSmallMutableArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        cloneSmallMutableArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.freezeSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallArray# a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        freezeSmallArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.thawSmallArray# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.SmallArray# a
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.SmallMutableArray# s a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        thawSmallArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casSmallArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.SmallMutableArray# s a
     -> GHC.Prim.Int#
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        casSmallArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newPinnedByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newAlignedPinnedByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        newAlignedPinnedByteArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.isMutableByteArrayPinned# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isMutableByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.isByteArrayPinned# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] isByteArrayPinned# [eta_B1];

GHC.PrimopWrappers.byteArrayContents# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] byteArrayContents# [eta_B1];

GHC.PrimopWrappers.sameMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableByteArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.shrinkMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        shrinkMutableByteArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.resizeMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        resizeMutableByteArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unsafeFreezeByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeFreezeByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofByteArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofByteArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableByteArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableByteArray# [eta_B1];

GHC.PrimopWrappers.getSizeofMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        getSizeofMutableByteArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.indexCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrArray# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64Array# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64Array# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readCharArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWideCharArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readIntArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWordArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readAddrArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readFloatArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readDoubleArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readStablePtrArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt8Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt16Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt32Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt64Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord8Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord16Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord32Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord64Array# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeCharArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWideCharArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWideCharArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWordArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWordArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeAddrArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeAddrArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeFloatArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeFloatArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeDoubleArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeDoubleArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeStablePtrArray# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeStablePtrArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt8Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt16Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt32Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt64Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord8Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord8Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord16Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord16Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord32Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord32Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord64Array# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord64Array# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compareByteArrays# [InlPrag=NOINLINE]
  :: GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1]
        compareByteArrays# [eta_B5 eta_B4 eta_B3 eta_B2 eta_B1];

GHC.PrimopWrappers.copyByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyByteArray# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableByteArray# [eta_B6
                               eta_B5
                               eta_B4
                               eta_B3
                               eta_B2
                               GHC.Prim.void#];

GHC.PrimopWrappers.copyByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyByteArrayToAddr# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableByteArrayToAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableByteArrayToAddr# [eta_B5
                                     eta_B4
                                     eta_B3
                                     eta_B2
                                     GHC.Prim.void#];

GHC.PrimopWrappers.copyAddrToByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyAddrToByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.setByteArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        setByteArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.atomicReadIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        atomicReadIntArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.atomicWriteIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        atomicWriteIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=5,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        casIntArray# [eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchAddIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchAddIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchSubIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchSubIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchAndIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchAndIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchNandIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchNandIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchOrIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchOrIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fetchXorIntArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        fetchXorIntArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newArrayArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutableArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.unsafeFreezeArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unsafeFreezeArrayArray# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sizeofArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofArrayArray# [eta_B1];

GHC.PrimopWrappers.sizeofMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.MutableArrayArray# s -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] sizeofMutableArrayArray# [eta_B1];

GHC.PrimopWrappers.indexByteArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ByteArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexByteArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexArrayArrayArray# [InlPrag=NOINLINE]
  :: GHC.Prim.ArrayArray# -> GHC.Prim.Int# -> GHC.Prim.ArrayArray#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexArrayArrayArray# [eta_B2 eta_B1];

GHC.PrimopWrappers.readByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ByteArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readByteArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableByteArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readMutableByteArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.ArrayArray# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readArrayArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutableArrayArray# s #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readMutableArrayArrayArray# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeByteArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeMutableByteArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableByteArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeMutableByteArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.ArrayArray#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeArrayArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeMutableArrayArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeMutableArrayArrayArray# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.copyArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ArrayArray#
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyArrayArray# [eta_B6
                         eta_B5
                         eta_B4
                         eta_B3
                         eta_B2
                         GHC.Prim.void#];

GHC.PrimopWrappers.copyMutableArrayArray# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.MutableArrayArray# s
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        copyMutableArrayArray# [eta_B6
                                eta_B5
                                eta_B4
                                eta_B3
                                eta_B2
                                GHC.Prim.void#];

GHC.PrimopWrappers.plusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] plusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.minusAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] minusAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.remAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] remAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.addr2Int# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addr2Int# [eta_B1];

GHC.PrimopWrappers.int2Addr# [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] int2Addr# [eta_B1];

GHC.PrimopWrappers.gtAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] gtAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.geAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] geAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.eqAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.neAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] neAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.ltAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] ltAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.leAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Addr# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] leAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWideCharOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Char#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWideCharOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexIntOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexIntOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWordOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWordOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexAddrOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Addr#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexAddrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexFloatOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexFloatOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexDoubleOffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexDoubleOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.StablePtr# a
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexStablePtrOffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexInt64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexInt64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord8OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord8OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord16OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord16OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord32OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord32OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.indexWord64OffAddr# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr# -> GHC.Prim.Int# -> GHC.Prim.Word#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] indexWord64OffAddr# [eta_B2 eta_B1];

GHC.PrimopWrappers.readCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readCharOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Char# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWideCharOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readIntOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWordOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readAddrOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Float# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readFloatOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Double# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readDoubleOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.StablePtr# a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readStablePtrOffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt8OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt16OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt32OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readInt64OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord8OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord16OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord32OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        readWord64OffAddr# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeCharOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWideCharOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Char#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWideCharOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeIntOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeIntOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWordOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWordOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeAddrOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeAddrOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeFloatOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Float#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeFloatOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeDoubleOffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Double#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeDoubleOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeStablePtrOffAddr# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.StablePtr# a
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeStablePtrOffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt8OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt16OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt32OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeInt64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Int#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeInt64OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord8OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord8OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord16OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord16OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord32OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord32OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeWord64OffAddr# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# s
     -> GHC.Prim.State# s
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        writeWord64OffAddr# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newMutVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.MutVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newMutVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readMutVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        writeMutVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a -> GHC.Prim.MutVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMutVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.atomicModifyMutVar# [InlPrag=NOINLINE]
  :: forall s a b c.
     GHC.Prim.MutVar# s a
     -> (a -> b) -> GHC.Prim.State# s -> (# GHC.Prim.State# s, c #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        atomicModifyMutVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.casMutVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MutVar# s a
     -> a
     -> a
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        casMutVar# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.catch# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catch# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.raise# [InlPrag=NOINLINE] :: forall b o. b -> o
[GblId, Arity=1, Caf=NoCafRefs, Str=<B,U>x, Unf=OtherCon []] =
    [] \r [a1_szpo] raise# [a1_szpo];

GHC.PrimopWrappers.raiseIO# [InlPrag=NOINLINE]
  :: forall a b.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>x, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] raiseIO# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.maskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        maskAsyncExceptions# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.maskUninterruptible# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        maskUninterruptible# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unmaskAsyncExceptions# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        unmaskAsyncExceptions# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.getMaskingState# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] getMaskingState# [GHC.Prim.void#];

GHC.PrimopWrappers.atomically# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<C(S),C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] atomically# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.retry# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>x, Unf=OtherCon []] =
    [] \r [void_0E] retry# [GHC.Prim.void#];

GHC.PrimopWrappers.catchRetry# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<xC(S),1*C1(U)><L,1*C1(U)><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchRetry# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.catchSTM# [InlPrag=NOINLINE]
  :: forall a b.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> (b
         -> GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,1*C1(U)><L,1*C1(C1(U))><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        catchSTM# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.check# [InlPrag=NOINLINE]
  :: forall a.
     (GHC.Prim.State# GHC.Prim.RealWorld
      -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] check# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.newTVar# [InlPrag=NOINLINE]
  :: forall a s.
     a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.TVar# s a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] newTVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readTVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readTVarIO# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readTVarIO# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.writeTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        writeTVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameTVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.TVar# s a -> GHC.Prim.TVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameTVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.newMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.MVar# s a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] newMVar# [GHC.Prim.void#];

GHC.PrimopWrappers.takeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] takeMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.tryTakeMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] tryTakeMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.putMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        putMVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.tryPutMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        tryPutMVar# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.readMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] readMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.tryReadMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] tryReadMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.sameMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a -> GHC.Prim.MVar# s a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] sameMVar# [eta_B2 eta_B1];

GHC.PrimopWrappers.isEmptyMVar# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.MVar# s a
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] isEmptyMVar# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.delay# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] delay# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.waitRead# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] waitRead# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.waitWrite# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] waitWrite# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.fork# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] fork# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.forkOn# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Int#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        forkOn# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.killThread# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.ThreadId#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        killThread# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.yield# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] yield# [GHC.Prim.void#];

GHC.PrimopWrappers.myThreadId# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.ThreadId# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] myThreadId# [GHC.Prim.void#];

GHC.PrimopWrappers.labelThread# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        labelThread# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.isCurrentThreadBound# [InlPrag=NOINLINE]
  :: GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] isCurrentThreadBound# [GHC.Prim.void#];

GHC.PrimopWrappers.noDuplicate# [InlPrag=NOINLINE]
  :: forall s. GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] noDuplicate# [GHC.Prim.void#];

GHC.PrimopWrappers.threadStatus# [InlPrag=NOINLINE]
  :: GHC.Prim.ThreadId#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.Int#, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] threadStatus# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.mkWeak# [InlPrag=NOINLINE]
  :: forall o b c.
     o
     -> b
     -> (GHC.Prim.State# GHC.Prim.RealWorld
         -> (# GHC.Prim.State# GHC.Prim.RealWorld, c #))
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=4,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B4 eta_B3 eta_B2 void_0E]
        mkWeak# [eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.mkWeakNoFinalizer# [InlPrag=NOINLINE]
  :: forall o b.
     o
     -> b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Weak# b #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        mkWeakNoFinalizer# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.addCFinalizerToWeak# [InlPrag=NOINLINE]
  :: forall b.
     GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Int#
     -> GHC.Prim.Addr#
     -> GHC.Prim.Weak# b
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        addCFinalizerToWeak# [eta_B6
                              eta_B5
                              eta_B4
                              eta_B3
                              eta_B2
                              GHC.Prim.void#];

GHC.PrimopWrappers.deRefWeak# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] deRefWeak# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.finalizeWeak# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.Weak# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int#,
           GHC.Prim.State# GHC.Prim.RealWorld
           -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #) #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] finalizeWeak# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.touch# [InlPrag=NOINLINE]
  :: forall o.
     o
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] touch# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.makeStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StablePtr# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] makeStablePtr# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.deRefStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] deRefStablePtr# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.eqStablePtr# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.StablePtr# a -> GHC.Prim.StablePtr# a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStablePtr# [eta_B2 eta_B1];

GHC.PrimopWrappers.makeStableName# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.StableName# a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] makeStableName# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.eqStableName# [InlPrag=NOINLINE]
  :: forall a b.
     GHC.Prim.StableName# a -> GHC.Prim.StableName# b -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] eqStableName# [eta_B2 eta_B1];

GHC.PrimopWrappers.stableNameToInt# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.StableName# a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] stableNameToInt# [eta_B1];

GHC.PrimopWrappers.compactNew# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] compactNew# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactResize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Word#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> GHC.Prim.State# GHC.Prim.RealWorld
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactResize# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactContains# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactContains# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactContainsAny# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Int# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] compactContainsAny# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactGetFirstBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E]
        compactGetFirstBlock# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactGetNextBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr#,
           GHC.Prim.Word# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactGetNextBlock# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactAllocateBlock# [InlPrag=NOINLINE]
  :: GHC.Prim.Word#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactAllocateBlock# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactFixupPointers# [InlPrag=NOINLINE]
  :: GHC.Prim.Addr#
     -> GHC.Prim.Addr#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Compact#,
           GHC.Prim.Addr# #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactFixupPointers# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactAdd# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactAdd# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactAddWithSharing# [InlPrag=NOINLINE]
  :: forall a.
     GHC.Prim.Compact#
     -> a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        compactAddWithSharing# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.compactSize# [InlPrag=NOINLINE]
  :: GHC.Prim.Compact#
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Word# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] compactSize# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.reallyUnsafePtrEquality# [InlPrag=NOINLINE]
  :: forall a. a -> a -> GHC.Prim.Int#
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] reallyUnsafePtrEquality# [eta_B2 eta_B1];

GHC.PrimopWrappers.par# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] par# [eta_B1];

GHC.PrimopWrappers.spark# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] spark# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.seq# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] seq# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.getSpark# [InlPrag=NOINLINE]
  :: forall s a.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int#, a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] getSpark# [GHC.Prim.void#];

GHC.PrimopWrappers.numSparks# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [void_0E] numSparks# [GHC.Prim.void#];

GHC.PrimopWrappers.dataToTag# [InlPrag=NOINLINE]
  :: forall a. a -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        case eta_B1 of sat_szpp { __DEFAULT -> dataToTag# [sat_szpp]; };

GHC.PrimopWrappers.addrToAny# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.Addr# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] addrToAny# [eta_B1];

GHC.PrimopWrappers.anyToAddr# [InlPrag=NOINLINE]
  :: forall a.
     a
     -> GHC.Prim.State# GHC.Prim.RealWorld
     -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] anyToAddr# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.mkApUpd0# [InlPrag=NOINLINE]
  :: forall a. GHC.Prim.BCO# -> (# a #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] mkApUpd0# [eta_B1];

GHC.PrimopWrappers.newBCO# [InlPrag=NOINLINE]
  :: forall a s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.Array# a
     -> GHC.Prim.Int#
     -> GHC.Prim.ByteArray#
     -> GHC.Prim.State# s
     -> (# GHC.Prim.State# s, GHC.Prim.BCO# #)
[GblId,
 Arity=6,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U><L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 void_0E]
        newBCO# [eta_B6 eta_B5 eta_B4 eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.unpackClosure# [InlPrag=NOINLINE]
  :: forall a b.
     a -> (# GHC.Prim.Addr#, GHC.Prim.Array# b, GHC.Prim.ByteArray# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<L,U>, Unf=OtherCon []] =
    [] \r [eta_B1] unpackClosure# [eta_B1];

GHC.PrimopWrappers.getApStackVal# [InlPrag=NOINLINE]
  :: forall a b. a -> GHC.Prim.Int# -> (# GHC.Prim.Int#, b #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] getApStackVal# [eta_B2 eta_B1];

GHC.PrimopWrappers.getCCSOf# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] getCCSOf# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.getCurrentCCS# [InlPrag=NOINLINE]
  :: forall a s.
     a -> GHC.Prim.State# s -> (# GHC.Prim.State# s, GHC.Prim.Addr# #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] getCurrentCCS# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.clearCCS# [InlPrag=NOINLINE]
  :: forall s a.
     (GHC.Prim.State# s -> (# GHC.Prim.State# s, a #))
     -> GHC.Prim.State# s -> (# GHC.Prim.State# s, a #)
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] clearCCS# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.traceEvent# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] traceEvent# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.traceMarker# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<L,U><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] traceMarker# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray3# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray3# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr3# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr3# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue3# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue3# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray2# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray2# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr2# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr2# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue2# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue2# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray1# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray1# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr1# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr1# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue1# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue1# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.ByteArray#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchByteArray0# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchMutableByteArray0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.MutableByteArray# s
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchMutableByteArray0# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchAddr0# [InlPrag=NOINLINE]
  :: forall s.
     GHC.Prim.Addr#
     -> GHC.Prim.Int# -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><L,U><L,U>,
 Unf=OtherCon []] =
    [] \r [eta_B3 eta_B2 void_0E]
        prefetchAddr0# [eta_B3 eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.prefetchValue0# [InlPrag=NOINLINE]
  :: forall a s. a -> GHC.Prim.State# s -> GHC.Prim.State# s
[GblId, Arity=2, Caf=NoCafRefs, Str=<B,A><L,U>, Unf=OtherCon []] =
    [] \r [eta_B2 void_0E] prefetchValue0# [eta_B2 GHC.Prim.void#];

GHC.PrimopWrappers.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.PrimopWrappers.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule4];

GHC.PrimopWrappers.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.PrimopWrappers"#;

GHC.PrimopWrappers.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.PrimopWrappers.$trModule2];

GHC.PrimopWrappers.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.PrimopWrappers.$trModule3
                                     GHC.PrimopWrappers.$trModule1];

