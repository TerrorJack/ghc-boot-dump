
==================== Pre unarise: ====================
2018-03-16 15:50:22.679797809 UTC

GHC.Magic.inline [InlPrag=NOINLINE[0]] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBir] x_sBir;

GHC.Magic.noinline [InlPrag=NOINLINE] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBis] x_sBis;

GHC.Magic.lazy :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBit] x_sBit;

GHC.Magic.oneShot
  :: forall (a :: TYPE q) (b :: TYPE r). (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [f_sBiu] f_sBiu;

GHC.Magic.runRW# [InlPrag=NOINLINE]
  :: forall (o :: TYPE r).
     (GHC.Prim.State# GHC.Prim.RealWorld -> o) -> o
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [m_sBiv] m_sBiv GHC.Prim.realWorld#;

GHC.Magic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.Magic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule4];

GHC.Magic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Magic"#;

GHC.Magic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule2];

GHC.Magic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Magic.$trModule3
                                     GHC.Magic.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:50:22.68101767 UTC

GHC.Magic.inline [InlPrag=NOINLINE[0]] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBir] x_sBir;

GHC.Magic.noinline [InlPrag=NOINLINE] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBis] x_sBis;

GHC.Magic.lazy :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBit] x_sBit;

GHC.Magic.oneShot
  :: forall (a :: TYPE q) (b :: TYPE r). (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [f_sBiu] f_sBiu;

GHC.Magic.runRW# [InlPrag=NOINLINE]
  :: forall (o :: TYPE r).
     (GHC.Prim.State# GHC.Prim.RealWorld -> o) -> o
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [m_sBiv] m_sBiv GHC.Prim.realWorld#;

GHC.Magic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.Magic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule4];

GHC.Magic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Magic"#;

GHC.Magic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule2];

GHC.Magic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Magic.$trModule3
                                     GHC.Magic.$trModule1];


==================== Pre unarise: ====================
2018-03-16 15:50:22.758406289 UTC

GHC.Magic.inline [InlPrag=NOINLINE[0]] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBkE] x_sBkE;

GHC.Magic.noinline [InlPrag=NOINLINE] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBkF] x_sBkF;

GHC.Magic.lazy :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBkG] x_sBkG;

GHC.Magic.oneShot
  :: forall (a :: TYPE q) (b :: TYPE r). (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [f_sBkH] f_sBkH;

GHC.Magic.runRW# [InlPrag=NOINLINE]
  :: forall (o :: TYPE r).
     (GHC.Prim.State# GHC.Prim.RealWorld -> o) -> o
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [m_sBkI] m_sBkI GHC.Prim.realWorld#;

GHC.Magic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.Magic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule4];

GHC.Magic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Magic"#;

GHC.Magic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule2];

GHC.Magic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Magic.$trModule3
                                     GHC.Magic.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:50:22.760546903 UTC

GHC.Magic.inline [InlPrag=NOINLINE[0]] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBkE] x_sBkE;

GHC.Magic.noinline [InlPrag=NOINLINE] :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBkF] x_sBkF;

GHC.Magic.lazy :: forall a. a -> a
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_sBkG] x_sBkG;

GHC.Magic.oneShot
  :: forall (a :: TYPE q) (b :: TYPE r). (a -> b) -> a -> b
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [f_sBkH] f_sBkH;

GHC.Magic.runRW# [InlPrag=NOINLINE]
  :: forall (o :: TYPE r).
     (GHC.Prim.State# GHC.Prim.RealWorld -> o) -> o
[GblId,
 Arity=1,
 Caf=NoCafRefs,
 Str=<C(S),1*C1(U)>,
 Unf=OtherCon []] =
    [] \r [m_sBkI] m_sBkI GHC.Prim.realWorld#;

GHC.Magic.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "ghc-prim"#;

GHC.Magic.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule4];

GHC.Magic.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Magic"#;

GHC.Magic.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Magic.$trModule2];

GHC.Magic.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Magic.$trModule3
                                     GHC.Magic.$trModule1];

