
==================== Raw Cmm ====================
2018-03-16 15:50:22.399314949 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:50:22.401827871 UTC

[section ""data" . GHC.Debug.debugErrLn_len_closure" {
     GHC.Debug.debugErrLn_len_closure:
         const GHC.Debug.debugErrLn_len_info;
 },
 GHC.Debug.debugErrLn_len_entry() //  [R2, R3]
         { []
         }
     {offset
       cB9A: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cB9B; else goto uB9K;
       cB9B: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Debug.debugErrLn_len_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uB9K: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cB9q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn_len_info" {
     GHC.Debug.debugErrLn_len_info:
         const GHC.Debug.debugErrLn_len_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cB9q() //  []
         { []
         }
     {offset
       cB9q: // global
           I64[Sp - 8] = block_cB9t_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uB9M; else goto cB9u;
       uB9M: // global
           call _cB9t(R1) args: 0, res: 0, upd: 0;
       cB9u: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cB9t() //  [R1]
         { []
         }
     {offset
       cB9t: // global
           _sB59::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cB9x; else goto cB9y;
       cB9x: // global
           R1 = _sB59::I64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cB9y: // global
           I64[Sp + 8] = _sB59::I64 + 1;
           P64[Sp + 16] = P64[R1 + 14];
           Sp = Sp + 8;
           call _cB9q() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cB9t_info" {
     block_cB9t_info:
         const _cB9t;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.411892533 UTC

[section ""data" . GHC.Debug.debugErrLn_write_closure" {
     GHC.Debug.debugErrLn_write_closure:
         const GHC.Debug.debugErrLn_write_info;
 },
 GHC.Debug.debugErrLn_write_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cBag: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cBah; else goto uBaw;
       cBah: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Debug.debugErrLn_write_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       uBaw: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cBa6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn_write_info" {
     GHC.Debug.debugErrLn_write_info:
         const GHC.Debug.debugErrLn_write_entry;
         const 0;
         const 14;
         const 17179869205;
 },
 _cBa6() //  []
         { []
         }
     {offset
       cBa6: // global
           I64[Sp - 8] = block_cBa9_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uBay; else goto cBaa;
       uBay: // global
           call _cBa9(R1) args: 0, res: 0, upd: 0;
       cBaa: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cBa9() //  [R1]
         { []
         }
     {offset
       cBa9: // global
           if (R1 & 7 == 1) goto cBad; else goto cBae;
       cBad: // global
           I8[P64[Sp + 8] + (I64[Sp + 16] + 16)] = 0 :: W8;
           Sp = Sp + 32;
           call (I64[P64[Sp]])() args: 8, res: 0, upd: 8;
       cBae: // global
           I64[Sp] = block_cBao_info;
           _sB5l::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _sB5l::P64;
           if (R1 & 7 != 0) goto uBaz; else goto cBaq;
       uBaz: // global
           call _cBao(R1) args: 0, res: 0, upd: 0;
       cBaq: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBa9_info" {
     block_cBa9_info:
         const _cBa9;
         const 387;
         const 30;
 },
 _cBao() //  [R1]
         { []
         }
     {offset
       cBao: // global
           _sB5f::P64 = P64[Sp + 8];
           _sB5g::I64 = I64[Sp + 16];
           _sB5l::P64 = P64[Sp + 24];
           I8[(_sB5f::P64 + 16) + _sB5g::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _sB5f::P64;
           I64[Sp + 16] = _sB5g::I64 + 1;
           P64[Sp + 24] = _sB5l::P64;
           Sp = Sp + 8;
           call _cBa6() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cBao_info" {
     block_cBao_info:
         const _cBao;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.420380529 UTC

[section ""cstring" . GHC.Debug.$trModule4_bytes" {
     GHC.Debug.$trModule4_bytes:
         I8[] [103,104,99,45,112,114,105,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.422184585 UTC

[section ""data" . GHC.Debug.$trModule3_closure" {
     GHC.Debug.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Debug.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.423877419 UTC

[section ""cstring" . GHC.Debug.$trModule2_bytes" {
     GHC.Debug.$trModule2_bytes:
         I8[] [71,72,67,46,68,101,98,117,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.425634256 UTC

[section ""data" . GHC.Debug.$trModule1_closure" {
     GHC.Debug.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Debug.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.42731885 UTC

[section ""data" . GHC.Debug.$trModule_closure" {
     GHC.Debug.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Debug.$trModule3_closure+1;
         const GHC.Debug.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.430248303 UTC

[section ""data" . GHC.Debug.debugLn1_closure" {
     GHC.Debug.debugLn1_closure:
         const GHC.Debug.debugLn1_info;
 },
 GHC.Debug.debugLn1_entry() //  [R2]
         { []
         }
     {offset
       cBbb: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cBbc; else goto cBbd;
       cBbc: // global
           R2 = R2;
           R1 = GHC.Debug.debugLn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cBbd: // global
           I64[Sp - 16] = block_cBb9_info;
           R3 = R2;
           _sB5q::P64 = R2;
           R2 = 1;
           P64[Sp - 8] = _sB5q::P64;
           Sp = Sp - 16;
           call GHC.Debug.debugErrLn_len_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugLn1_info" {
     GHC.Debug.debugLn1_info:
         const GHC.Debug.debugLn1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cBb9() //  [R1]
         { []
         }
     {offset
       cBb9: // global
           I64[Sp] = block_cBbg_info;
           R1 = R1;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBb9_info" {
     block_cBb9_info:
         const _cBb9;
         const 1;
         const 30;
 },
 _cBbg() //  [R1]
         { []
         }
     {offset
       cBbg: // global
           I64[Sp] = block_cBbi_info;
           R4 = P64[Sp + 8];
           R3 = 0;
           R2 = R1;
           P64[Sp + 8] = R1;
           call GHC.Debug.debugErrLn_write_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBbg_info" {
     block_cBbg_info:
         const _cBbg;
         const 1;
         const 30;
 },
 _cBbi() //  []
         { []
         }
     {offset
       cBbi: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] debugLn(P64[Sp + 8] + 16);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cBbi_info" {
     block_cBbi_info:
         const _cBbi;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.438153934 UTC

[section ""data" . GHC.Debug.debugLn_closure" {
     GHC.Debug.debugLn_closure:
         const GHC.Debug.debugLn_info;
 },
 GHC.Debug.debugLn_entry() //  [R2]
         { []
         }
     {offset
       cBbJ: // global
           R2 = R2;
           call GHC.Debug.debugLn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugLn_info" {
     GHC.Debug.debugLn_info:
         const GHC.Debug.debugLn_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.442975147 UTC

[section ""data" . GHC.Debug.debugErrLn1_closure" {
     GHC.Debug.debugErrLn1_closure:
         const GHC.Debug.debugErrLn1_info;
 },
 GHC.Debug.debugErrLn1_entry() //  [R2]
         { []
         }
     {offset
       cBbW: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cBbX; else goto cBbY;
       cBbX: // global
           R2 = R2;
           R1 = GHC.Debug.debugErrLn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cBbY: // global
           I64[Sp - 16] = block_cBbU_info;
           R3 = R2;
           _sB5A::P64 = R2;
           R2 = 1;
           P64[Sp - 8] = _sB5A::P64;
           Sp = Sp - 16;
           call GHC.Debug.debugErrLn_len_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn1_info" {
     GHC.Debug.debugErrLn1_info:
         const GHC.Debug.debugErrLn1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cBbU() //  [R1]
         { []
         }
     {offset
       cBbU: // global
           I64[Sp] = block_cBc1_info;
           R1 = R1;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBbU_info" {
     block_cBbU_info:
         const _cBbU;
         const 1;
         const 30;
 },
 _cBc1() //  [R1]
         { []
         }
     {offset
       cBc1: // global
           I64[Sp] = block_cBc3_info;
           R4 = P64[Sp + 8];
           R3 = 0;
           R2 = R1;
           P64[Sp + 8] = R1;
           call GHC.Debug.debugErrLn_write_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBc1_info" {
     block_cBc1_info:
         const _cBc1;
         const 1;
         const 30;
 },
 _cBc3() //  []
         { []
         }
     {offset
       cBc3: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] debugErrLn(P64[Sp + 8] + 16);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cBc3_info" {
     block_cBc3_info:
         const _cBc3;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.4509932 UTC

[section ""data" . GHC.Debug.debugErrLn_closure" {
     GHC.Debug.debugErrLn_closure:
         const GHC.Debug.debugErrLn_info;
 },
 GHC.Debug.debugErrLn_entry() //  [R2]
         { []
         }
     {offset
       cBcu: // global
           R2 = R2;
           call GHC.Debug.debugErrLn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn_info" {
     GHC.Debug.debugErrLn_info:
         const GHC.Debug.debugErrLn_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.453936415 UTC

[section ""relreadonly" . SB7z_srt" { SB7z_srt:
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.571359382 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:50:22.574059782 UTC

[section ""data" . GHC.Debug.debugErrLn_len_closure" {
     GHC.Debug.debugErrLn_len_closure:
         const GHC.Debug.debugErrLn_len_info;
 },
 GHC.Debug.debugErrLn_len_entry() //  [R2, R3]
         { []
         }
     {offset
       cBdo: // global
           if ((Sp + -24) < SpLim) (likely: False) goto cBdp; else goto uBdy;
       cBdp: // global
           R3 = R3;
           R2 = R2;
           R1 = GHC.Debug.debugErrLn_len_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       uBdy: // global
           I64[Sp - 16] = R2;
           P64[Sp - 8] = R3;
           Sp = Sp - 16;
           call _cBde() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn_len_info" {
     GHC.Debug.debugErrLn_len_info:
         const GHC.Debug.debugErrLn_len_entry;
         const 0;
         const 14;
         const 8589934605;
 },
 _cBde() //  []
         { []
         }
     {offset
       cBde: // global
           I64[Sp - 8] = block_cBdh_info;
           R1 = P64[Sp + 8];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uBdA; else goto cBdi;
       uBdA: // global
           call _cBdh(R1) args: 0, res: 0, upd: 0;
       cBdi: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cBdh() //  [R1]
         { []
         }
     {offset
       cBdh: // global
           _sBcC::I64 = I64[Sp + 8];
           if (R1 & 7 == 1) goto cBdl; else goto cBdm;
       cBdl: // global
           R1 = _sBcC::I64;
           Sp = Sp + 24;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
       cBdm: // global
           I64[Sp + 8] = _sBcC::I64 + 1;
           P64[Sp + 16] = P64[R1 + 14];
           Sp = Sp + 8;
           call _cBde() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cBdh_info" {
     block_cBdh_info:
         const _cBdh;
         const 194;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.583447371 UTC

[section ""data" . GHC.Debug.debugErrLn_write_closure" {
     GHC.Debug.debugErrLn_write_closure:
         const GHC.Debug.debugErrLn_write_info;
 },
 GHC.Debug.debugErrLn_write_entry() //  [R2, R3, R4]
         { []
         }
     {offset
       cBe5: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cBe6; else goto uBel;
       cBe6: // global
           R4 = R4;
           R3 = R3;
           R2 = R2;
           R1 = GHC.Debug.debugErrLn_write_closure;
           call (stg_gc_fun)(R4, R3, R2, R1) args: 8, res: 0, upd: 8;
       uBel: // global
           P64[Sp - 24] = R2;
           I64[Sp - 16] = R3;
           P64[Sp - 8] = R4;
           Sp = Sp - 24;
           call _cBdV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn_write_info" {
     GHC.Debug.debugErrLn_write_info:
         const GHC.Debug.debugErrLn_write_entry;
         const 0;
         const 14;
         const 17179869205;
 },
 _cBdV() //  []
         { []
         }
     {offset
       cBdV: // global
           I64[Sp - 8] = block_cBdY_info;
           R1 = P64[Sp + 16];
           Sp = Sp - 8;
           if (R1 & 7 != 0) goto uBen; else goto cBdZ;
       uBen: // global
           call _cBdY(R1) args: 0, res: 0, upd: 0;
       cBdZ: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 _cBdY() //  [R1]
         { []
         }
     {offset
       cBdY: // global
           if (R1 & 7 == 1) goto cBe2; else goto cBe3;
       cBe2: // global
           I8[P64[Sp + 8] + (I64[Sp + 16] + 16)] = 0 :: W8;
           Sp = Sp + 32;
           call (I64[P64[Sp]])() args: 8, res: 0, upd: 8;
       cBe3: // global
           I64[Sp] = block_cBed_info;
           _sBcO::P64 = P64[R1 + 14];
           R1 = P64[R1 + 6];
           P64[Sp + 24] = _sBcO::P64;
           if (R1 & 7 != 0) goto uBeo; else goto cBef;
       uBeo: // global
           call _cBed(R1) args: 0, res: 0, upd: 0;
       cBef: // global
           call (I64[I64[R1]])(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBdY_info" {
     block_cBdY_info:
         const _cBdY;
         const 387;
         const 30;
 },
 _cBed() //  [R1]
         { []
         }
     {offset
       cBed: // global
           _sBcI::P64 = P64[Sp + 8];
           _sBcJ::I64 = I64[Sp + 16];
           _sBcO::P64 = P64[Sp + 24];
           I8[(_sBcI::P64 + 16) + _sBcJ::I64] = %MO_UU_Conv_W64_W8(I64[R1 + 7]);
           P64[Sp + 8] = _sBcI::P64;
           I64[Sp + 16] = _sBcJ::I64 + 1;
           P64[Sp + 24] = _sBcO::P64;
           Sp = Sp + 8;
           call _cBdV() args: 0, res: 0, upd: 0;
     }
 },
 section ""relreadonly" . block_cBed_info" {
     block_cBed_info:
         const _cBed;
         const 131;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.591703192 UTC

[section ""cstring" . GHC.Debug.$trModule4_bytes" {
     GHC.Debug.$trModule4_bytes:
         I8[] [103,104,99,45,112,114,105,109]
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.59367037 UTC

[section ""data" . GHC.Debug.$trModule3_closure" {
     GHC.Debug.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Debug.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.595510999 UTC

[section ""cstring" . GHC.Debug.$trModule2_bytes" {
     GHC.Debug.$trModule2_bytes:
         I8[] [71,72,67,46,68,101,98,117,103]
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.597377612 UTC

[section ""data" . GHC.Debug.$trModule1_closure" {
     GHC.Debug.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Debug.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.599293752 UTC

[section ""data" . GHC.Debug.$trModule_closure" {
     GHC.Debug.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Debug.$trModule3_closure+1;
         const GHC.Debug.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.60358835 UTC

[section ""data" . GHC.Debug.debugLn1_closure" {
     GHC.Debug.debugLn1_closure:
         const GHC.Debug.debugLn1_info;
 },
 GHC.Debug.debugLn1_entry() //  [R2]
         { []
         }
     {offset
       cBf2: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cBf3; else goto cBf4;
       cBf3: // global
           R2 = R2;
           R1 = GHC.Debug.debugLn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cBf4: // global
           I64[Sp - 16] = block_cBf0_info;
           R3 = R2;
           _sBcT::P64 = R2;
           R2 = 1;
           P64[Sp - 8] = _sBcT::P64;
           Sp = Sp - 16;
           call GHC.Debug.debugErrLn_len_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugLn1_info" {
     GHC.Debug.debugLn1_info:
         const GHC.Debug.debugLn1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cBf0() //  [R1]
         { []
         }
     {offset
       cBf0: // global
           I64[Sp] = block_cBf7_info;
           R1 = R1;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBf0_info" {
     block_cBf0_info:
         const _cBf0;
         const 1;
         const 30;
 },
 _cBf7() //  [R1]
         { []
         }
     {offset
       cBf7: // global
           I64[Sp] = block_cBf9_info;
           R4 = P64[Sp + 8];
           R3 = 0;
           R2 = R1;
           P64[Sp + 8] = R1;
           call GHC.Debug.debugErrLn_write_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBf7_info" {
     block_cBf7_info:
         const _cBf7;
         const 1;
         const 30;
 },
 _cBf9() //  []
         { []
         }
     {offset
       cBf9: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] debugLn(P64[Sp + 8] + 16);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cBf9_info" {
     block_cBf9_info:
         const _cBf9;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.612659543 UTC

[section ""data" . GHC.Debug.debugLn_closure" {
     GHC.Debug.debugLn_closure:
         const GHC.Debug.debugLn_info;
 },
 GHC.Debug.debugLn_entry() //  [R2]
         { []
         }
     {offset
       cBfE: // global
           R2 = R2;
           call GHC.Debug.debugLn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugLn_info" {
     GHC.Debug.debugLn_info:
         const GHC.Debug.debugLn_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.61737655 UTC

[section ""data" . GHC.Debug.debugErrLn1_closure" {
     GHC.Debug.debugErrLn1_closure:
         const GHC.Debug.debugErrLn1_info;
 },
 GHC.Debug.debugErrLn1_entry() //  [R2]
         { []
         }
     {offset
       cBfR: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cBfS; else goto cBfT;
       cBfS: // global
           R2 = R2;
           R1 = GHC.Debug.debugErrLn1_closure;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cBfT: // global
           I64[Sp - 16] = block_cBfP_info;
           R3 = R2;
           _sBd3::P64 = R2;
           R2 = 1;
           P64[Sp - 8] = _sBd3::P64;
           Sp = Sp - 16;
           call GHC.Debug.debugErrLn_len_entry(R3,
                                               R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn1_info" {
     GHC.Debug.debugErrLn1_info:
         const GHC.Debug.debugErrLn1_entry;
         const 0;
         const 14;
         const 8589934597;
 },
 _cBfP() //  [R1]
         { []
         }
     {offset
       cBfP: // global
           I64[Sp] = block_cBfW_info;
           R1 = R1;
           call stg_newByteArray#(R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBfP_info" {
     block_cBfP_info:
         const _cBfP;
         const 1;
         const 30;
 },
 _cBfW() //  [R1]
         { []
         }
     {offset
       cBfW: // global
           I64[Sp] = block_cBfY_info;
           R4 = P64[Sp + 8];
           R3 = 0;
           R2 = R1;
           P64[Sp + 8] = R1;
           call GHC.Debug.debugErrLn_write_entry(R4,
                                                 R3,
                                                 R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cBfW_info" {
     block_cBfW_info:
         const _cBfW;
         const 1;
         const 30;
 },
 _cBfY() //  []
         { []
         }
     {offset
       cBfY: // global
           call "ccall" arg hints:  [PtrHint]  result hints:  [] debugErrLn(P64[Sp + 8] + 16);
           R1 = GHC.Tuple.()_closure+1;
           Sp = Sp + 16;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cBfY_info" {
     block_cBfY_info:
         const _cBfY;
         const 1;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.626594114 UTC

[section ""data" . GHC.Debug.debugErrLn_closure" {
     GHC.Debug.debugErrLn_closure:
         const GHC.Debug.debugErrLn_info;
 },
 GHC.Debug.debugErrLn_entry() //  [R2]
         { []
         }
     {offset
       cBgt: // global
           R2 = R2;
           call GHC.Debug.debugErrLn1_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Debug.debugErrLn_info" {
     GHC.Debug.debugErrLn_info:
         const GHC.Debug.debugErrLn_entry;
         const 0;
         const 14;
         const 8589934597;
 }]


==================== Raw Cmm ====================
2018-03-16 15:50:22.630070459 UTC

[section ""relreadonly" . SBgA_srt" { SBgA_srt:
 }]

