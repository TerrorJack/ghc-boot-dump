
==================== Asm code ====================
2018-03-16 15:53:56.902348317 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.roundingMode#_closure
.type GHC.Integer.Logarithms.Internals.roundingMode#_closure, @object
GHC.Integer.Logarithms.Internals.roundingMode#_closure:
	.quad	GHC.Integer.Logarithms.Internals.roundingMode#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:56.903447422 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.roundingMode#_entry
.type GHC.Integer.Logarithms.Internals.roundingMode#_entry, @object
GHC.Integer.Logarithms.Internals.roundingMode#_entry:
_cae0:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _caec
_caed:
	movq $block_cadY_info,-16(%rbp)
	movq %r14,%rax
	movl $GHC.Integer.Type.oneInteger_closure,%r14d
	movq %rax,-8(%rbp)
	addq $-16,%rbp
	jmp GHC.Integer.Type.shiftLInteger_entry
_caec:
	movl $GHC.Integer.Logarithms.Internals.roundingMode#_closure,%ebx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.roundingMode#_entry, .-GHC.Integer.Logarithms.Internals.roundingMode#_entry


==================== Asm code ====================
2018-03-16 15:53:56.904652645 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.roundingMode#_info
.type GHC.Integer.Logarithms.Internals.roundingMode#_info, @object
GHC.Integer.Logarithms.Internals.roundingMode#_info:
	.quad	GHC.Integer.Logarithms.Internals.roundingMode#_entry
	.quad	0
	.quad	30064771086
	.quad	8589934606
	.quad	S9Ff_srt


==================== Asm code ====================
2018-03-16 15:53:56.905436661 UTC

.section .text
.align 8
_cadY:
_cadY:
	movq $block_cae3_info,-8(%rbp)
	movq %rbx,%rsi
	movq %rbx,%r14
	movq %rbx,(%rbp)
	addq $-8,%rbp
	jmp GHC.Integer.Type.plusInteger_entry
	.size _cadY, .-_cadY


==================== Asm code ====================
2018-03-16 15:53:56.906133518 UTC

.section .data.rel.ro
.align 8
.align 1
block_cadY_info:
	.quad	_cadY
	.quad	1
	.quad	12884901918
	.quad	S9Ff_srt


==================== Asm code ====================
2018-03-16 15:53:56.90690697 UTC

.section .text
.align 8
_cae3:
_cae3:
	movq $block_cae7_info,(%rbp)
	movl $GHC.Integer.Type.oneInteger_closure,%esi
	movq %rbx,%r14
	jmp GHC.Integer.Type.minusInteger_entry
	.size _cae3, .-_cae3


==================== Asm code ====================
2018-03-16 15:53:56.907598025 UTC

.section .data.rel.ro
.align 8
.align 1
block_cae3_info:
	.quad	_cae3
	.quad	2
	.quad	4294967326
	.quad	S9Ff_srt+8


==================== Asm code ====================
2018-03-16 15:53:56.908313983 UTC

.section .text
.align 8
_cae7:
_cae7:
	movq $block_caeb_info,(%rbp)
	movq %rbx,%rsi
	movq 16(%rbp),%r14
	jmp GHC.Integer.Type.andInteger_entry
	.size _cae7, .-_cae7


==================== Asm code ====================
2018-03-16 15:53:56.909072083 UTC

.section .data.rel.ro
.align 8
.align 1
block_cae7_info:
	.quad	_cae7
	.quad	2
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.909865318 UTC

.section .text
.align 8
_caeb:
_caeb:
	movq $block_caek_info,(%rbp)
	movq %rbx,%rsi
	movq 8(%rbp),%r14
	movq %rbx,16(%rbp)
	jmp GHC.Integer.Type.ltInteger#_entry
	.size _caeb, .-_caeb


==================== Asm code ====================
2018-03-16 15:53:56.910508794 UTC

.section .data.rel.ro
.align 8
.align 1
block_caeb_info:
	.quad	_caeb
	.quad	130
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.911373309 UTC

.section .text
.align 8
_caek:
_caek:
	cmpq $1,%rbx
	je _caeG
_caes:
	movq 16(%rbp),%rax
	movq $block_caep_info,16(%rbp)
	movq %rax,%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp GHC.Integer.Type.gtInteger#_entry
_caeG:
	movl $2,%ebx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caek, .-_caek


==================== Asm code ====================
2018-03-16 15:53:56.91216497 UTC

.section .data.rel.ro
.align 8
.align 1
block_caek_info:
	.quad	_caek
	.quad	2
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.913046571 UTC

.section .text
.align 8
_caep:
_caep:
	cmpq $1,%rbx
	je _caeC
_caey:
	movl $1,%ebx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caeC:
	xorl %ebx,%ebx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caep, .-_caep


==================== Asm code ====================
2018-03-16 15:53:56.914330511 UTC

.section .data.rel.ro
.align 8
.align 1
block_caep_info:
	.quad	_caep
	.quad	0
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.919112594 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.leadingZeros_closure
.type GHC.Integer.Logarithms.Internals.leadingZeros_closure, @object
GHC.Integer.Logarithms.Internals.leadingZeros_closure:
	.quad	GHC.Integer.Logarithms.Internals.leadingZeros_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:56.920185391 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.leadingZeros_entry
.type GHC.Integer.Logarithms.Internals.leadingZeros_entry, @object
GHC.Integer.Logarithms.Internals.leadingZeros_entry:
_cafj:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _cafk
_cafl:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF
	addq $8,%rsp
	testq %rax,%rax
	je _cafc
_cafb:
	movq $stg_bh_upd_frame_info,-16(%rbp)
	movq %rax,-8(%rbp)
	movq $block_cafd_info,-24(%rbp)
	movl $256,%ebx
	addq $-24,%rbp
	jmp stg_newByteArray#
_cafk:
	jmp *-16(%r13)
_cafc:
	movq (%rbx),%rax
	jmp *(%rax)
	.size GHC.Integer.Logarithms.Internals.leadingZeros_entry, .-GHC.Integer.Logarithms.Internals.leadingZeros_entry


==================== Asm code ====================
2018-03-16 15:53:56.920988919 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.leadingZeros_info
.type GHC.Integer.Logarithms.Internals.leadingZeros_info, @object
GHC.Integer.Logarithms.Internals.leadingZeros_info:
	.quad	GHC.Integer.Logarithms.Internals.leadingZeros_entry
	.quad	0
	.quad	21


==================== Asm code ====================
2018-03-16 15:53:56.922758213 UTC

.section .text
.align 8
_cafd:
_cafd:
	movb $9,16(%rbx)
	movl $1,%eax
	movl $8,%ecx
	movl $2,%edx
_cafu:
	cmpq $256,%rax
	je _uafP
_cafG:
	cmpq %rdx,%rax
	jge _cafD
_cafE:
	movq %rcx,%rsi
	leaq 16(%rbx),%rdi
	movb %sil,(%rdi,%rax,1)
	incq %rax
	jmp _cafu
_uafP:
	movq %rbx,(%rbp)
	addq $-8,%rbp
	jmp _cafo
_cafD:
	decq %rcx
	shlq $1,%rdx
	jmp _cafu
	.size _cafd, .-_cafd


==================== Asm code ====================
2018-03-16 15:53:56.923599819 UTC

.section .data.rel.ro
.align 8
.align 1
block_cafd_info:
	.quad	_cafd
	.quad	0
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.925051474 UTC

.section .text
.align 8
_cafo:
_cafo:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _caft
_cafs:
	movq $GHC.Integer.Logarithms.Internals.BA_con_info,-8(%r12)
	movq 8(%rbp),%rax
	movq %rax,(%r12)
	leaq -7(%r12),%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caft:
	movq $16,904(%r13)
	movq $block_cafo_info,(%rbp)
	jmp stg_gc_noregs
	.size _cafo, .-_cafo


==================== Asm code ====================
2018-03-16 15:53:56.926009506 UTC

.section .data.rel.ro
.align 8
.align 1
block_cafo_info:
	.quad	_cafo
	.quad	1
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.931859516 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.wordLog2#_closure
.type GHC.Integer.Logarithms.Internals.wordLog2#_closure, @object
GHC.Integer.Logarithms.Internals.wordLog2#_closure:
	.quad	GHC.Integer.Logarithms.Internals.wordLog2#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:56.932976404 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.wordLog2#_entry
.type GHC.Integer.Logarithms.Internals.wordLog2#_entry, @object
GHC.Integer.Logarithms.Internals.wordLog2#_entry:
_cagf:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _cagg
_cagh:
	movq $block_cagc_info,-16(%rbp)
	movl $GHC.Integer.Logarithms.Internals.leadingZeros_closure,%ebx
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _cagc
_cagd:
	movq (%rbx),%rax
	jmp *(%rax)
_cagg:
	movl $GHC.Integer.Logarithms.Internals.wordLog2#_closure,%ebx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.wordLog2#_entry, .-GHC.Integer.Logarithms.Internals.wordLog2#_entry


==================== Asm code ====================
2018-03-16 15:53:56.933920857 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.wordLog2#_info
.type GHC.Integer.Logarithms.Internals.wordLog2#_info, @object
GHC.Integer.Logarithms.Internals.wordLog2#_info:
	.quad	GHC.Integer.Logarithms.Internals.wordLog2#_entry
	.quad	0
	.quad	12884901902
	.quad	4294967300
	.quad	S9Ff_srt+24


==================== Asm code ====================
2018-03-16 15:53:56.935636586 UTC

.section .text
.align 8
_cagc:
_cagc:
	movq 8(%rbp),%rax
	movq 7(%rbx),%rbx
	movq %rax,%rcx
	shrq $56,%rcx
	testq %rcx,%rcx
	jne _cagz
_cagD:
	movq %rax,%rcx
	shrq $48,%rcx
	testq %rcx,%rcx
	jne _cagV
_cagZ:
	movq %rax,%rcx
	shrq $40,%rcx
	testq %rcx,%rcx
	jne _cahh
_cahl:
	movq %rax,%rcx
	shrq $32,%rcx
	testq %rcx,%rcx
	jne _cahD
_cahH:
	movq %rax,%rcx
	shrq $24,%rcx
	testq %rcx,%rcx
	jne _cahZ
_cai3:
	movq %rax,%rcx
	shrq $16,%rcx
	testq %rcx,%rcx
	jne _cail
_caip:
	movq %rax,%rcx
	shrq $8,%rcx
	testq %rcx,%rcx
	jne _caiH
_caiU:
	addq $16,%rbx
	movsbq (%rbx,%rax,1),%rax
	movl $8,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caiH:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $16,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cail:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $24,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cahZ:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $32,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cahD:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $40,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cahh:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $48,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cagV:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $56,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cagz:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $64,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _cagc, .-_cagc


==================== Asm code ====================
2018-03-16 15:53:56.936835186 UTC

.section .data.rel.ro
.align 8
.align 1
block_cagc_info:
	.quad	_cagc
	.quad	65
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.945595815 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_step_closure
.type GHC.Integer.Logarithms.Internals.integerLog2#_step_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2#_step_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_step_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:56.946868733 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2#_step_entry
.type GHC.Integer.Logarithms.Internals.integerLog2#_step_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2#_step_entry:
_cajN:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _cajO
_uanf:
	movq %r14,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	jmp _cajD
_cajO:
	movl $GHC.Integer.Logarithms.Internals.integerLog2#_step_closure,%ebx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2#_step_entry, .-GHC.Integer.Logarithms.Internals.integerLog2#_step_entry


==================== Asm code ====================
2018-03-16 15:53:56.947723266 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_step_info
.type GHC.Integer.Logarithms.Internals.integerLog2#_step_info, @object
GHC.Integer.Logarithms.Internals.integerLog2#_step_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_step_entry
	.quad	0
	.quad	12884901902
	.quad	8589934605
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:56.948846369 UTC

.section .text
.align 8
_cajD:
_cajD:
	movq $block_cajG_info,-8(%rbp)
	movq 8(%rbp),%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _cajG
_cajH:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _cajD, .-_cajD


==================== Asm code ====================
2018-03-16 15:53:56.950187473 UTC

.section .text
.align 8
_cajG:
_cajG:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _cajK
_cajL:
	movq 8(%rbp),%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cajK:
	movq $block_cajS_info,(%rbp)
	movq 15(%rbx),%rax
	movq 7(%rbx),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _cajS
_cajU:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _cajG, .-_cajG


==================== Asm code ====================
2018-03-16 15:53:56.950991146 UTC

.section .data.rel.ro
.align 8
.align 1
block_cajG_info:
	.quad	_cajG
	.quad	194
	.quad	4294967326
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:56.951911628 UTC

.section .text
.align 8
_cajS:
_cajS:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _cak0
_cak5:
	movq $block_cak3_info,(%rbp)
	movl $GHC.Integer.Logarithms.Internals.leadingZeros_closure,%ebx
	testb $7,%bl
	jne _cak3
_cak6:
	movq (%rbx),%rax
	jmp *(%rax)
_cak0:
	addq $64,8(%rbp)
	movq %rbx,16(%rbp)
	addq $8,%rbp
	jmp _cajD
	.size _cajS, .-_cajS


==================== Asm code ====================
2018-03-16 15:53:56.952702186 UTC

.section .data.rel.ro
.align 8
.align 1
block_cajS_info:
	.quad	_cajS
	.quad	194
	.quad	4294967326
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:56.954200988 UTC

.section .text
.align 8
_cak3:
_cak3:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 7(%rbx),%rbx
	movq %rcx,%rdx
	shrq $56,%rdx
	testq %rdx,%rdx
	jne _caks
_cakw:
	movq %rcx,%rdx
	shrq $48,%rdx
	testq %rdx,%rdx
	jne _cakR
_cakV:
	movq %rcx,%rdx
	shrq $40,%rdx
	testq %rdx,%rdx
	jne _calg
_calk:
	movq %rcx,%rdx
	shrq $32,%rdx
	testq %rdx,%rdx
	jne _calF
_calJ:
	movq %rcx,%rdx
	shrq $24,%rdx
	testq %rdx,%rdx
	jne _cam4
_cam8:
	movq %rcx,%rdx
	shrq $16,%rdx
	testq %rdx,%rdx
	jne _camt
_camx:
	movq %rcx,%rdx
	shrq $8,%rdx
	testq %rdx,%rdx
	jne _camS
_can8:
	addq $16,%rbx
	movsbq (%rbx,%rcx,1),%rbx
	movl $8,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_camS:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $16,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_camt:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $24,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cam4:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $32,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_calF:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $40,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_calg:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $48,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cakR:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $56,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caks:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $64,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _cak3, .-_cak3


==================== Asm code ====================
2018-03-16 15:53:56.955855512 UTC

.section .data.rel.ro
.align 8
.align 1
block_cak3_info:
	.quad	_cak3
	.quad	194
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.960123721 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_closure
.type GHC.Integer.Logarithms.Internals.integerLog2#_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2#_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:56.961118877 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2#_entry
.type GHC.Integer.Logarithms.Internals.integerLog2#_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2#_entry:
_caoH:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _caoI
_caoJ:
	movq $block_caoA_info,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _caoA
_caoB:
	movq (%rbx),%rax
	jmp *(%rax)
_caoI:
	movl $GHC.Integer.Logarithms.Internals.integerLog2#_closure,%ebx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2#_entry, .-GHC.Integer.Logarithms.Internals.integerLog2#_entry


==================== Asm code ====================
2018-03-16 15:53:56.962109465 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_info
.type GHC.Integer.Logarithms.Internals.integerLog2#_info, @object
GHC.Integer.Logarithms.Internals.integerLog2#_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_entry
	.quad	0
	.quad	12884901902
	.quad	4294967301
	.quad	S9Ff_srt+40


==================== Asm code ====================
2018-03-16 15:53:56.963181268 UTC

.section .text
.align 8
_caoA:
_caoA:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caoF
_caoE:
	movq $-1,%rbx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caoF:
	movq 7(%rbx),%rsi
	xorl %r14d,%r14d
	addq $8,%rbp
	jmp GHC.Integer.Logarithms.Internals.integerLog2#_step_entry
	.size _caoA, .-_caoA


==================== Asm code ====================
2018-03-16 15:53:56.963991021 UTC

.section .data.rel.ro
.align 8
.align 1
block_caoA_info:
	.quad	_caoA
	.quad	0
	.quad	4294967326
	.quad	S9Ff_srt+40


==================== Asm code ====================
2018-03-16 15:53:56.975156102 UTC

.section .data
.align 8
.align 1
noPower_r9AI_closure:
	.quad	noPower_r9AI_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:56.976541116 UTC

.section .text
.align 8
noPower_r9AI_entry:
_cape:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _capf
_uasG:
	movq %r14,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	jmp _cap4
_capf:
	movl $noPower_r9AI_closure,%ebx
	jmp *-8(%r13)
	.size noPower_r9AI_entry, .-noPower_r9AI_entry


==================== Asm code ====================
2018-03-16 15:53:56.977417395 UTC

.section .data.rel.ro
.align 8
.align 1
noPower_r9AI_info:
	.quad	noPower_r9AI_entry
	.quad	0
	.quad	38654705678
	.quad	8589934605
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:56.979191938 UTC

.section .text
.align 8
_cap4:
_cap4:
	movq $block_cap7_info,-8(%rbp)
	movq 8(%rbp),%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _cap7
_cap8:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _cap4, .-_cap4


==================== Asm code ====================
2018-03-16 15:53:56.980397509 UTC

.section .text
.align 8
_cap7:
_cap7:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _capb
_capc:
	movl $1,%r14d
	movq 8(%rbp),%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_capb:
	movq $block_capj_info,(%rbp)
	movq 15(%rbx),%rax
	movq 7(%rbx),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _capj
_capl:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _cap7, .-_cap7


==================== Asm code ====================
2018-03-16 15:53:56.981388819 UTC

.section .data.rel.ro
.align 8
.align 1
block_cap7_info:
	.quad	_cap7
	.quad	194
	.quad	4294967326
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:56.982296714 UTC

.section .text
.align 8
_capj:
_capj:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _capr
_capw:
	movq $block_capu_info,(%rbp)
	movl $GHC.Integer.Logarithms.Internals.leadingZeros_closure,%ebx
	testb $7,%bl
	jne _capu
_capx:
	movq (%rbx),%rax
	jmp *(%rax)
_capr:
	addq $64,8(%rbp)
	movq %rbx,16(%rbp)
	addq $8,%rbp
	jmp _cap4
	.size _capj, .-_capj


==================== Asm code ====================
2018-03-16 15:53:56.983123306 UTC

.section .data.rel.ro
.align 8
.align 1
block_capj_info:
	.quad	_capj
	.quad	194
	.quad	4294967326
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:56.984967041 UTC

.section .text
.align 8
_capu:
_capu:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 7(%rbx),%rbx
	movq %rcx,%rdx
	shrq $56,%rdx
	testq %rdx,%rdx
	jne _capH
_capN:
	movq %rcx,%rdx
	shrq $48,%rdx
	testq %rdx,%rdx
	jne _capW
_caq2:
	movq %rcx,%rdx
	shrq $40,%rdx
	testq %rdx,%rdx
	jne _caqb
_caqh:
	movq %rcx,%rdx
	shrq $32,%rdx
	testq %rdx,%rdx
	jne _caqq
_caqw:
	movq %rcx,%rdx
	shrq $24,%rdx
	testq %rdx,%rdx
	jne _caqF
_caqL:
	movq %rcx,%rdx
	shrq $16,%rdx
	testq %rdx,%rdx
	jne _caqU
_car0:
	movq %rcx,%rdx
	shrq $8,%rdx
	testq %rdx,%rdx
	jne _car9
_carf:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rcx,1),%rbx
	movl $8,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_car9:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $16,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caqU:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $24,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caqF:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $32,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caqq:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $40,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caqb:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $48,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_capW:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $56,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_capH:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $64,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _capu, .-_capu


==================== Asm code ====================
2018-03-16 15:53:56.986594131 UTC

.section .data.rel.ro
.align 8
.align 1
block_capu_info:
	.quad	_capu
	.quad	194
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:56.997315663 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:56.998345671 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry:
_cau8:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _cau9
_uayR:
	movq %r14,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	jmp _catY
_cau9:
	movl $GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure,%ebx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry, .-GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry


==================== Asm code ====================
2018-03-16 15:53:56.999120965 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry
	.quad	0
	.quad	107374182414
	.quad	8589934605
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:56.999955073 UTC

.section .text
.align 8
_catY:
_catY:
	movq $block_cau1_info,-8(%rbp)
	movq 8(%rbp),%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _cau1
_cau2:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _catY, .-_catY


==================== Asm code ====================
2018-03-16 15:53:57.001349965 UTC

.section .text
.align 8
_cau1:
_cau1:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _cau5
_cau6:
	movl $1,%r14d
	movq 8(%rbp),%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cau5:
	movq $block_caud_info,(%rbp)
	movq 15(%rbx),%rax
	movq 7(%rbx),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _caud
_cauf:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _cau1, .-_cau1


==================== Asm code ====================
2018-03-16 15:53:57.002128221 UTC

.section .data.rel.ro
.align 8
.align 1
block_cau1_info:
	.quad	_cau1
	.quad	194
	.quad	38654705694
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:57.002989047 UTC

.section .text
.align 8
_caud:
_caud:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caup
_cauu:
	movq $block_caus_info,(%rbp)
	movl $GHC.Integer.Logarithms.Internals.leadingZeros_closure,%ebx
	testb $7,%bl
	jne _caus
_cauv:
	movq (%rbx),%rax
	jmp *(%rax)
_caun:
	addq $64,%rax
	movq %rax,8(%rbp)
	movq %rbx,16(%rbp)
	addq $8,%rbp
	jmp _catY
_caup:
	movq 8(%rbp),%rax
	cmpq $0,16(%rbp)
	je _caun
_caum:
	movq %rbx,%rsi
	leaq 64(%rax),%r14
	addq $24,%rbp
	jmp noPower_r9AI_entry
	.size _caud, .-_caud


==================== Asm code ====================
2018-03-16 15:53:57.004018691 UTC

.section .data.rel.ro
.align 8
.align 1
block_caud_info:
	.quad	_caud
	.quad	194
	.quad	38654705694
	.quad	S9Ff_srt+32


==================== Asm code ====================
2018-03-16 15:53:57.005588468 UTC

.section .text
.align 8
_caus:
_caus:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 7(%rbx),%rbx
	movq %rcx,%rdx
	shrq $56,%rdx
	testq %rdx,%rdx
	jne _cauF
_cauL:
	movq %rcx,%rdx
	shrq $48,%rdx
	testq %rdx,%rdx
	jne _cauU
_cav0:
	movq %rcx,%rdx
	shrq $40,%rdx
	testq %rdx,%rdx
	jne _cav9
_cavf:
	movq %rcx,%rdx
	shrq $32,%rdx
	testq %rdx,%rdx
	jne _cavo
_cavu:
	movq %rcx,%rdx
	shrq $24,%rdx
	testq %rdx,%rdx
	jne _cavD
_cavJ:
	movq %rcx,%rdx
	shrq $16,%rdx
	testq %rdx,%rdx
	jne _cavS
_cavY:
	movq %rcx,%rdx
	shrq $8,%rdx
	testq %rdx,%rdx
	jne _caw7
_cawd:
	leaq -1(%rcx),%rdx
	movq %rcx,%r14
	andq %rdx,%r14
	addq $16,%rbx
	movsbq (%rbx,%rcx,1),%rbx
	movl $8,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caw7:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $16,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cavS:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $24,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cavD:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $32,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cavo:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $40,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cav9:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $48,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cauU:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $56,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cauF:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $64,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caus, .-_caus


==================== Asm code ====================
2018-03-16 15:53:57.006867665 UTC

.section .data.rel.ro
.align 8
.align 1
block_caus_info:
	.quad	_caus
	.quad	194
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:57.01065603 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:57.012132221 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry:
_caAA:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _caAB
_caAC:
	movq $block_caAt_info,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _caAt
_caAu:
	movq (%rbx),%rax
	jmp *(%rax)
_caAB:
	movl $GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure,%ebx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry, .-GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry


==================== Asm code ====================
2018-03-16 15:53:57.012923512 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry
	.quad	0
	.quad	12884901902
	.quad	4294967301
	.quad	S9Ff_srt+64


==================== Asm code ====================
2018-03-16 15:53:57.01381846 UTC

.section .text
.align 8
_caAt:
_caAt:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caAy
_caAx:
	movl $1,%r14d
	movq $-1,%rbx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caAy:
	movq 7(%rbx),%rsi
	xorl %r14d,%r14d
	addq $8,%rbp
	jmp GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry
	.size _caAt, .-_caAt


==================== Asm code ====================
2018-03-16 15:53:57.014699547 UTC

.section .data.rel.ro
.align 8
.align 1
block_caAt_info:
	.quad	_caAt
	.quad	0
	.quad	4294967326
	.quad	S9Ff_srt+64


==================== Asm code ====================
2018-03-16 15:53:57.017328251 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule4_bytes
.type GHC.Integer.Logarithms.Internals.$trModule4_bytes, @object
GHC.Integer.Logarithms.Internals.$trModule4_bytes:
	.asciz "integer-simple"


==================== Asm code ====================
2018-03-16 15:53:57.019595107 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule3_closure
.type GHC.Integer.Logarithms.Internals.$trModule3_closure, @object
GHC.Integer.Logarithms.Internals.$trModule3_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule4_bytes


==================== Asm code ====================
2018-03-16 15:53:57.022376449 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule2_bytes
.type GHC.Integer.Logarithms.Internals.$trModule2_bytes, @object
GHC.Integer.Logarithms.Internals.$trModule2_bytes:
	.asciz "GHC.Integer.Logarithms.Internals"


==================== Asm code ====================
2018-03-16 15:53:57.024709357 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule1_closure
.type GHC.Integer.Logarithms.Internals.$trModule1_closure, @object
GHC.Integer.Logarithms.Internals.$trModule1_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule2_bytes


==================== Asm code ====================
2018-03-16 15:53:57.027410059 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule_closure
.type GHC.Integer.Logarithms.Internals.$trModule_closure, @object
GHC.Integer.Logarithms.Internals.$trModule_closure:
	.quad	GHC.Types.Module_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule3_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$trModule1_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:57.029772073 UTC

.section .data
.align 8
.align 1
$krep_r9AJ_closure:
	.quad	GHC.Types.KindRepTyConApp_con_info
	.quad	GHC.Types.$tcByteArray#_closure
	.quad	GHC.Types.[]_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:57.032659041 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$tcBA2_bytes
.type GHC.Integer.Logarithms.Internals.$tcBA2_bytes, @object
GHC.Integer.Logarithms.Internals.$tcBA2_bytes:
	.asciz "BA"


==================== Asm code ====================
2018-03-16 15:53:57.035116219 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tcBA1_closure
.type GHC.Integer.Logarithms.Internals.$tcBA1_closure, @object
GHC.Integer.Logarithms.Internals.$tcBA1_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$tcBA2_bytes


==================== Asm code ====================
2018-03-16 15:53:57.037507725 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tcBA_closure
.type GHC.Integer.Logarithms.Internals.$tcBA_closure, @object
GHC.Integer.Logarithms.Internals.$tcBA_closure:
	.quad	GHC.Types.TyCon_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$tcBA1_closure+1
	.quad	GHC.Types.krep$*_closure
	.quad	1270308961569198254
	.quad	6805106280991229347
	.quad	0
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:57.039614235 UTC

.section .data
.align 8
.align 1
$krep1_r9AK_closure:
	.quad	GHC.Types.KindRepTyConApp_con_info
	.quad	GHC.Integer.Logarithms.Internals.$tcBA_closure+1
	.quad	GHC.Types.[]_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:57.042347652 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA1_closure
.type GHC.Integer.Logarithms.Internals.$tc'BA1_closure, @object
GHC.Integer.Logarithms.Internals.$tc'BA1_closure:
	.quad	GHC.Types.KindRepFun_con_info
	.quad	$krep_r9AJ_closure+1
	.quad	$krep1_r9AK_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:57.044365673 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA3_bytes
.type GHC.Integer.Logarithms.Internals.$tc'BA3_bytes, @object
GHC.Integer.Logarithms.Internals.$tc'BA3_bytes:
	.asciz "'BA"


==================== Asm code ====================
2018-03-16 15:53:57.046844058 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA2_closure
.type GHC.Integer.Logarithms.Internals.$tc'BA2_closure, @object
GHC.Integer.Logarithms.Internals.$tc'BA2_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$tc'BA3_bytes


==================== Asm code ====================
2018-03-16 15:53:57.049422546 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA_closure
.type GHC.Integer.Logarithms.Internals.$tc'BA_closure, @object
GHC.Integer.Logarithms.Internals.$tc'BA_closure:
	.quad	GHC.Types.TyCon_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$tc'BA2_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$tc'BA1_closure+4
	.quad	-6043945471323766060
	.quad	5679508278348334299
	.quad	0
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:57.053540312 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.BA_closure
.type GHC.Integer.Logarithms.Internals.BA_closure, @object
GHC.Integer.Logarithms.Internals.BA_closure:
	.quad	GHC.Integer.Logarithms.Internals.BA_info


==================== Asm code ====================
2018-03-16 15:53:57.05451473 UTC

.section .text
.align 8
GHC.Integer.Logarithms.Internals.BA_entry:
_caBf:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _caBj
_caBi:
	movq $GHC.Integer.Logarithms.Internals.BA_con_info,-8(%r12)
	movq %r14,(%r12)
	leaq -7(%r12),%rbx
	movq (%rbp),%rax
	jmp *(%rax)
_caBj:
	movq $16,904(%r13)
	movl $GHC.Integer.Logarithms.Internals.BA_closure,%ebx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.BA_entry, .-GHC.Integer.Logarithms.Internals.BA_entry


==================== Asm code ====================
2018-03-16 15:53:57.055393051 UTC

.section .data.rel.ro
.align 8
.align 1
GHC.Integer.Logarithms.Internals.BA_info:
	.quad	GHC.Integer.Logarithms.Internals.BA_entry
	.quad	0
	.quad	14
	.quad	4294967301


==================== Asm code ====================
2018-03-16 15:53:57.058724058 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
iadT_str:
	.asciz "integer-simple:GHC.Integer.Logarithms.Internals.BA"


==================== Asm code ====================
2018-03-16 15:53:57.059604081 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.BA_con_entry
.type GHC.Integer.Logarithms.Internals.BA_con_entry, @object
GHC.Integer.Logarithms.Internals.BA_con_entry:
_caBp:
	incq %rbx
	movq (%rbp),%rax
	jmp *(%rax)
	.size GHC.Integer.Logarithms.Internals.BA_con_entry, .-GHC.Integer.Logarithms.Internals.BA_con_entry


==================== Asm code ====================
2018-03-16 15:53:57.060590572 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.BA_con_info
.type GHC.Integer.Logarithms.Internals.BA_con_info, @object
GHC.Integer.Logarithms.Internals.BA_con_info:
	.quad	GHC.Integer.Logarithms.Internals.BA_con_entry
	.quad	1
	.quad	2
	.quad	iadT_str


==================== Asm code ====================
2018-03-16 15:53:57.063236782 UTC

.section .data.rel.ro
.align 8
.align 1
S9Ff_srt:
	.quad	GHC.Integer.Type.plusInteger_closure
	.quad	GHC.Integer.Type.minusInteger_closure
	.quad	GHC.Integer.Logarithms.Internals.roundingMode#_closure
	.quad	GHC.Integer.Logarithms.Internals.wordLog2#_closure
	.quad	GHC.Integer.Logarithms.Internals.leadingZeros_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_step_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_closure
	.quad	noPower_r9AI_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure


==================== Asm code ====================
2018-03-16 15:53:58.102933418 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.roundingMode#_closure
.type GHC.Integer.Logarithms.Internals.roundingMode#_closure, @object
GHC.Integer.Logarithms.Internals.roundingMode#_closure:
	.quad	GHC.Integer.Logarithms.Internals.roundingMode#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.104137043 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.roundingMode#_entry
.type GHC.Integer.Logarithms.Internals.roundingMode#_entry, @object
GHC.Integer.Logarithms.Internals.roundingMode#_entry:
_caFi:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _caFu
_caFv:
	leaq block_caFg_info(%rip),%rax
	movq %rax,-16(%rbp)
	movq %r14,%rax
	movq GHC.Integer.Type.oneInteger_closure@gotpcrel(%rip),%r14
	movq %rax,-8(%rbp)
	addq $-16,%rbp
	jmp *GHC.Integer.Type.shiftLInteger_entry@gotpcrel(%rip)
_caFu:
	leaq GHC.Integer.Logarithms.Internals.roundingMode#_closure(%rip),%rbx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.roundingMode#_entry, .-GHC.Integer.Logarithms.Internals.roundingMode#_entry


==================== Asm code ====================
2018-03-16 15:53:58.104892501 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.roundingMode#_info
.type GHC.Integer.Logarithms.Internals.roundingMode#_info, @object
GHC.Integer.Logarithms.Internals.roundingMode#_info:
	.quad	GHC.Integer.Logarithms.Internals.roundingMode#_entry
	.quad	0
	.quad	30064771086
	.quad	8589934606
	.quad	SaFZ_srt


==================== Asm code ====================
2018-03-16 15:53:58.105732358 UTC

.section .text
.align 8
_caFg:
_caFg:
	leaq block_caFl_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %rbx,%rsi
	movq %rbx,%r14
	movq %rbx,(%rbp)
	addq $-8,%rbp
	jmp *GHC.Integer.Type.plusInteger_entry@gotpcrel(%rip)
	.size _caFg, .-_caFg


==================== Asm code ====================
2018-03-16 15:53:58.106593319 UTC

.section .data.rel.ro
.align 8
.align 1
block_caFg_info:
	.quad	_caFg
	.quad	1
	.quad	12884901918
	.quad	SaFZ_srt


==================== Asm code ====================
2018-03-16 15:53:58.107308334 UTC

.section .text
.align 8
_caFl:
_caFl:
	leaq block_caFp_info(%rip),%rax
	movq %rax,(%rbp)
	movq GHC.Integer.Type.oneInteger_closure@gotpcrel(%rip),%rsi
	movq %rbx,%r14
	jmp *GHC.Integer.Type.minusInteger_entry@gotpcrel(%rip)
	.size _caFl, .-_caFl


==================== Asm code ====================
2018-03-16 15:53:58.108007782 UTC

.section .data.rel.ro
.align 8
.align 1
block_caFl_info:
	.quad	_caFl
	.quad	2
	.quad	4294967326
	.quad	SaFZ_srt+8


==================== Asm code ====================
2018-03-16 15:53:58.108724579 UTC

.section .text
.align 8
_caFp:
_caFp:
	leaq block_caFt_info(%rip),%rax
	movq %rax,(%rbp)
	movq %rbx,%rsi
	movq 16(%rbp),%r14
	jmp *GHC.Integer.Type.andInteger_entry@gotpcrel(%rip)
	.size _caFp, .-_caFp


==================== Asm code ====================
2018-03-16 15:53:58.10962901 UTC

.section .data.rel.ro
.align 8
.align 1
block_caFp_info:
	.quad	_caFp
	.quad	2
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.110328864 UTC

.section .text
.align 8
_caFt:
_caFt:
	leaq block_caFC_info(%rip),%rax
	movq %rax,(%rbp)
	movq %rbx,%rsi
	movq 8(%rbp),%r14
	movq %rbx,16(%rbp)
	jmp *GHC.Integer.Type.ltInteger#_entry@gotpcrel(%rip)
	.size _caFt, .-_caFt


==================== Asm code ====================
2018-03-16 15:53:58.110953234 UTC

.section .data.rel.ro
.align 8
.align 1
block_caFt_info:
	.quad	_caFt
	.quad	130
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.111984116 UTC

.section .text
.align 8
_caFC:
_caFC:
	cmpq $1,%rbx
	je _caFY
_caFK:
	movq 16(%rbp),%rax
	leaq block_caFH_info(%rip),%rbx
	movq %rbx,16(%rbp)
	movq %rax,%rsi
	movq 8(%rbp),%r14
	addq $16,%rbp
	jmp *GHC.Integer.Type.gtInteger#_entry@gotpcrel(%rip)
_caFY:
	movl $2,%ebx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caFC, .-_caFC


==================== Asm code ====================
2018-03-16 15:53:58.112695988 UTC

.section .data.rel.ro
.align 8
.align 1
block_caFC_info:
	.quad	_caFC
	.quad	2
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.113553848 UTC

.section .text
.align 8
_caFH:
_caFH:
	cmpq $1,%rbx
	je _caFU
_caFQ:
	movl $1,%ebx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caFU:
	xorl %ebx,%ebx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caFH, .-_caFH


==================== Asm code ====================
2018-03-16 15:53:58.114222361 UTC

.section .data.rel.ro
.align 8
.align 1
block_caFH_info:
	.quad	_caFH
	.quad	0
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.11926942 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.leadingZeros_closure
.type GHC.Integer.Logarithms.Internals.leadingZeros_closure, @object
GHC.Integer.Logarithms.Internals.leadingZeros_closure:
	.quad	GHC.Integer.Logarithms.Internals.leadingZeros_info
	.quad	0
	.quad	0
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.120284754 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.leadingZeros_entry
.type GHC.Integer.Logarithms.Internals.leadingZeros_entry, @object
GHC.Integer.Logarithms.Internals.leadingZeros_entry:
_caGI:
	leaq -32(%rbp),%rax
	cmpq %r15,%rax
	jb _caGJ
_caGK:
	subq $8,%rsp
	movq %r13,%rax
	movq %rbx,%rsi
	movq %rax,%rdi
	xorl %eax,%eax
	call newCAF@plt
	addq $8,%rsp
	testq %rax,%rax
	je _caGB
_caGA:
	movq stg_bh_upd_frame_info@gotpcrel(%rip),%rbx
	movq %rbx,-16(%rbp)
	movq %rax,-8(%rbp)
	leaq block_caGC_info(%rip),%rax
	movq %rax,-24(%rbp)
	movl $256,%ebx
	addq $-24,%rbp
	jmp *stg_newByteArray#@gotpcrel(%rip)
_caGJ:
	jmp *-16(%r13)
_caGB:
	movq (%rbx),%rax
	jmp *(%rax)
	.size GHC.Integer.Logarithms.Internals.leadingZeros_entry, .-GHC.Integer.Logarithms.Internals.leadingZeros_entry


==================== Asm code ====================
2018-03-16 15:53:58.121427681 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.leadingZeros_info
.type GHC.Integer.Logarithms.Internals.leadingZeros_info, @object
GHC.Integer.Logarithms.Internals.leadingZeros_info:
	.quad	GHC.Integer.Logarithms.Internals.leadingZeros_entry
	.quad	0
	.quad	21


==================== Asm code ====================
2018-03-16 15:53:58.122354032 UTC

.section .text
.align 8
_caGC:
_caGC:
	movb $9,16(%rbx)
	movl $1,%eax
	movl $8,%ecx
	movl $2,%edx
_caGT:
	cmpq $256,%rax
	je _uaHe
_caH5:
	cmpq %rdx,%rax
	jge _caH2
_caH3:
	movq %rcx,%rsi
	leaq 16(%rbx),%rdi
	movb %sil,(%rdi,%rax,1)
	incq %rax
	jmp _caGT
_uaHe:
	movq %rbx,(%rbp)
	addq $-8,%rbp
	jmp _caGN
_caH2:
	decq %rcx
	shlq $1,%rdx
	jmp _caGT
	.size _caGC, .-_caGC


==================== Asm code ====================
2018-03-16 15:53:58.123112289 UTC

.section .data.rel.ro
.align 8
.align 1
block_caGC_info:
	.quad	_caGC
	.quad	0
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.124122776 UTC

.section .text
.align 8
_caGN:
_caGN:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _caGS
_caGR:
	leaq GHC.Integer.Logarithms.Internals.BA_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq 8(%rbp),%rax
	movq %rax,(%r12)
	leaq -7(%r12),%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caGS:
	movq $16,904(%r13)
	leaq block_caGN_info(%rip),%rax
	movq %rax,(%rbp)
	jmp *stg_gc_noregs@gotpcrel(%rip)
	.size _caGN, .-_caGN


==================== Asm code ====================
2018-03-16 15:53:58.124953052 UTC

.section .data.rel.ro
.align 8
.align 1
block_caGN_info:
	.quad	_caGN
	.quad	1
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.132171148 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.wordLog2#_closure
.type GHC.Integer.Logarithms.Internals.wordLog2#_closure, @object
GHC.Integer.Logarithms.Internals.wordLog2#_closure:
	.quad	GHC.Integer.Logarithms.Internals.wordLog2#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.133493476 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.wordLog2#_entry
.type GHC.Integer.Logarithms.Internals.wordLog2#_entry, @object
GHC.Integer.Logarithms.Internals.wordLog2#_entry:
_caHI:
	leaq -16(%rbp),%rax
	cmpq %r15,%rax
	jb _caHJ
_caHK:
	leaq block_caHF_info(%rip),%rax
	movq %rax,-16(%rbp)
	leaq GHC.Integer.Logarithms.Internals.leadingZeros_closure(%rip),%rbx
	movq %r14,-8(%rbp)
	addq $-16,%rbp
	testb $7,%bl
	jne _caHF
_caHG:
	movq (%rbx),%rax
	jmp *(%rax)
_caHJ:
	leaq GHC.Integer.Logarithms.Internals.wordLog2#_closure(%rip),%rbx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.wordLog2#_entry, .-GHC.Integer.Logarithms.Internals.wordLog2#_entry


==================== Asm code ====================
2018-03-16 15:53:58.134699298 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.wordLog2#_info
.type GHC.Integer.Logarithms.Internals.wordLog2#_info, @object
GHC.Integer.Logarithms.Internals.wordLog2#_info:
	.quad	GHC.Integer.Logarithms.Internals.wordLog2#_entry
	.quad	0
	.quad	12884901902
	.quad	4294967300
	.quad	SaFZ_srt+24


==================== Asm code ====================
2018-03-16 15:53:58.136101657 UTC

.section .text
.align 8
_caHF:
_caHF:
	movq 8(%rbp),%rax
	movq 7(%rbx),%rbx
	movq %rax,%rcx
	shrq $56,%rcx
	testq %rcx,%rcx
	jne _caI2
_caI6:
	movq %rax,%rcx
	shrq $48,%rcx
	testq %rcx,%rcx
	jne _caIo
_caIs:
	movq %rax,%rcx
	shrq $40,%rcx
	testq %rcx,%rcx
	jne _caIK
_caIO:
	movq %rax,%rcx
	shrq $32,%rcx
	testq %rcx,%rcx
	jne _caJ6
_caJa:
	movq %rax,%rcx
	shrq $24,%rcx
	testq %rcx,%rcx
	jne _caJs
_caJw:
	movq %rax,%rcx
	shrq $16,%rcx
	testq %rcx,%rcx
	jne _caJO
_caJS:
	movq %rax,%rcx
	shrq $8,%rcx
	testq %rcx,%rcx
	jne _caKa
_caKn:
	addq $16,%rbx
	movsbq (%rbx,%rax,1),%rax
	movl $8,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caKa:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $16,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caJO:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $24,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caJs:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $32,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caJ6:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $40,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caIK:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $48,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caIo:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $56,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caI2:
	leaq 16(%rbx),%rax
	movsbq (%rax,%rcx,1),%rax
	movl $64,%ebx
	subq %rax,%rbx
	addq $16,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caHF, .-_caHF


==================== Asm code ====================
2018-03-16 15:53:58.137738637 UTC

.section .data.rel.ro
.align 8
.align 1
block_caHF_info:
	.quad	_caHF
	.quad	65
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.146807106 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_step_closure
.type GHC.Integer.Logarithms.Internals.integerLog2#_step_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2#_step_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_step_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.148258133 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2#_step_entry
.type GHC.Integer.Logarithms.Internals.integerLog2#_step_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2#_step_entry:
_caLh:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _caLi
_uaOJ:
	movq %r14,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	jmp _caL7
_caLi:
	leaq GHC.Integer.Logarithms.Internals.integerLog2#_step_closure(%rip),%rbx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2#_step_entry, .-GHC.Integer.Logarithms.Internals.integerLog2#_step_entry


==================== Asm code ====================
2018-03-16 15:53:58.149224235 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_step_info
.type GHC.Integer.Logarithms.Internals.integerLog2#_step_info, @object
GHC.Integer.Logarithms.Internals.integerLog2#_step_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_step_entry
	.quad	0
	.quad	12884901902
	.quad	8589934605
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.150966941 UTC

.section .text
.align 8
_caL7:
_caL7:
	leaq block_caLa_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 8(%rbp),%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _caLa
_caLb:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _caL7, .-_caL7


==================== Asm code ====================
2018-03-16 15:53:58.152781673 UTC

.section .text
.align 8
_caLa:
_caLa:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caLe
_caLf:
	movq 8(%rbp),%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caLe:
	leaq block_caLm_info(%rip),%rax
	movq %rax,(%rbp)
	movq 15(%rbx),%rax
	movq 7(%rbx),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _caLm
_caLo:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _caLa, .-_caLa


==================== Asm code ====================
2018-03-16 15:53:58.154189862 UTC

.section .data.rel.ro
.align 8
.align 1
block_caLa_info:
	.quad	_caLa
	.quad	194
	.quad	4294967326
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.155270339 UTC

.section .text
.align 8
_caLm:
_caLm:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caLu
_caLz:
	leaq block_caLx_info(%rip),%rax
	movq %rax,(%rbp)
	leaq GHC.Integer.Logarithms.Internals.leadingZeros_closure(%rip),%rbx
	testb $7,%bl
	jne _caLx
_caLA:
	movq (%rbx),%rax
	jmp *(%rax)
_caLu:
	addq $64,8(%rbp)
	movq %rbx,16(%rbp)
	addq $8,%rbp
	jmp _caL7
	.size _caLm, .-_caLm


==================== Asm code ====================
2018-03-16 15:53:58.156500141 UTC

.section .data.rel.ro
.align 8
.align 1
block_caLm_info:
	.quad	_caLm
	.quad	194
	.quad	4294967326
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.158027896 UTC

.section .text
.align 8
_caLx:
_caLx:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 7(%rbx),%rbx
	movq %rcx,%rdx
	shrq $56,%rdx
	testq %rdx,%rdx
	jne _caLW
_caM0:
	movq %rcx,%rdx
	shrq $48,%rdx
	testq %rdx,%rdx
	jne _caMl
_caMp:
	movq %rcx,%rdx
	shrq $40,%rdx
	testq %rdx,%rdx
	jne _caMK
_caMO:
	movq %rcx,%rdx
	shrq $32,%rdx
	testq %rdx,%rdx
	jne _caN9
_caNd:
	movq %rcx,%rdx
	shrq $24,%rdx
	testq %rdx,%rdx
	jne _caNy
_caNC:
	movq %rcx,%rdx
	shrq $16,%rdx
	testq %rdx,%rdx
	jne _caNX
_caO1:
	movq %rcx,%rdx
	shrq $8,%rdx
	testq %rdx,%rdx
	jne _caOm
_caOC:
	addq $16,%rbx
	movsbq (%rbx,%rcx,1),%rbx
	movl $8,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caOm:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $16,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caNX:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $24,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caNy:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $32,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caN9:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $40,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caMK:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $48,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caMl:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $56,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caLW:
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $64,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caLx, .-_caLx


==================== Asm code ====================
2018-03-16 15:53:58.159666851 UTC

.section .data.rel.ro
.align 8
.align 1
block_caLx_info:
	.quad	_caLx
	.quad	194
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.164031657 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_closure
.type GHC.Integer.Logarithms.Internals.integerLog2#_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2#_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.16513517 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2#_entry
.type GHC.Integer.Logarithms.Internals.integerLog2#_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2#_entry:
_caQe:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _caQf
_caQg:
	leaq block_caQ7_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _caQ7
_caQ8:
	movq (%rbx),%rax
	jmp *(%rax)
_caQf:
	leaq GHC.Integer.Logarithms.Internals.integerLog2#_closure(%rip),%rbx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2#_entry, .-GHC.Integer.Logarithms.Internals.integerLog2#_entry


==================== Asm code ====================
2018-03-16 15:53:58.166462423 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2#_info
.type GHC.Integer.Logarithms.Internals.integerLog2#_info, @object
GHC.Integer.Logarithms.Internals.integerLog2#_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_entry
	.quad	0
	.quad	12884901902
	.quad	4294967301
	.quad	SaFZ_srt+40


==================== Asm code ====================
2018-03-16 15:53:58.167404221 UTC

.section .text
.align 8
_caQ7:
_caQ7:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caQc
_caQb:
	movq $-1,%rbx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caQc:
	movq 7(%rbx),%rsi
	xorl %r14d,%r14d
	addq $8,%rbp
	jmp GHC.Integer.Logarithms.Internals.integerLog2#_step_entry
	.size _caQ7, .-_caQ7


==================== Asm code ====================
2018-03-16 15:53:58.168211538 UTC

.section .data.rel.ro
.align 8
.align 1
block_caQ7_info:
	.quad	_caQ7
	.quad	0
	.quad	4294967326
	.quad	SaFZ_srt+40


==================== Asm code ====================
2018-03-16 15:53:58.180316106 UTC

.section .data
.align 8
.align 1
noPower_r9AI_closure:
	.quad	noPower_r9AI_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.182360592 UTC

.section .text
.align 8
noPower_r9AI_entry:
_caQM:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _caQN
_uaUe:
	movq %r14,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	jmp _caQC
_caQN:
	leaq noPower_r9AI_closure(%rip),%rbx
	jmp *-8(%r13)
	.size noPower_r9AI_entry, .-noPower_r9AI_entry


==================== Asm code ====================
2018-03-16 15:53:58.183757264 UTC

.section .data.rel.ro
.align 8
.align 1
noPower_r9AI_info:
	.quad	noPower_r9AI_entry
	.quad	0
	.quad	38654705678
	.quad	8589934605
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.18523377 UTC

.section .text
.align 8
_caQC:
_caQC:
	leaq block_caQF_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 8(%rbp),%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _caQF
_caQG:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _caQC, .-_caQC


==================== Asm code ====================
2018-03-16 15:53:58.187450138 UTC

.section .text
.align 8
_caQF:
_caQF:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caQJ
_caQK:
	movl $1,%r14d
	movq 8(%rbp),%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caQJ:
	leaq block_caQR_info(%rip),%rax
	movq %rax,(%rbp)
	movq 15(%rbx),%rax
	movq 7(%rbx),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _caQR
_caQT:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _caQF, .-_caQF


==================== Asm code ====================
2018-03-16 15:53:58.188239086 UTC

.section .data.rel.ro
.align 8
.align 1
block_caQF_info:
	.quad	_caQF
	.quad	194
	.quad	4294967326
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.189215149 UTC

.section .text
.align 8
_caQR:
_caQR:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caQZ
_caR4:
	leaq block_caR2_info(%rip),%rax
	movq %rax,(%rbp)
	leaq GHC.Integer.Logarithms.Internals.leadingZeros_closure(%rip),%rbx
	testb $7,%bl
	jne _caR2
_caR5:
	movq (%rbx),%rax
	jmp *(%rax)
_caQZ:
	addq $64,8(%rbp)
	movq %rbx,16(%rbp)
	addq $8,%rbp
	jmp _caQC
	.size _caQR, .-_caQR


==================== Asm code ====================
2018-03-16 15:53:58.190295685 UTC

.section .data.rel.ro
.align 8
.align 1
block_caQR_info:
	.quad	_caQR
	.quad	194
	.quad	4294967326
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.191621556 UTC

.section .text
.align 8
_caR2:
_caR2:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 7(%rbx),%rbx
	movq %rcx,%rdx
	shrq $56,%rdx
	testq %rdx,%rdx
	jne _caRf
_caRl:
	movq %rcx,%rdx
	shrq $48,%rdx
	testq %rdx,%rdx
	jne _caRu
_caRA:
	movq %rcx,%rdx
	shrq $40,%rdx
	testq %rdx,%rdx
	jne _caRJ
_caRP:
	movq %rcx,%rdx
	shrq $32,%rdx
	testq %rdx,%rdx
	jne _caRY
_caS4:
	movq %rcx,%rdx
	shrq $24,%rdx
	testq %rdx,%rdx
	jne _caSd
_caSj:
	movq %rcx,%rdx
	shrq $16,%rdx
	testq %rdx,%rdx
	jne _caSs
_caSy:
	movq %rcx,%rdx
	shrq $8,%rdx
	testq %rdx,%rdx
	jne _caSH
_caSN:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rcx,1),%rbx
	movl $8,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caSH:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $16,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caSs:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $24,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caSd:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $32,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caRY:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $40,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caRJ:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $48,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caRu:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $56,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caRf:
	movl $1,%r14d
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $64,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caR2, .-_caR2


==================== Asm code ====================
2018-03-16 15:53:58.193036589 UTC

.section .data.rel.ro
.align 8
.align 1
block_caR2_info:
	.quad	_caR2
	.quad	194
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.202499502 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.203494243 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry:
_caVJ:
	leaq -24(%rbp),%rax
	cmpq %r15,%rax
	jb _caVK
_ub0s:
	movq %r14,-16(%rbp)
	movq %rsi,-8(%rbp)
	addq $-16,%rbp
	jmp _caVz
_caVK:
	leaq GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure(%rip),%rbx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry, .-GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry


==================== Asm code ====================
2018-03-16 15:53:58.204575717 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry
	.quad	0
	.quad	107374182414
	.quad	8589934605
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.205888758 UTC

.section .text
.align 8
_caVz:
_caVz:
	leaq block_caVC_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq 8(%rbp),%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _caVC
_caVD:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _caVz, .-_caVz


==================== Asm code ====================
2018-03-16 15:53:58.20713078 UTC

.section .text
.align 8
_caVC:
_caVC:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caVG
_caVH:
	movl $1,%r14d
	movq 8(%rbp),%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caVG:
	leaq block_caVO_info(%rip),%rax
	movq %rax,(%rbp)
	movq 15(%rbx),%rax
	movq 7(%rbx),%rbx
	movq %rax,16(%rbp)
	testb $7,%bl
	jne _caVO
_caVQ:
	movq (%rbx),%rax
	jmp *(%rax)
	.size _caVC, .-_caVC


==================== Asm code ====================
2018-03-16 15:53:58.208286031 UTC

.section .data.rel.ro
.align 8
.align 1
block_caVC_info:
	.quad	_caVC
	.quad	194
	.quad	38654705694
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.209620951 UTC

.section .text
.align 8
_caVO:
_caVO:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _caW0
_caW5:
	leaq block_caW3_info(%rip),%rax
	movq %rax,(%rbp)
	leaq GHC.Integer.Logarithms.Internals.leadingZeros_closure(%rip),%rbx
	testb $7,%bl
	jne _caW3
_caW6:
	movq (%rbx),%rax
	jmp *(%rax)
_caVY:
	addq $64,%rax
	movq %rax,8(%rbp)
	movq %rbx,16(%rbp)
	addq $8,%rbp
	jmp _caVz
_caW0:
	movq 8(%rbp),%rax
	cmpq $0,16(%rbp)
	je _caVY
_caVX:
	movq %rbx,%rsi
	leaq 64(%rax),%r14
	addq $24,%rbp
	jmp noPower_r9AI_entry
	.size _caVO, .-_caVO


==================== Asm code ====================
2018-03-16 15:53:58.210809606 UTC

.section .data.rel.ro
.align 8
.align 1
block_caVO_info:
	.quad	_caVO
	.quad	194
	.quad	38654705694
	.quad	SaFZ_srt+32


==================== Asm code ====================
2018-03-16 15:53:58.213198093 UTC

.section .text
.align 8
_caW3:
_caW3:
	movq 8(%rbp),%rax
	movq 16(%rbp),%rcx
	movq 7(%rbx),%rbx
	movq %rcx,%rdx
	shrq $56,%rdx
	testq %rdx,%rdx
	jne _caWg
_caWm:
	movq %rcx,%rdx
	shrq $48,%rdx
	testq %rdx,%rdx
	jne _caWv
_caWB:
	movq %rcx,%rdx
	shrq $40,%rdx
	testq %rdx,%rdx
	jne _caWK
_caWQ:
	movq %rcx,%rdx
	shrq $32,%rdx
	testq %rdx,%rdx
	jne _caWZ
_caX5:
	movq %rcx,%rdx
	shrq $24,%rdx
	testq %rdx,%rdx
	jne _caXe
_caXk:
	movq %rcx,%rdx
	shrq $16,%rdx
	testq %rdx,%rdx
	jne _caXt
_caXz:
	movq %rcx,%rdx
	shrq $8,%rdx
	testq %rdx,%rdx
	jne _caXI
_caXO:
	leaq -1(%rcx),%rdx
	movq %rcx,%r14
	andq %rdx,%r14
	addq $16,%rbx
	movsbq (%rbx,%rcx,1),%rbx
	movl $8,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caXI:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $16,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caXt:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $24,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caXe:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $32,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caWZ:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $40,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caWK:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $48,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caWv:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $56,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_caWg:
	leaq -1(%rcx),%rsi
	movq %rcx,%r14
	andq %rsi,%r14
	addq $16,%rbx
	movsbq (%rbx,%rdx,1),%rbx
	movl $64,%ecx
	subq %rbx,%rcx
	movq %rax,%rbx
	addq %rcx,%rbx
	addq $24,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
	.size _caW3, .-_caW3


==================== Asm code ====================
2018-03-16 15:53:58.216178934 UTC

.section .data.rel.ro
.align 8
.align 1
block_caW3_info:
	.quad	_caW3
	.quad	194
	.quad	30


==================== Asm code ====================
2018-03-16 15:53:58.221121493 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info
	.quad	0


==================== Asm code ====================
2018-03-16 15:53:58.22253685 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry:
_cb2e:
	leaq -8(%rbp),%rax
	cmpq %r15,%rax
	jb _cb2f
_cb2g:
	leaq block_cb27_info(%rip),%rax
	movq %rax,-8(%rbp)
	movq %r14,%rbx
	addq $-8,%rbp
	testb $7,%bl
	jne _cb27
_cb28:
	movq (%rbx),%rax
	jmp *(%rax)
_cb2f:
	leaq GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure(%rip),%rbx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry, .-GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry


==================== Asm code ====================
2018-03-16 15:53:58.22371755 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info
.type GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info, @object
GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_info:
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_entry
	.quad	0
	.quad	12884901902
	.quad	4294967301
	.quad	SaFZ_srt+64


==================== Asm code ====================
2018-03-16 15:53:58.22465891 UTC

.section .text
.align 8
_cb27:
_cb27:
	movq %rbx,%rax
	andl $7,%eax
	cmpq $1,%rax
	je _cb2c
_cb2b:
	movl $1,%r14d
	movq $-1,%rbx
	addq $8,%rbp
	movq (%rbp),%rax
	jmp *(%rax)
_cb2c:
	movq 7(%rbx),%rsi
	xorl %r14d,%r14d
	addq $8,%rbp
	jmp GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_entry
	.size _cb27, .-_cb27


==================== Asm code ====================
2018-03-16 15:53:58.225522888 UTC

.section .data.rel.ro
.align 8
.align 1
block_cb27_info:
	.quad	_cb27
	.quad	0
	.quad	4294967326
	.quad	SaFZ_srt+64


==================== Asm code ====================
2018-03-16 15:53:58.227881496 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule4_bytes
.type GHC.Integer.Logarithms.Internals.$trModule4_bytes, @object
GHC.Integer.Logarithms.Internals.$trModule4_bytes:
	.asciz "integer-simple"


==================== Asm code ====================
2018-03-16 15:53:58.230191913 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule3_closure
.type GHC.Integer.Logarithms.Internals.$trModule3_closure, @object
GHC.Integer.Logarithms.Internals.$trModule3_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule4_bytes


==================== Asm code ====================
2018-03-16 15:53:58.232172536 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule2_bytes
.type GHC.Integer.Logarithms.Internals.$trModule2_bytes, @object
GHC.Integer.Logarithms.Internals.$trModule2_bytes:
	.asciz "GHC.Integer.Logarithms.Internals"


==================== Asm code ====================
2018-03-16 15:53:58.23433001 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule1_closure
.type GHC.Integer.Logarithms.Internals.$trModule1_closure, @object
GHC.Integer.Logarithms.Internals.$trModule1_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule2_bytes


==================== Asm code ====================
2018-03-16 15:53:58.236477019 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$trModule_closure
.type GHC.Integer.Logarithms.Internals.$trModule_closure, @object
GHC.Integer.Logarithms.Internals.$trModule_closure:
	.quad	GHC.Types.Module_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule3_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$trModule1_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:58.238991088 UTC

.section .data
.align 8
.align 1
$krep_r9AJ_closure:
	.quad	GHC.Types.KindRepTyConApp_con_info
	.quad	GHC.Types.$tcByteArray#_closure
	.quad	GHC.Types.[]_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:58.241148599 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$tcBA2_bytes
.type GHC.Integer.Logarithms.Internals.$tcBA2_bytes, @object
GHC.Integer.Logarithms.Internals.$tcBA2_bytes:
	.asciz "BA"


==================== Asm code ====================
2018-03-16 15:53:58.243438966 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tcBA1_closure
.type GHC.Integer.Logarithms.Internals.$tcBA1_closure, @object
GHC.Integer.Logarithms.Internals.$tcBA1_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$tcBA2_bytes


==================== Asm code ====================
2018-03-16 15:53:58.245858762 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tcBA_closure
.type GHC.Integer.Logarithms.Internals.$tcBA_closure, @object
GHC.Integer.Logarithms.Internals.$tcBA_closure:
	.quad	GHC.Types.TyCon_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$tcBA1_closure+1
	.quad	GHC.Types.krep$*_closure
	.quad	1270308961569198254
	.quad	6805106280991229347
	.quad	0
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:58.247868291 UTC

.section .data
.align 8
.align 1
$krep1_r9AK_closure:
	.quad	GHC.Types.KindRepTyConApp_con_info
	.quad	GHC.Integer.Logarithms.Internals.$tcBA_closure+1
	.quad	GHC.Types.[]_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:58.250302085 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA1_closure
.type GHC.Integer.Logarithms.Internals.$tc'BA1_closure, @object
GHC.Integer.Logarithms.Internals.$tc'BA1_closure:
	.quad	GHC.Types.KindRepFun_con_info
	.quad	$krep_r9AJ_closure+1
	.quad	$krep1_r9AK_closure+1
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:58.252472058 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA3_bytes
.type GHC.Integer.Logarithms.Internals.$tc'BA3_bytes, @object
GHC.Integer.Logarithms.Internals.$tc'BA3_bytes:
	.asciz "'BA"


==================== Asm code ====================
2018-03-16 15:53:58.254794283 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA2_closure
.type GHC.Integer.Logarithms.Internals.$tc'BA2_closure, @object
GHC.Integer.Logarithms.Internals.$tc'BA2_closure:
	.quad	GHC.Types.TrNameS_con_info
	.quad	GHC.Integer.Logarithms.Internals.$tc'BA3_bytes


==================== Asm code ====================
2018-03-16 15:53:58.257352269 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.$tc'BA_closure
.type GHC.Integer.Logarithms.Internals.$tc'BA_closure, @object
GHC.Integer.Logarithms.Internals.$tc'BA_closure:
	.quad	GHC.Types.TyCon_con_info
	.quad	GHC.Integer.Logarithms.Internals.$trModule_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$tc'BA2_closure+1
	.quad	GHC.Integer.Logarithms.Internals.$tc'BA1_closure+4
	.quad	-6043945471323766060
	.quad	5679508278348334299
	.quad	0
	.quad	3


==================== Asm code ====================
2018-03-16 15:53:58.261088824 UTC

.section .data
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.BA_closure
.type GHC.Integer.Logarithms.Internals.BA_closure, @object
GHC.Integer.Logarithms.Internals.BA_closure:
	.quad	GHC.Integer.Logarithms.Internals.BA_info


==================== Asm code ====================
2018-03-16 15:53:58.26216446 UTC

.section .text
.align 8
GHC.Integer.Logarithms.Internals.BA_entry:
_cb2U:
	addq $16,%r12
	cmpq 856(%r13),%r12
	ja _cb2Y
_cb2X:
	leaq GHC.Integer.Logarithms.Internals.BA_con_info(%rip),%rax
	movq %rax,-8(%r12)
	movq %r14,(%r12)
	leaq -7(%r12),%rbx
	movq (%rbp),%rax
	jmp *(%rax)
_cb2Y:
	movq $16,904(%r13)
	leaq GHC.Integer.Logarithms.Internals.BA_closure(%rip),%rbx
	jmp *-8(%r13)
	.size GHC.Integer.Logarithms.Internals.BA_entry, .-GHC.Integer.Logarithms.Internals.BA_entry


==================== Asm code ====================
2018-03-16 15:53:58.263265889 UTC

.section .data.rel.ro
.align 8
.align 1
GHC.Integer.Logarithms.Internals.BA_info:
	.quad	GHC.Integer.Logarithms.Internals.BA_entry
	.quad	0
	.quad	14
	.quad	4294967301


==================== Asm code ====================
2018-03-16 15:53:58.266348448 UTC

.section .rodata.str,"aMS",@progbits,1
.align 1
.align 1
ib36_str:
	.asciz "integer-simple:GHC.Integer.Logarithms.Internals.BA"


==================== Asm code ====================
2018-03-16 15:53:58.267175146 UTC

.section .text
.align 8
.globl GHC.Integer.Logarithms.Internals.BA_con_entry
.type GHC.Integer.Logarithms.Internals.BA_con_entry, @object
GHC.Integer.Logarithms.Internals.BA_con_entry:
_cb35:
	incq %rbx
	movq (%rbp),%rax
	jmp *(%rax)
	.size GHC.Integer.Logarithms.Internals.BA_con_entry, .-GHC.Integer.Logarithms.Internals.BA_con_entry


==================== Asm code ====================
2018-03-16 15:53:58.26796866 UTC

.section .data.rel.ro
.align 8
.align 1
.globl GHC.Integer.Logarithms.Internals.BA_con_info
.type GHC.Integer.Logarithms.Internals.BA_con_info, @object
GHC.Integer.Logarithms.Internals.BA_con_info:
	.quad	GHC.Integer.Logarithms.Internals.BA_con_entry
	.quad	1
	.quad	2
	.quad	ib36_str


==================== Asm code ====================
2018-03-16 15:53:58.270608522 UTC

.section .data.rel.ro
.align 8
.align 1
SaFZ_srt:
	.quad	GHC.Integer.Type.plusInteger_closure
	.quad	GHC.Integer.Type.minusInteger_closure
	.quad	GHC.Integer.Logarithms.Internals.roundingMode#_closure
	.quad	GHC.Integer.Logarithms.Internals.wordLog2#_closure
	.quad	GHC.Integer.Logarithms.Internals.leadingZeros_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_step_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2#_closure
	.quad	noPower_r9AI_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_couldBe_closure
	.quad	GHC.Integer.Logarithms.Internals.integerLog2IsPowerOf2#_closure

