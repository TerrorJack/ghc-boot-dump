
==================== Pre unarise: ====================
2018-03-16 15:53:48.807663583 UTC

GHC.Integer.Type.$WPositive [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s3By]
        case dt_s3By of dt_s3Bz {
          __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Bz];
        };

GHC.Integer.Type.$WNegative [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s3BA]
        case dt_s3BA of dt_s3BB {
          __DEFAULT -> GHC.Integer.Type.Negative [dt_s3BB];
        };

GHC.Integer.Type.$WSome [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s3BC dt_s3BD]
        case dt_s3BD of dt_s3BE {
          __DEFAULT -> GHC.Integer.Type.Some [dt_s3BC dt_s3BE];
        };

GHC.Integer.Type.errorPositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [47## GHC.Integer.Type.None];

GHC.Integer.Type.errorInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.errorPositive];

GHC.Integer.Type.wordToInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s3BF]
        case w_s3BF of wild_s3BG {
          __DEFAULT ->
              let {
                sat_s3BH [Occ=Once] :: GHC.Integer.Type.Positive
                [LclId] =
                    CCCS GHC.Integer.Type.Some! [wild_s3BG GHC.Integer.Type.None];
              } in  GHC.Integer.Type.Positive [sat_s3BH];
          0## -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.integerToWord [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3BI]
        case ds_s3BI of {
          GHC.Integer.Type.Positive ds1_s3BK [Occ=Once!] ->
              case ds1_s3BK of {
                GHC.Integer.Type.Some w_s3BM [Occ=Once] _ [Occ=Dead] -> w_s3BM;
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Negative ds1_s3BO [Occ=Once!] ->
              case ds1_s3BO of {
                GHC.Integer.Type.Some w_s3BQ [Occ=Once] _ [Occ=Dead] ->
                    minusWord# [0## w_s3BQ];
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Naught -> 0##;
        };

GHC.Integer.Type.integerToInt [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [i_s3BS]
        case GHC.Integer.Type.integerToWord i_s3BS of wild_s3BT {
          __DEFAULT -> word2Int# [wild_s3BT];
        };

GHC.Integer.Type.hashInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.integerToInt eta_B1;

GHC.Integer.Type.flipBitsDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3BU]
        case ds_s3BU of {
          GHC.Integer.Type.Some w_s3BW [Occ=Once] ws_s3BX [Occ=Once] ->
              case GHC.Integer.Type.flipBitsDigits ws_s3BX of dt_s3BY {
                __DEFAULT ->
                    case not# [w_s3BW] of sat_s3BZ {
                      __DEFAULT -> GHC.Integer.Type.Some [sat_s3BZ dt_s3BY];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.flipBits1
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3C0] GHC.Integer.Type.flipBitsDigits ds_s3C0;

GHC.Integer.Type.flipBits
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.flipBits1 eta_B1;

GHC.Integer.Type.negateInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3C1]
        case ds_s3C1 of {
          GHC.Integer.Type.Positive p_s3C3 [Occ=Once] ->
              GHC.Integer.Type.Negative [p_s3C3];
          GHC.Integer.Type.Negative p_s3C4 [Occ=Once] ->
              GHC.Integer.Type.Positive [p_s3C4];
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.smallInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [i_s3C5]
        case >=# [i_s3C5 0#] of {
          __DEFAULT ->
              case negateInt# [i_s3C5] of sat_s3C7 {
                __DEFAULT ->
                    case int2Word# [sat_s3C7] of sat_s3C8 {
                      __DEFAULT ->
                          case GHC.Integer.Type.wordToInteger sat_s3C8 of sat_s3C9 {
                            __DEFAULT -> GHC.Integer.Type.negateInteger sat_s3C9;
                          };
                    };
              };
          1# ->
              case int2Word# [i_s3C5] of sat_s3Ca {
                __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s3Ca;
              };
        };

GHC.Integer.Type.decodeFloatInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [f2_s3Cb]
        case decodeFloat_Int# [f2_s3Cb] of {
          (#,#) ipv_s3Cd [Occ=Once] ipv1_s3Ce [Occ=Once] ->
              let {
                sat_s3Cf [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s3Cd] \u [] GHC.Integer.Type.smallInteger ipv_s3Cd;
              } in  (#,#) [sat_s3Cf ipv1_s3Ce];
        };

GHC.Integer.Type.absInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Cg]
        case ds_s3Cg of wild_s3Ch {
          __DEFAULT -> wild_s3Ch;
          GHC.Integer.Type.Negative x_s3Ci [Occ=Once] ->
              GHC.Integer.Type.Positive [x_s3Ci];
        };

GHC.Integer.Type.onePositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [1## GHC.Integer.Type.None];

GHC.Integer.Type.negativeOneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Negative! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.oneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.signumInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Cj]
        case ds_s3Cj of {
          GHC.Integer.Type.Positive _ [Occ=Dead] ->
              GHC.Integer.Type.oneInteger;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              GHC.Integer.Type.negativeOneInteger;
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.halfBoundUp :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3Cn] case ds_s3Cn of { () -> 9223372036854775808##; };

GHC.Integer.Type.fullBound :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3Cp] case ds_s3Cp of { () -> 18446744073709551615##; };

GHC.Integer.Type.$wsuccPositive [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s3Cr]
        case w_s3Cr of {
          GHC.Integer.Type.Some w1_s3Ct [Occ=Once!] ws_s3Cu [Occ=Once*] ->
              case w1_s3Ct of wild1_s3Cv {
                __DEFAULT ->
                    case plusWord# [wild1_s3Cv 1##] of sat_s3Cw {
                      __DEFAULT -> (#,#) [sat_s3Cw ws_s3Cu];
                    };
                18446744073709551615## ->
                    case GHC.Integer.Type.$wsuccPositive ws_s3Cu of {
                      (#,#) ww1_s3Cy [Occ=Once] ww2_s3Cz [Occ=Once] ->
                          let {
                            sat_s3CA [Occ=Once] :: GHC.Integer.Type.Digits
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [ww1_s3Cy ww2_s3Cz];
                          } in  (#,#) [0## sat_s3CA];
                    };
              };
          GHC.Integer.Type.None -> (#,#) [1## GHC.Integer.Type.None];
        };

GHC.Integer.Type.succPositive [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m1, Unf=OtherCon []] =
    [] \r [w_s3CB]
        case GHC.Integer.Type.$wsuccPositive w_s3CB of {
          (#,#) ww1_s3CD [Occ=Once] ww2_s3CE [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s3CD ww2_s3CE];
        };

lvl_r3Bo :: GHC.Integer.Type.Positive
[GblId] =
    [] \u []
        case GHC.Integer.Type.$wsuccPositive GHC.Integer.Type.None of {
          (#,#) ww1_s3CG [Occ=Once] ww2_s3CH [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s3CG ww2_s3CH];
        };

GHC.Integer.Type.plusPositive_addWithCarry [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [c_s3CI ds_s3CJ ds1_s3CK]
        case ds_s3CJ of wild_s3CL {
          GHC.Integer.Type.Some ds2_s3CM ds3_s3CN [Occ=Once*] ->
              case ds1_s3CK of wild1_s3CO {
                GHC.Integer.Type.Some y_s3CP ys'_s3CQ [Occ=Once*] ->
                    case ltWord# [ds2_s3CM y_s3CP] of {
                      __DEFAULT ->
                          case geWord# [y_s3CP 9223372036854775808##] of {
                            __DEFAULT ->
                                case geWord# [ds2_s3CM 9223372036854775808##] of {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusPositive_addWithCarry
                                              0## ds3_s3CN ys'_s3CQ
                                      of
                                      dt_s3CU
                                      { __DEFAULT ->
                                            case plusWord# [ds2_s3CM y_s3CP] of sat_s3CV {
                                              __DEFAULT ->
                                                  case plusWord# [sat_s3CV c_s3CI] of sat_s3CW {
                                                    __DEFAULT ->
                                                        GHC.Integer.Type.Some [sat_s3CW dt_s3CU];
                                                  };
                                            };
                                      };
                                  1# ->
                                      case minusWord# [ds2_s3CM 9223372036854775808##] of sat_s3CY {
                                        __DEFAULT ->
                                            case plusWord# [sat_s3CY y_s3CP] of sat_s3CZ {
                                              __DEFAULT ->
                                                  case
                                                      plusWord# [sat_s3CZ c_s3CI]
                                                  of
                                                  z_s3CX [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case
                                                            ltWord# [z_s3CX 9223372036854775808##]
                                                        of
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      1## ds3_s3CN ys'_s3CQ
                                                              of
                                                              dt_s3D1
                                                              { __DEFAULT ->
                                                                    case
                                                                        minusWord# [z_s3CX
                                                                                    9223372036854775808##]
                                                                    of
                                                                    sat_s3D2
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s3D2
                                                                                                 dt_s3D1];
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      0## ds3_s3CN ys'_s3CQ
                                                              of
                                                              dt_s3D3
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusWord# [z_s3CX
                                                                                   9223372036854775808##]
                                                                    of
                                                                    sat_s3D4
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s3D4
                                                                                                 dt_s3D3];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Integer.Type.plusPositive_addWithCarry 1## ds3_s3CN ys'_s3CQ
                                of
                                dt_s3D5
                                { __DEFAULT ->
                                      case minusWord# [y_s3CP 9223372036854775808##] of sat_s3D7 {
                                        __DEFAULT ->
                                            case
                                                minusWord# [ds2_s3CM 9223372036854775808##]
                                            of
                                            sat_s3D6
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s3D6 sat_s3D7] of sat_s3D8 {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s3D8 c_s3CI]
                                                        of
                                                        sat_s3D9
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s3D9
                                                                                     dt_s3D5];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          GHC.Integer.Type.plusPositive_addWithCarry
                              c_s3CI wild1_s3CO wild_s3CL;
                    };
                GHC.Integer.Type.None ->
                    case c_s3CI of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild_s3CL of {
                            (#,#) ww1_s3Dc [Occ=Once] ww2_s3Dd [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s3Dc ww2_s3Dd];
                          };
                      0## -> wild_s3CL;
                    };
              };
          GHC.Integer.Type.None ->
              case ds1_s3CK of wild1_s3De {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    case c_s3CI of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild1_s3De of {
                            (#,#) ww1_s3Dj [Occ=Once] ww2_s3Dk [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s3Dj ww2_s3Dk];
                          };
                      0## -> wild1_s3De;
                    };
                GHC.Integer.Type.None ->
                    case c_s3CI of {
                      __DEFAULT -> lvl_r3Bo;
                      0## -> GHC.Integer.Type.None [];
                    };
              };
        };

GHC.Integer.Type.plusPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x0_s3Dm y0_s3Dn]
        GHC.Integer.Type.plusPositive_addWithCarry 0## x0_s3Dm y0_s3Dn;

GHC.Integer.Type.minusPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Do ds1_s3Dp]
        case ds_s3Do of wild_s3Dq {
          GHC.Integer.Type.Some x_s3Dr xs_s3Ds [Occ=Once*] ->
              case ds1_s3Dp of {
                GHC.Integer.Type.Some y_s3Du ys_s3Dv [Occ=Once*] ->
                    case eqWord# [x_s3Dr y_s3Du] of {
                      __DEFAULT ->
                          case gtWord# [x_s3Dr y_s3Du] of {
                            __DEFAULT ->
                                case GHC.Integer.Type.minusPositive xs_s3Ds ys_s3Dv of sat_s3Dy {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              sat_s3Dy GHC.Integer.Type.onePositive
                                      of
                                      dt_s3Dz
                                      { __DEFAULT ->
                                            case
                                                minusWord# [18446744073709551615## y_s3Du]
                                            of
                                            sat_s3DA
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s3DA 1##] of sat_s3DB {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s3DB x_s3Dr]
                                                        of
                                                        sat_s3DC
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s3DC
                                                                                     dt_s3Dz];
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case GHC.Integer.Type.minusPositive xs_s3Ds ys_s3Dv of dt_s3DD {
                                  __DEFAULT ->
                                      case minusWord# [x_s3Dr y_s3Du] of sat_s3DE {
                                        __DEFAULT -> GHC.Integer.Type.Some [sat_s3DE dt_s3DD];
                                      };
                                };
                          };
                      1# ->
                          case GHC.Integer.Type.minusPositive xs_s3Ds ys_s3Dv of wild2_s3DF {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.Some [0## wild2_s3DF];
                            GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                          };
                    };
                GHC.Integer.Type.None -> wild_s3Dq;
              };
          GHC.Integer.Type.None ->
              case ds1_s3Dp of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Integer.Type.errorPositive;
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.twosComplementPositive1
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [p_s3DL]
        case
            GHC.Integer.Type.minusPositive p_s3DL GHC.Integer.Type.onePositive
        of
        sat_s3DM
        { __DEFAULT -> GHC.Integer.Type.flipBitsDigits sat_s3DM;
        };

GHC.Integer.Type.twosComplementPositive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.twosComplementPositive1 eta_B1;

GHC.Integer.Type.lowHalfMask :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3DN] case ds_s3DN of { () -> 4294967295##; };

GHC.Integer.Type.highHalfShift :: () -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3DP] case ds_s3DP of { () -> 32#; };

GHC.Integer.Type.splitHalves
  :: GHC.Integer.Type.Digit
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digit #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [x_s3DR]
        case and# [x_s3DR 4294967295##] of sat_s3DT {
          __DEFAULT ->
              case uncheckedShiftRL# [x_s3DR 32#] of sat_s3DS {
                __DEFAULT -> (#,#) [sat_s3DS sat_s3DT];
              };
        };

GHC.Integer.Type.doubleFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3DU]
        case ds_s3DU of {
          GHC.Integer.Type.Some w_s3DW ds1_s3DX [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive ds1_s3DX of wild1_s3DY {
                __DEFAULT ->
                    case and# [w_s3DW 4294967295##] of sat_s3E7 {
                      __DEFAULT ->
                          case word2Int# [sat_s3E7] of sat_s3E8 {
                            __DEFAULT ->
                                case int2Double# [sat_s3E8] of sat_s3E9 {
                                  __DEFAULT ->
                                      case **## [2.0## 32.0##] of sat_s3E4 {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s3DW 32#] of sat_s3E1 {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s3E1] of sat_s3E2 {
                                                    __DEFAULT ->
                                                        case int2Double# [sat_s3E2] of sat_s3E3 {
                                                          __DEFAULT ->
                                                              case
                                                                  *## [sat_s3E3 sat_s3E4]
                                                              of
                                                              sat_s3E5
                                                              { __DEFAULT ->
                                                                    case
                                                                        **## [2.0## 64.0##]
                                                                    of
                                                                    sat_s3DZ
                                                                    { __DEFAULT ->
                                                                          case
                                                                              *## [wild1_s3DY
                                                                                   sat_s3DZ]
                                                                          of
                                                                          sat_s3E0
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +## [sat_s3E0
                                                                                         sat_s3E5]
                                                                                of
                                                                                sat_s3E6
                                                                                { __DEFAULT ->
                                                                                      +## [sat_s3E6
                                                                                           sat_s3E9];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0##;
        };

GHC.Integer.Type.doubleFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Ea]
        case ds_s3Ea of {
          GHC.Integer.Type.Positive p_s3Ec [Occ=Once] ->
              GHC.Integer.Type.doubleFromPositive p_s3Ec;
          GHC.Integer.Type.Negative p_s3Ed [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive p_s3Ed of wild1_s3Ee {
                __DEFAULT -> negateDouble# [wild1_s3Ee];
              };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.floatFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Ef]
        case ds_s3Ef of {
          GHC.Integer.Type.Some w_s3Eh ds1_s3Ei [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive ds1_s3Ei of wild1_s3Ej {
                __DEFAULT ->
                    case and# [w_s3Eh 4294967295##] of sat_s3Es {
                      __DEFAULT ->
                          case word2Int# [sat_s3Es] of sat_s3Et {
                            __DEFAULT ->
                                case int2Float# [sat_s3Et] of sat_s3Eu {
                                  __DEFAULT ->
                                      case powerFloat# [2.0# 32.0#] of sat_s3Ep {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s3Eh 32#] of sat_s3Em {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s3Em] of sat_s3En {
                                                    __DEFAULT ->
                                                        case int2Float# [sat_s3En] of sat_s3Eo {
                                                          __DEFAULT ->
                                                              case
                                                                  timesFloat# [sat_s3Eo sat_s3Ep]
                                                              of
                                                              sat_s3Eq
                                                              { __DEFAULT ->
                                                                    case
                                                                        powerFloat# [2.0# 64.0#]
                                                                    of
                                                                    sat_s3Ek
                                                                    { __DEFAULT ->
                                                                          case
                                                                              timesFloat# [wild1_s3Ej
                                                                                           sat_s3Ek]
                                                                          of
                                                                          sat_s3El
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    plusFloat# [sat_s3El
                                                                                                sat_s3Eq]
                                                                                of
                                                                                sat_s3Er
                                                                                { __DEFAULT ->
                                                                                      plusFloat# [sat_s3Er
                                                                                                  sat_s3Eu];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0#;
        };

GHC.Integer.Type.floatFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Ev]
        case ds_s3Ev of {
          GHC.Integer.Type.Positive p_s3Ex [Occ=Once] ->
              GHC.Integer.Type.floatFromPositive p_s3Ex;
          GHC.Integer.Type.Negative p_s3Ey [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive p_s3Ey of wild1_s3Ez {
                __DEFAULT -> negateFloat# [wild1_s3Ez];
              };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.timesDigit
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digit -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s3EA y_s3EB]
        case uncheckedShiftRL# [x_s3EA 32#] of ds_s3EC [Dmd=<S,U>] {
          __DEFAULT ->
              case and# [y_s3EB 4294967295##] of ds1_s3ED [Dmd=<S,U>] {
                __DEFAULT ->
                    case timesWord# [ds_s3EC ds1_s3ED] of x1_s3EE [Dmd=<S,U>] {
                      __DEFAULT ->
                          case and# [x_s3EA 4294967295##] of ds2_s3EF [Dmd=<S,U>] {
                            __DEFAULT ->
                                case uncheckedShiftRL# [y_s3EB 32#] of ds3_s3EG [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case timesWord# [ds2_s3EF ds3_s3EG] of x2_s3EH [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case timesWord# [ds2_s3EF ds1_s3ED] of sat_s3EQ {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3ER [Occ=Once] :: GHC.Integer.Type.Positive
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [sat_s3EQ
                                                                                     GHC.Integer.Type.None];
                                                  } in 
                                                    case and# [x2_s3EH 4294967295##] of sat_s3EM {
                                                      __DEFAULT ->
                                                          case
                                                              uncheckedShiftL# [sat_s3EM 32#]
                                                          of
                                                          sat_s3EN
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s3EO [Occ=Once]
                                                                    :: GHC.Integer.Type.Positive
                                                                  [LclId] =
                                                                      CCCS GHC.Integer.Type.Some! [sat_s3EN
                                                                                                   GHC.Integer.Type.None];
                                                                } in 
                                                                  case
                                                                      and# [x1_s3EE 4294967295##]
                                                                  of
                                                                  sat_s3EJ
                                                                  { __DEFAULT ->
                                                                        case
                                                                            uncheckedShiftL# [sat_s3EJ
                                                                                              32#]
                                                                        of
                                                                        sat_s3EK
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s3EL [Occ=Once]
                                                                                  :: GHC.Integer.Type.Positive
                                                                                [LclId] =
                                                                                    CCCS GHC.Integer.Type.Some! [sat_s3EK
                                                                                                                 GHC.Integer.Type.None];
                                                                              } in 
                                                                                case
                                                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                                                        0##
                                                                                        sat_s3EL
                                                                                        sat_s3EO
                                                                                of
                                                                                sat_s3EP
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          GHC.Integer.Type.plusPositive_addWithCarry
                                                                                              0##
                                                                                              sat_s3EP
                                                                                              sat_s3ER
                                                                                      of
                                                                                      low_s3EI [Dmd=<S,1*U>]
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                uncheckedShiftRL# [x2_s3EH
                                                                                                                   32#]
                                                                                            of
                                                                                            sat_s3EV
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      uncheckedShiftRL# [x1_s3EE
                                                                                                                         32#]
                                                                                                  of
                                                                                                  sat_s3ET
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            timesWord# [ds_s3EC
                                                                                                                        ds3_s3EG]
                                                                                                        of
                                                                                                        sat_s3ES
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  plusWord# [sat_s3ES
                                                                                                                             sat_s3ET]
                                                                                                              of
                                                                                                              sat_s3EU
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        plusWord# [sat_s3EU
                                                                                                                                   sat_s3EV]
                                                                                                                    of
                                                                                                                    wild_s3EW
                                                                                                                    { __DEFAULT ->
                                                                                                                          let {
                                                                                                                            sat_s3EX [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Digits
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [wild_s3EW
                                                                                                                                                             GHC.Integer.Type.None]; } in
                                                                                                                          let {
                                                                                                                            sat_s3EY [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Positive
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [0##
                                                                                                                                                             sat_s3EX];
                                                                                                                          } in 
                                                                                                                            GHC.Integer.Type.plusPositive_addWithCarry
                                                                                                                                0##
                                                                                                                                sat_s3EY
                                                                                                                                low_s3EI;
                                                                                                                      0## ->
                                                                                                                          low_s3EI;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.timesPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3EZ ds1_s3F0]
        case ds_s3EZ of wild_s3F1 {
          GHC.Integer.Type.Some ds2_s3F2 [Occ=Once*] ds3_s3F3 [Occ=Once!] ->
              case ds1_s3F0 of wild1_s3F4 {
                GHC.Integer.Type.Some y_s3F5 [Occ=Once*] ys'_s3F6 [Occ=Once*!] ->
                    case ds3_s3F3 of wild2_s3F7 {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          case ys'_s3F6 of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                case
                                    GHC.Integer.Type.timesPositive wild2_s3F7 wild1_s3F4
                                of
                                dt_s3Fd
                                { __DEFAULT ->
                                      let {
                                        sat_s3Fg [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [0## dt_s3Fd]; } in
                                      let {
                                        sat_s3Fe [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [ds2_s3F2
                                                                         GHC.Integer.Type.None];
                                      } in 
                                        case
                                            GHC.Integer.Type.timesPositive sat_s3Fe wild1_s3F4
                                        of
                                        sat_s3Ff
                                        { __DEFAULT ->
                                              GHC.Integer.Type.plusPositive_addWithCarry
                                                  0## sat_s3Ff sat_s3Fg;
                                        };
                                };
                            GHC.Integer.Type.None ->
                                case ds2_s3F2 of wild4_s3Fh {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s3F7 wild1_s3F4
                                      of
                                      dt_s3Fi
                                      { __DEFAULT ->
                                            let {
                                              sat_s3Fk [Occ=Once] :: GHC.Integer.Type.Positive
                                              [LclId] =
                                                  CCCS GHC.Integer.Type.Some! [0## dt_s3Fi];
                                            } in 
                                              case
                                                  GHC.Integer.Type.timesDigit wild4_s3Fh y_s3F5
                                              of
                                              sat_s3Fj
                                              { __DEFAULT ->
                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                        0## sat_s3Fj sat_s3Fk;
                                              };
                                      };
                                  0## ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s3F7 wild1_s3F4
                                      of
                                      dt_s3Fl
                                      { __DEFAULT -> GHC.Integer.Type.Some [0## dt_s3Fl];
                                      };
                                };
                          };
                      GHC.Integer.Type.None ->
                          case ys'_s3F6 of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.timesPositive wild1_s3F4 wild_s3F1;
                            GHC.Integer.Type.None ->
                                GHC.Integer.Type.timesDigit ds2_s3F2 y_s3F5;
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.errorPositive;
              };
          GHC.Integer.Type.None ->
              case ds1_s3F0 of { __DEFAULT -> GHC.Integer.Type.errorPositive; };
        };

GHC.Integer.Type.timesInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Fq ds1_s3Fr]
        case ds_s3Fq of {
          GHC.Integer.Type.Positive p1_s3Ft [Occ=Once*] ->
              case ds1_s3Fr of {
                GHC.Integer.Type.Positive p2_s3Fv [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Ft p2_s3Fv of dt_s3Fw {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Fw];
                    };
                GHC.Integer.Type.Negative p2_s3Fx [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Ft p2_s3Fx of dt_s3Fy {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s3Fy];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Negative p1_s3Fz [Occ=Once*] ->
              case ds1_s3Fr of {
                GHC.Integer.Type.Positive p2_s3FB [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Fz p2_s3FB of dt_s3FC {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s3FC];
                    };
                GHC.Integer.Type.Negative p2_s3FD [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Fz p2_s3FD of dt_s3FE {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s3FE];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3Fr of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.twoToTheThirtytwoPositive
  :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [4294967296##
                                          GHC.Integer.Type.None];

GHC.Integer.Type.twoToTheThirtytwoInteger
  :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.twoToTheThirtytwoPositive];

GHC.Integer.Type.digitsMaybeZeroToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FG]
        case ds_s3FG of wild_s3FH {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s3FH];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.removeZeroTails [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FK]
        case ds_s3FK of {
          GHC.Integer.Type.Some w_s3FM [Occ=Once!] ds1_s3FN [Occ=Once*] ->
              case w_s3FM of wild1_s3FO {
                __DEFAULT ->
                    case GHC.Integer.Type.removeZeroTails ds1_s3FN of dt_s3FP {
                      __DEFAULT -> GHC.Integer.Type.Some [wild1_s3FO dt_s3FP];
                    };
                0## ->
                    case GHC.Integer.Type.removeZeroTails ds1_s3FN of wild2_s3FQ {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          GHC.Integer.Type.Some [0## wild2_s3FQ];
                      GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.digitsToNegativeInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FT]
        case GHC.Integer.Type.removeZeroTails ds_s3FT of wild_s3FU {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Negative [wild_s3FU];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.digitsToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FX]
        case GHC.Integer.Type.removeZeroTails ds_s3FX of wild_s3FY {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s3FY];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.comparePositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3G1 ds1_s3G2]
        case ds_s3G1 of {
          GHC.Integer.Type.Some x_s3G4 xs_s3G5 [Occ=Once] ->
              case ds1_s3G2 of {
                GHC.Integer.Type.Some y_s3G7 ys_s3G8 [Occ=Once] ->
                    case
                        GHC.Integer.Type.comparePositive xs_s3G5 ys_s3G8
                    of
                    wild2_s3G9
                    { __DEFAULT -> wild2_s3G9;
                      GHC.Types.EQ ->
                          case ltWord# [x_s3G4 y_s3G7] of {
                            __DEFAULT ->
                                case gtWord# [x_s3G4 y_s3G7] of {
                                  __DEFAULT -> GHC.Types.EQ [];
                                  1# -> GHC.Types.GT [];
                                };
                            1# -> GHC.Types.LT [];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Types.GT [];
              };
          GHC.Integer.Type.None ->
              case ds1_s3G2 of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.None -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.compareInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Gf ds1_s3Gg]
        case ds_s3Gf of {
          GHC.Integer.Type.Positive x_s3Gi [Occ=Once] ->
              case ds1_s3Gg of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Integer.Type.Positive y_s3Gk [Occ=Once] ->
                    GHC.Integer.Type.comparePositive x_s3Gi y_s3Gk;
              };
          GHC.Integer.Type.Negative x_s3Gl [Occ=Once] ->
              case ds1_s3Gg of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.Integer.Type.Negative y_s3Gn [Occ=Once] ->
                    GHC.Integer.Type.comparePositive y_s3Gn x_s3Gl;
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3Gg of {
                GHC.Integer.Type.Positive _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.Negative _ [Occ=Dead] -> GHC.Types.GT [];
                GHC.Integer.Type.Naught -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.eqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Gr y_s3Gs]
        case GHC.Integer.Type.compareInteger x_s3Gr y_s3Gs of {
          __DEFAULT -> 0#;
          GHC.Types.EQ -> 1#;
        };

GHC.Integer.Type.eqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3Gu b_s3Gv]
        case GHC.Integer.Type.eqInteger# a_s3Gu b_s3Gv of wild_s3Gw {
          __DEFAULT -> tagToEnum# [wild_s3Gw];
        };

GHC.Integer.Type.neqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Gx y_s3Gy]
        case GHC.Integer.Type.compareInteger x_s3Gx y_s3Gy of {
          __DEFAULT -> 1#;
          GHC.Types.EQ -> 0#;
        };

GHC.Integer.Type.neqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GA b_s3GB]
        case GHC.Integer.Type.neqInteger# a_s3GA b_s3GB of wild_s3GC {
          __DEFAULT -> tagToEnum# [wild_s3GC];
        };

GHC.Integer.Type.$fEqInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

GHC.Integer.Type.ltInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GD y_s3GE]
        case GHC.Integer.Type.compareInteger x_s3GD y_s3GE of {
          __DEFAULT -> 0#;
          GHC.Types.LT -> 1#;
        };

GHC.Integer.Type.ltInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GG b_s3GH]
        case GHC.Integer.Type.ltInteger# a_s3GG b_s3GH of wild_s3GI {
          __DEFAULT -> tagToEnum# [wild_s3GI];
        };

GHC.Integer.Type.gtInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GJ y_s3GK]
        case GHC.Integer.Type.compareInteger x_s3GJ y_s3GK of {
          __DEFAULT -> 0#;
          GHC.Types.GT -> 1#;
        };

GHC.Integer.Type.gtInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GM b_s3GN]
        case GHC.Integer.Type.gtInteger# a_s3GM b_s3GN of wild_s3GO {
          __DEFAULT -> tagToEnum# [wild_s3GO];
        };

GHC.Integer.Type.leInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GP y_s3GQ]
        case GHC.Integer.Type.compareInteger x_s3GP y_s3GQ of {
          __DEFAULT -> 1#;
          GHC.Types.GT -> 0#;
        };

GHC.Integer.Type.leInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GS b_s3GT]
        case GHC.Integer.Type.leInteger# a_s3GS b_s3GT of wild_s3GU {
          __DEFAULT -> tagToEnum# [wild_s3GU];
        };

GHC.Integer.Type.geInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GV y_s3GW]
        case GHC.Integer.Type.compareInteger x_s3GV y_s3GW of {
          __DEFAULT -> 1#;
          GHC.Types.LT -> 0#;
        };

GHC.Integer.Type.geInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GY b_s3GZ]
        case GHC.Integer.Type.geInteger# a_s3GY b_s3GZ of wild_s3H0 {
          __DEFAULT -> tagToEnum# [wild_s3H0];
        };

GHC.Integer.Type.$fOrdInteger_$cmax
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s3H1 y_s3H2]
        case GHC.Integer.Type.leInteger# x_s3H1 y_s3H2 of {
          __DEFAULT -> x_s3H1;
          1# -> y_s3H2;
        };

GHC.Integer.Type.$fOrdInteger_$cmin
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s3H4 y_s3H5]
        case GHC.Integer.Type.leInteger# x_s3H4 y_s3H5 of {
          __DEFAULT -> y_s3H5;
          1# -> x_s3H4;
        };

GHC.Integer.Type.$fOrdInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Integer.Type.$fEqInteger
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

GHC.Integer.Type.plusInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3H7 ds1_s3H8]
        case ds_s3H7 of wild_s3H9 {
          GHC.Integer.Type.Positive p1_s3Ha ->
              case ds1_s3H8 of {
                GHC.Integer.Type.Positive p2_s3Hc [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s3Ha p2_s3Hc
                    of
                    dt_s3Hd
                    { __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Hd];
                    };
                GHC.Integer.Type.Negative p2_s3He ->
                    case GHC.Integer.Type.comparePositive p1_s3Ha p2_s3He of {
                      GHC.Types.LT ->
                          case GHC.Integer.Type.minusPositive p2_s3He p1_s3Ha of dt_s3Hg {
                            __DEFAULT -> GHC.Integer.Type.Negative [dt_s3Hg];
                          };
                      GHC.Types.EQ -> GHC.Integer.Type.Naught [];
                      GHC.Types.GT ->
                          case GHC.Integer.Type.minusPositive p1_s3Ha p2_s3He of dt_s3Hh {
                            __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Hh];
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s3H9;
              };
          GHC.Integer.Type.Negative p1_s3Hi [Occ=Once] ->
              case ds1_s3H8 of wild1_s3Hj {
                GHC.Integer.Type.Positive _ [Occ=Dead] ->
                    GHC.Integer.Type.plusInteger wild1_s3Hj wild_s3H9;
                GHC.Integer.Type.Negative p2_s3Hl [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s3Hi p2_s3Hl
                    of
                    dt_s3Hm
                    { __DEFAULT -> GHC.Integer.Type.Negative [dt_s3Hm];
                    };
                GHC.Integer.Type.Naught -> wild_s3H9;
              };
          GHC.Integer.Type.Naught -> ds1_s3H8;
        };

GHC.Integer.Type.minusInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [i1_s3Hn i2_s3Ho]
        case GHC.Integer.Type.negateInteger i2_s3Ho of sat_s3Hp {
          __DEFAULT -> GHC.Integer.Type.plusInteger i1_s3Hn sat_s3Hp;
        };

GHC.Integer.Type.complementInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s3Hq]
        GHC.Integer.Type.minusInteger
            GHC.Integer.Type.negativeOneInteger x_s3Hq;

GHC.Integer.Type.decodeDoubleInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [d_s3Hr]
        case decodeDouble_2Int# [d_s3Hr] of {
          (#,,,#) ipv_s3Ht [Occ=Once]
                  ipv1_s3Hu [Occ=Once]
                  ipv2_s3Hv [Occ=Once]
                  ipv3_s3Hw [Occ=Once] ->
              let {
                sat_s3HC [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s3Ht ipv1_s3Hu ipv2_s3Hv] \u []
                        case GHC.Integer.Type.wordToInteger ipv2_s3Hv of sat_s3HA {
                          __DEFAULT ->
                              case GHC.Integer.Type.wordToInteger ipv1_s3Hu of sat_s3Hy {
                                __DEFAULT ->
                                    case
                                        GHC.Integer.Type.timesInteger
                                            sat_s3Hy GHC.Integer.Type.twoToTheThirtytwoInteger
                                    of
                                    sat_s3Hz
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.plusInteger sat_s3Hz sat_s3HA
                                          of
                                          sat_s3HB
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.smallInteger ipv_s3Ht
                                                of
                                                sat_s3Hx
                                                { __DEFAULT ->
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s3Hx sat_s3HB;
                                                };
                                          };
                                    };
                              };
                        };
              } in  (#,#) [sat_s3HC ipv3_s3Hw];
        };

GHC.Integer.Type.smallShiftLPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s3HD ds_s3HE]
        case ds_s3HE of ds1_s3HF {
          __DEFAULT ->
              case -# [64# ds1_s3HF] of j_s3HG {
                __DEFAULT ->
                    let {
                      f2_s3HH [Occ=LoopBreaker]
                        :: GHC.Prim.Word#
                           -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
                      [LclId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
                          sat-only [ds1_s3HF j_s3HG f2_s3HH] \r [carry_s3HI ds2_s3HJ]
                              case ds2_s3HJ of {
                                GHC.Integer.Type.Some w_s3HL ws_s3HM [Occ=Once] ->
                                    case uncheckedShiftRL# [w_s3HL j_s3HG] of sat_s3HN {
                                      __DEFAULT ->
                                          case f2_s3HH sat_s3HN ws_s3HM of dt_s3HO {
                                            __DEFAULT ->
                                                case
                                                    uncheckedShiftL# [w_s3HL ds1_s3HF]
                                                of
                                                sat_s3HP
                                                { __DEFAULT ->
                                                      case or# [sat_s3HP carry_s3HI] of sat_s3HQ {
                                                        __DEFAULT ->
                                                            GHC.Integer.Type.Some [sat_s3HQ
                                                                                   dt_s3HO];
                                                      };
                                                };
                                          };
                                    };
                                GHC.Integer.Type.None ->
                                    case carry_s3HI of wild1_s3HR {
                                      __DEFAULT ->
                                          GHC.Integer.Type.Some [wild1_s3HR GHC.Integer.Type.None];
                                      0## -> GHC.Integer.Type.None [];
                                    };
                              };
                    } in  f2_s3HH 0## p_s3HD;
              };
          0# -> p_s3HD;
        };

GHC.Integer.Type.smallShiftRPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s3HS i_s3HT]
        case p_s3HS of p1_s3HU {
          __DEFAULT ->
              case i_s3HT of wild_s3HV {
                __DEFAULT ->
                    case -# [64# wild_s3HV] of sat_s3HW {
                      __DEFAULT ->
                          case GHC.Integer.Type.smallShiftLPositive p1_s3HU sat_s3HW of {
                            GHC.Integer.Type.Some _ [Occ=Dead] p'_s3HZ [Occ=Once!] ->
                                case p'_s3HZ of wild2_s3I0 {
                                  GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Integer.Type.Positive [wild2_s3I0];
                                  GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                };
                            GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                          };
                    };
                0# -> GHC.Integer.Type.Positive [p1_s3HU];
              };
        };

GHC.Integer.Type.shiftRPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3I3 ds1_s3I4]
        case ds_s3I3 of wild_s3I5 {
          GHC.Integer.Type.Some _ [Occ=Dead] q_s3I7 [Occ=Once] ->
              case >=# [ds1_s3I4 64#] of {
                __DEFAULT ->
                    GHC.Integer.Type.smallShiftRPositive wild_s3I5 ds1_s3I4;
                1# ->
                    case -# [ds1_s3I4 64#] of sat_s3I9 {
                      __DEFAULT -> GHC.Integer.Type.shiftRPositive q_s3I7 sat_s3I9;
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftRInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s3Ia i_s3Ib]
        case ds_s3Ia of wild_s3Ic {
          GHC.Integer.Type.Positive p_s3Id [Occ=Once] ->
              GHC.Integer.Type.shiftRPositive p_s3Id i_s3Ib;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              case GHC.Integer.Type.complementInteger wild_s3Ic of sat_s3If {
                __DEFAULT ->
                    case GHC.Integer.Type.shiftRInteger sat_s3If i_s3Ib of sat_s3Ig {
                      __DEFAULT -> GHC.Integer.Type.complementInteger sat_s3Ig;
                    };
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftLPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [p_s3Ih i_s3Ii]
        case >=# [i_s3Ii 64#] of {
          __DEFAULT -> GHC.Integer.Type.smallShiftLPositive p_s3Ih i_s3Ii;
          1# ->
              case p_s3Ih of dt_s3Ik {
                __DEFAULT ->
                    case -# [i_s3Ii 64#] of sat_s3Im {
                      __DEFAULT ->
                          let {
                            sat_s3Il [Occ=Once] :: GHC.Integer.Type.Positive
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [0## dt_s3Ik];
                          } in  GHC.Integer.Type.shiftLPositive sat_s3Il sat_s3Im;
                    };
              };
        };

GHC.Integer.Type.shiftLInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3In i_s3Io]
        case ds_s3In of {
          GHC.Integer.Type.Positive p_s3Iq [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive p_s3Iq i_s3Io of dt_s3Ir {
                __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Ir];
              };
          GHC.Integer.Type.Negative n_s3Is [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive n_s3Is i_s3Io of dt_s3It {
                __DEFAULT -> GHC.Integer.Type.Negative [dt_s3It];
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s3Iu ds_s3Iv]
        case ds_s3Iv of wild_s3Iw {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Some [w_s3Iu wild_s3Iw];
          GHC.Integer.Type.None ->
              case w_s3Iu of wild1_s3Iz {
                __DEFAULT ->
                    GHC.Integer.Type.Some [wild1_s3Iz GHC.Integer.Type.None];
                0## -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.quotRemPositive_g [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positives
     -> GHC.Integer.Type.Digits
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [d_s3IA ds_s3IB m_s3IC]
        case ds_s3IB of {
          GHC.Integer.Type.Nil ->
              case m_s3IC of m1_s3IE { __DEFAULT -> (#,#) [d_s3IA m1_s3IE]; };
          GHC.Integer.Type.Cons sub_s3IF subs_s3IG [Occ=Once*] ->
              case GHC.Integer.Type.comparePositive m_s3IC sub_s3IF of {
                __DEFAULT ->
                    case GHC.Integer.Type.minusPositive m_s3IC sub_s3IF of sat_s3IK {
                      __DEFAULT ->
                          case uncheckedShiftL# [d_s3IA 1#] of sat_s3II {
                            __DEFAULT ->
                                case plusWord# [sat_s3II 1##] of sat_s3IJ {
                                  __DEFAULT ->
                                      GHC.Integer.Type.quotRemPositive_g
                                          sat_s3IJ subs_s3IG sat_s3IK;
                                };
                          };
                    };
                GHC.Types.LT ->
                    case uncheckedShiftL# [d_s3IA 1#] of sat_s3IL {
                      __DEFAULT ->
                          GHC.Integer.Type.quotRemPositive_g sat_s3IL subs_s3IG m_s3IC;
                    };
              };
        };

GHC.Integer.Type.quotRemPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s3IM ys_s3IN]
        case ys_s3IN of ys1_s3IO {
          __DEFAULT ->
              let {
                subtractors_s3IP [Occ=OnceL*] :: GHC.Integer.Type.Positives
                [LclId] =
                    [ys1_s3IO] \u []
                        let {
                          lvl1_s3IQ [Occ=OnceL]
                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Unf=OtherCon []] =
                              CCCS GHC.Integer.Type.Cons! [ys1_s3IO GHC.Integer.Type.Nil]; } in
                        let {
                          mkSubtractors_s3IR [Occ=LoopBreaker]
                            :: GHC.Prim.Int# -> GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [ys1_s3IO lvl1_s3IQ mkSubtractors_s3IR] \r [n_s3IS]
                                  case n_s3IS of wild_s3IT {
                                    __DEFAULT ->
                                        let {
                                          sat_s3IW [Occ=Once]
                                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                                          [LclId] =
                                              [mkSubtractors_s3IR wild_s3IT] \u []
                                                  case -# [wild_s3IT 1#] of sat_s3IV {
                                                    __DEFAULT -> mkSubtractors_s3IR sat_s3IV;
                                                  }; } in
                                        let {
                                          sat_s3IU [Occ=Once] :: GHC.Integer.Type.Positive
                                          [LclId] =
                                              [ys1_s3IO wild_s3IT] \u []
                                                  GHC.Integer.Type.smallShiftLPositive
                                                      ys1_s3IO wild_s3IT;
                                        } in  GHC.Integer.Type.Cons [sat_s3IU sat_s3IW];
                                    0# -> lvl1_s3IQ;
                                  };
                        } in  mkSubtractors_s3IR 63#; } in
              let {
                f2_s3IX [Occ=LoopBreaker]
                  :: GHC.Integer.Type.Positive
                     -> (# GHC.Integer.Type.Digits, GHC.Integer.Type.Digits #)
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [subtractors_s3IP f2_s3IX] \r [ds_s3IY]
                        case ds_s3IY of {
                          GHC.Integer.Type.Some z_s3J0 [Occ=Once*] zs_s3J1 [Occ=Once] ->
                              case f2_s3IX zs_s3J1 of {
                                (#,#) ipv_s3J3 [Occ=Once*] ipv1_s3J4 [Occ=Once!] ->
                                    case ipv1_s3J4 of wild1_s3J5 {
                                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_s3J8 [Occ=Once] :: GHC.Integer.Type.Digits
                                            [LclId] =
                                                CCCS GHC.Integer.Type.Some! [z_s3J0 wild1_s3J5];
                                          } in 
                                            case
                                                GHC.Integer.Type.quotRemPositive_g
                                                    0## subtractors_s3IP sat_s3J8
                                            of
                                            { (#,#) ipv4_s3Ja [Occ=Once] ipv5_s3Jb [Occ=Once] ->
                                                  let {
                                                    sat_s3Jc [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        [ipv_s3J3 ipv4_s3Ja] \u []
                                                            GHC.Integer.Type.some
                                                                ipv4_s3Ja ipv_s3J3;
                                                  } in  (#,#) [sat_s3Jc ipv5_s3Jb];
                                            };
                                      GHC.Integer.Type.None ->
                                          case z_s3J0 of wild2_s3Jd {
                                            __DEFAULT ->
                                                let {
                                                  sat_s3Je [Occ=Once] :: GHC.Integer.Type.Digits
                                                  [LclId] =
                                                      CCCS GHC.Integer.Type.Some! [wild2_s3Jd
                                                                                   GHC.Integer.Type.None];
                                                } in 
                                                  case
                                                      GHC.Integer.Type.quotRemPositive_g
                                                          0## subtractors_s3IP sat_s3Je
                                                  of
                                                  { (#,#) ipv2_s3Jg [Occ=Once]
                                                          ipv3_s3Jh [Occ=Once] ->
                                                        let {
                                                          sat_s3Ji [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              [ipv_s3J3 ipv2_s3Jg] \u []
                                                                  GHC.Integer.Type.some
                                                                      ipv2_s3Jg ipv_s3J3;
                                                        } in  (#,#) [sat_s3Ji ipv3_s3Jh];
                                                  };
                                            0## ->
                                                case
                                                    GHC.Integer.Type.quotRemPositive_g
                                                        0## subtractors_s3IP GHC.Integer.Type.None
                                                of
                                                { (#,#) ipv2_s3Jk [Occ=Once] ipv3_s3Jl [Occ=Once] ->
                                                      let {
                                                        sat_s3Jm [Occ=Once]
                                                          :: GHC.Integer.Type.Digits
                                                        [LclId] =
                                                            [ipv_s3J3 ipv2_s3Jk] \u []
                                                                GHC.Integer.Type.some
                                                                    ipv2_s3Jk ipv_s3J3;
                                                      } in  (#,#) [sat_s3Jm ipv3_s3Jl];
                                                };
                                          };
                                    };
                              };
                          GHC.Integer.Type.None ->
                              (#,#) [GHC.Integer.Type.None GHC.Integer.Type.None];
                        };
              } in 
                case f2_s3IX xs_s3IM of {
                  (#,#) ipv_s3Jo [Occ=Once] ipv1_s3Jp [Occ=Once] ->
                      let {
                        sat_s3Jr [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv1_s3Jp] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv1_s3Jp; } in
                      let {
                        sat_s3Jq [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv_s3Jo] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv_s3Jo;
                      } in  (#,#) [sat_s3Jq sat_s3Jr];
                };
        };

GHC.Integer.Type.quotRemInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Js ds1_s3Jt]
        case ds_s3Js of wild_s3Ju {
          __DEFAULT ->
              case ds1_s3Jt of wild1_s3Jv {
                __DEFAULT ->
                    case wild_s3Ju of {
                      GHC.Integer.Type.Positive p1_s3Jx [Occ=Once*] ->
                          case wild1_s3Jv of {
                            GHC.Integer.Type.Positive p2_s3Jz [Occ=Once] ->
                                GHC.Integer.Type.quotRemPositive p1_s3Jx p2_s3Jz;
                            GHC.Integer.Type.Negative p2_s3JA [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s3Jx p2_s3JA of {
                                  (#,#) ipv_s3JC [Occ=Once] ipv1_s3JD [Occ=Once] ->
                                      let {
                                        sat_s3JE [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s3JC] \u []
                                                GHC.Integer.Type.negateInteger ipv_s3JC;
                                      } in  (#,#) [sat_s3JE ipv1_s3JD];
                                };
                          };
                      GHC.Integer.Type.Negative p1_s3JF [Occ=Once*] ->
                          case wild1_s3Jv of {
                            GHC.Integer.Type.Positive p2_s3JH [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s3JF p2_s3JH of {
                                  (#,#) ipv_s3JJ [Occ=Once] ipv1_s3JK [Occ=Once] ->
                                      let {
                                        sat_s3JM [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s3JK] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s3JK; } in
                                      let {
                                        sat_s3JL [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s3JJ] \u []
                                                GHC.Integer.Type.negateInteger ipv_s3JJ;
                                      } in  (#,#) [sat_s3JL sat_s3JM];
                                };
                            GHC.Integer.Type.Negative p2_s3JN [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s3JF p2_s3JN of {
                                  (#,#) ipv_s3JP [Occ=Once] ipv1_s3JQ [Occ=Once] ->
                                      let {
                                        sat_s3JR [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s3JQ] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s3JQ;
                                      } in  (#,#) [ipv_s3JP sat_s3JR];
                                };
                          };
                    };
                GHC.Integer.Type.Naught ->
                    (#,#) [GHC.Integer.Type.errorInteger
                           GHC.Integer.Type.errorInteger];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3Jt of {
                __DEFAULT ->
                    (#,#) [GHC.Integer.Type.Naught GHC.Integer.Type.Naught];
              };
        };

GHC.Integer.Type.divModInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s3JT d_s3JU]
        case GHC.Integer.Type.quotRemInteger n_s3JT d_s3JU of ds_s3JV {
          (#,#) ipv_s3JW [Occ=Once] ipv1_s3JX ->
              case GHC.Integer.Type.signumInteger d_s3JU of sat_s3JZ {
                __DEFAULT ->
                    case GHC.Integer.Type.negateInteger sat_s3JZ of sat_s3K0 {
                      __DEFAULT ->
                          case GHC.Integer.Type.signumInteger ipv1_s3JX of sat_s3JY {
                            __DEFAULT ->
                                case GHC.Integer.Type.eqInteger# sat_s3JY sat_s3K0 of {
                                  __DEFAULT -> ds_s3JV;
                                  1# ->
                                      let {
                                        sat_s3K3 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [d_s3JU ipv1_s3JX] \u []
                                                GHC.Integer.Type.plusInteger ipv1_s3JX d_s3JU; } in
                                      let {
                                        sat_s3K2 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s3JW] \u []
                                                GHC.Integer.Type.minusInteger
                                                    ipv_s3JW GHC.Integer.Type.oneInteger;
                                      } in  (#,#) [sat_s3K2 sat_s3K3];
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.divInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s3K4 d_s3K5]
        case GHC.Integer.Type.divModInteger n_s3K4 d_s3K5 of {
          (#,#) ipv_s3K7 [Occ=Once] _ [Occ=Dead] -> ipv_s3K7;
        };

GHC.Integer.Type.modInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s3K9 d_s3Ka]
        case GHC.Integer.Type.divModInteger n_s3K9 d_s3Ka of {
          (#,#) _ [Occ=Dead] ipv1_s3Kd [Occ=Once] -> ipv1_s3Kd;
        };

GHC.Integer.Type.quotInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Ke y_s3Kf]
        case GHC.Integer.Type.quotRemInteger x_s3Ke y_s3Kf of {
          (#,#) ipv_s3Kh [Occ=Once] _ [Occ=Dead] -> ipv_s3Kh;
        };

GHC.Integer.Type.remInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Kj y_s3Kk]
        case GHC.Integer.Type.quotRemInteger x_s3Kj y_s3Kk of {
          (#,#) _ [Occ=Dead] ipv1_s3Kn [Occ=Once] -> ipv1_s3Kn;
        };

GHC.Integer.Type.andDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Ko ds1_s3Kp]
        case ds_s3Ko of {
          GHC.Integer.Type.Some ds2_s3Kr [Occ=Once] ds3_s3Ks [Occ=Once] ->
              case ds1_s3Kp of {
                GHC.Integer.Type.Some w2_s3Ku [Occ=Once] ws2_s3Kv [Occ=Once] ->
                    case GHC.Integer.Type.andDigits ds3_s3Ks ws2_s3Kv of dt_s3Kw {
                      __DEFAULT ->
                          case and# [ds2_s3Kr w2_s3Ku] of sat_s3Kx {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3Kx dt_s3Kw];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None ->
              case ds1_s3Kp of { __DEFAULT -> GHC.Integer.Type.None []; };
        };

GHC.Integer.Type.andDigitsOnes [Occ=LoopBreaker]
  :: GHC.Integer.Type.DigitsOnes
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Kz ds1_s3KA]
        case ds_s3Kz of {
          GHC.Integer.Type.Some ds2_s3KC [Occ=Once] ds3_s3KD [Occ=Once] ->
              case ds1_s3KA of {
                GHC.Integer.Type.Some w2_s3KF [Occ=Once] ws2_s3KG [Occ=Once] ->
                    case GHC.Integer.Type.andDigitsOnes ds3_s3KD ws2_s3KG of dt_s3KH {
                      __DEFAULT ->
                          case and# [ds2_s3KC w2_s3KF] of sat_s3KI {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3KI dt_s3KH];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None -> ds1_s3KA;
        };

GHC.Integer.Type.orDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3KJ ds1_s3KK]
        case ds_s3KJ of wild_s3KL {
          GHC.Integer.Type.Some ds2_s3KM [Occ=Once] ds3_s3KN [Occ=Once] ->
              case ds1_s3KK of {
                GHC.Integer.Type.Some w2_s3KP [Occ=Once] ds4_s3KQ [Occ=Once] ->
                    case GHC.Integer.Type.orDigits ds3_s3KN ds4_s3KQ of dt_s3KR {
                      __DEFAULT ->
                          case or# [ds2_s3KM w2_s3KP] of sat_s3KS {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3KS dt_s3KR];
                          };
                    };
                GHC.Integer.Type.None -> wild_s3KL;
              };
          GHC.Integer.Type.None -> ds1_s3KK;
        };

GHC.Integer.Type.orInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3KT i_s3KU]
        case ds_s3KT of wild_s3KV {
          __DEFAULT ->
              case i_s3KU of wild1_s3KW {
                __DEFAULT ->
                    case wild_s3KV of wild2_s3KX {
                      GHC.Integer.Type.Positive x_s3KY [Occ=Once*] ->
                          case wild1_s3KW of {
                            GHC.Integer.Type.Positive y_s3L0 [Occ=Once] ->
                                case GHC.Integer.Type.orDigits x_s3KY y_s3L0 of dt_s3L1 {
                                  __DEFAULT -> GHC.Integer.Type.Positive [dt_s3L1];
                                };
                            GHC.Integer.Type.Negative y_s3L2 [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3L2 GHC.Integer.Type.onePositive
                                of
                                sat_s3L4
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits x_s3KY of sat_s3L3 {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s3L3 sat_s3L4
                                            of
                                            sat_s3L5
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s3L5 of {
                                                    (#,#) ww1_s3L7 [Occ=Once] ww2_s3L8 [Occ=Once] ->
                                                        let {
                                                          sat_s3L9 [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s3L7
                                                                                           ww2_s3L8];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s3L9
                                                          of
                                                          wild4_s3La
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s3La];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s3Ld [Occ=Once] ->
                          case wild1_s3KW of wild3_s3Le {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.orInteger wild3_s3Le wild2_s3KX;
                            GHC.Integer.Type.Negative y_s3Lg [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3Lg GHC.Integer.Type.onePositive
                                of
                                sat_s3Li
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s3Ld GHC.Integer.Type.onePositive
                                      of
                                      sat_s3Lh
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigits sat_s3Lh sat_s3Li
                                            of
                                            sat_s3Lj
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s3Lj of {
                                                    (#,#) ww1_s3Ll [Occ=Once] ww2_s3Lm [Occ=Once] ->
                                                        let {
                                                          sat_s3Ln [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s3Ll
                                                                                           ww2_s3Lm];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s3Ln
                                                          of
                                                          wild4_s3Lo
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s3Lo];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s3KV;
              };
          GHC.Integer.Type.Naught -> i_s3KU;
        };

GHC.Integer.Type.mkInteger_f [Occ=LoopBreaker]
  :: [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Lr]
        case ds_s3Lr of {
          [] -> GHC.Integer.Type.Naught [];
          : ds1_s3Lt [Occ=Once!] is'_s3Lu [Occ=Once] ->
              case ds1_s3Lt of {
                GHC.Types.I# i_s3Lw [Occ=Once] ->
                    case GHC.Integer.Type.mkInteger_f is'_s3Lu of sat_s3Ly {
                      __DEFAULT ->
                          case GHC.Integer.Type.shiftLInteger sat_s3Ly 31# of sat_s3Lz {
                            __DEFAULT ->
                                case GHC.Integer.Type.smallInteger i_s3Lw of sat_s3Lx {
                                  __DEFAULT -> GHC.Integer.Type.orInteger sat_s3Lx sat_s3Lz;
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.mkInteger
  :: GHC.Types.Bool -> [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [nonNegative_s3LA is_s3LB]
        case nonNegative_s3LA of {
          GHC.Types.False ->
              case GHC.Integer.Type.mkInteger_f is_s3LB of sat_s3LD {
                __DEFAULT -> GHC.Integer.Type.negateInteger sat_s3LD;
              };
          GHC.Types.True -> GHC.Integer.Type.mkInteger_f is_s3LB;
        };

GHC.Integer.Type.andInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3LE ds1_s3LF]
        case ds_s3LE of wild_s3LG {
          __DEFAULT ->
              case ds1_s3LF of wild1_s3LH {
                __DEFAULT ->
                    case wild_s3LG of wild2_s3LI {
                      GHC.Integer.Type.Positive x_s3LJ [Occ=Once*] ->
                          case wild1_s3LH of {
                            GHC.Integer.Type.Positive y_s3LL [Occ=Once] ->
                                case GHC.Integer.Type.andDigits x_s3LJ y_s3LL of sat_s3LM {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s3LM of wild4_s3LN {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s3LN];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s3LQ [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3LQ GHC.Integer.Type.onePositive
                                of
                                sat_s3LR
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits sat_s3LR of sat_s3LS {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s3LS x_s3LJ
                                            of
                                            sat_s3LT
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s3LT
                                                  of
                                                  wild4_s3LU
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s3LU];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s3LX [Occ=Once] ->
                          case wild1_s3LH of wild3_s3LY {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.andInteger wild3_s3LY wild2_s3LI;
                            GHC.Integer.Type.Negative y_s3M0 [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3M0 GHC.Integer.Type.onePositive
                                of
                                sat_s3M2
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s3LX GHC.Integer.Type.onePositive
                                      of
                                      sat_s3M1
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.orDigits sat_s3M1 sat_s3M2
                                            of
                                            sat_s3M3
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s3M3 of {
                                                    (#,#) ww1_s3M5 [Occ=Once] ww2_s3M6 [Occ=Once] ->
                                                        let {
                                                          sat_s3M7 [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s3M5
                                                                                           ww2_s3M6];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s3M7
                                                          of
                                                          wild4_s3M8
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s3M8];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3LF of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.testBitInteger
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s3Mc i_s3Md]
        case
            GHC.Integer.Type.shiftLInteger GHC.Integer.Type.oneInteger i_s3Md
        of
        sat_s3Me
        { __DEFAULT ->
              case GHC.Integer.Type.andInteger x_s3Mc sat_s3Me of sat_s3Mf {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.neqInteger# sat_s3Mf GHC.Integer.Type.Naught
                    of
                    wild_s3Mg
                    { __DEFAULT -> tagToEnum# [wild_s3Mg];
                    };
              };
        };

GHC.Integer.Type.xorDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Mh ds1_s3Mi]
        case ds_s3Mh of wild_s3Mj {
          GHC.Integer.Type.Some ds2_s3Mk [Occ=Once] ds3_s3Ml [Occ=Once] ->
              case ds1_s3Mi of {
                GHC.Integer.Type.Some w2_s3Mn [Occ=Once] ds4_s3Mo [Occ=Once] ->
                    case GHC.Integer.Type.xorDigits ds3_s3Ml ds4_s3Mo of dt_s3Mp {
                      __DEFAULT ->
                          case xor# [ds2_s3Mk w2_s3Mn] of sat_s3Mq {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3Mq dt_s3Mp];
                          };
                    };
                GHC.Integer.Type.None -> wild_s3Mj;
              };
          GHC.Integer.Type.None -> ds1_s3Mi;
        };

GHC.Integer.Type.xorInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Mr i_s3Ms]
        case ds_s3Mr of wild_s3Mt {
          __DEFAULT ->
              case i_s3Ms of wild1_s3Mu {
                __DEFAULT ->
                    case wild_s3Mt of wild2_s3Mv {
                      GHC.Integer.Type.Positive x_s3Mw [Occ=Once*] ->
                          case wild1_s3Mu of {
                            GHC.Integer.Type.Positive y_s3My [Occ=Once] ->
                                case GHC.Integer.Type.xorDigits x_s3Mw y_s3My of sat_s3Mz {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s3Mz of wild4_s3MA {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s3MA];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s3MD [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3MD GHC.Integer.Type.onePositive
                                of
                                sat_s3ME
                                { __DEFAULT ->
                                      case GHC.Integer.Type.xorDigits x_s3Mw sat_s3ME of sat_s3MF {
                                        __DEFAULT ->
                                            case GHC.Integer.Type.$wsuccPositive sat_s3MF of {
                                              (#,#) ww1_s3MH [Occ=Once] ww2_s3MI [Occ=Once] ->
                                                  let {
                                                    sat_s3MJ [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [ww1_s3MH
                                                                                     ww2_s3MI];
                                                  } in 
                                                    case
                                                        GHC.Integer.Type.removeZeroTails sat_s3MJ
                                                    of
                                                    wild4_s3MK
                                                    { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                          GHC.Integer.Type.Negative [wild4_s3MK];
                                                      GHC.Integer.Type.None ->
                                                          GHC.Integer.Type.Naught [];
                                                    };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s3MN [Occ=Once] ->
                          case wild1_s3Mu of wild3_s3MO {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.xorInteger wild3_s3MO wild2_s3Mv;
                            GHC.Integer.Type.Negative y_s3MQ [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3MQ GHC.Integer.Type.onePositive
                                of
                                sat_s3MS
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s3MN GHC.Integer.Type.onePositive
                                      of
                                      sat_s3MR
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.xorDigits sat_s3MR sat_s3MS
                                            of
                                            sat_s3MT
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s3MT
                                                  of
                                                  wild4_s3MU
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s3MU];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s3Mt;
              };
          GHC.Integer.Type.Naught -> i_s3Ms;
        };

GHC.Integer.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule4];

GHC.Integer.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Type"#;

GHC.Integer.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule2];

GHC.Integer.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Type.$trModule3
                                     GHC.Integer.Type.$trModule1];

$krep_r3Bp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r3Bq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Integer.Type.$tcDigits2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Digits"#;

GHC.Integer.Type.$tcDigits1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigits2];

GHC.Integer.Type.$tcDigits :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16647862651490579480##
                                    7069031713090282797##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigits1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'None1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigits
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'None3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'None"#;

GHC.Integer.Type.$tc'None2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'None3];

GHC.Integer.Type.$tc'None :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [903679638320298226##
                                    12977397153301278560##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'None2
                                    0#
                                    GHC.Integer.Type.$tc'None1];

$krep2_r3Br :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'None1];

GHC.Integer.Type.$tc'Some1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3Bq $krep2_r3Br];

GHC.Integer.Type.$tc'Some3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Some"#;

GHC.Integer.Type.$tc'Some2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Some3];

GHC.Integer.Type.$tc'Some :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6045911439621864566##
                                    9702873355935012388##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Some2
                                    0#
                                    GHC.Integer.Type.$tc'Some1];

GHC.Integer.Type.$tcInteger2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Integer"#;

GHC.Integer.Type.$tcInteger1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcInteger2];

GHC.Integer.Type.$tcInteger :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12260413788024328428##
                                    9583620696682509916##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcInteger1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'Naught1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'Naught3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Naught"#;

GHC.Integer.Type.$tc'Naught2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Naught3];

GHC.Integer.Type.$tc'Naught :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7287704174224038176##
                                    776397532388787230##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Naught2
                                    0#
                                    GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Negative1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Positive2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Positive"#;

GHC.Integer.Type.$tc'Positive1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Positive2];

GHC.Integer.Type.$tc'Positive :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6887932004110746796##
                                    9391890139750561935##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Positive1
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tc'Negative3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Negative"#;

GHC.Integer.Type.$tc'Negative2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Negative3];

GHC.Integer.Type.$tc'Negative :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4010847856516363452##
                                    15624358648337932456##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Negative2
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tcList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List"#;

GHC.Integer.Type.$tcList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcList2];

GHC.Integer.Type.$tcList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [732340346576824023##
                                    9653115931589988500##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcList1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep3_r3Bs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3Bp GHC.Types.[]];

GHC.Integer.Type.$tc'Nil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcList
                                              $krep3_r3Bs];

GHC.Integer.Type.$tc'Nil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Nil"#;

GHC.Integer.Type.$tc'Nil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Nil3];

GHC.Integer.Type.$tc'Nil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13538585131509945451##
                                    9366316088405446135##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Nil2
                                    1#
                                    GHC.Integer.Type.$tc'Nil1];

$krep4_r3Bt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'Nil1
                                         GHC.Integer.Type.$tc'Nil1];

GHC.Integer.Type.$tc'Cons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r3Bp $krep4_r3Bt];

GHC.Integer.Type.$tc'Cons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Cons"#;

GHC.Integer.Type.$tc'Cons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Cons3];

GHC.Integer.Type.$tc'Cons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3906777924842222150##
                                    5463288556346842885##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Cons2
                                    1#
                                    GHC.Integer.Type.$tc'Cons1];

GHC.Integer.Type.$tcDigitsOnes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DigitsOnes"#;

GHC.Integer.Type.$tcDigitsOnes1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigitsOnes2];

GHC.Integer.Type.$tcDigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4554239703586147919##
                                    6957361150436389790##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigitsOnes1
                                    0#
                                    GHC.Types.krep$*];

$krep5_r3Bu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigitsOnes
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'DigitsOnes1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         $krep5_r3Bu];

GHC.Integer.Type.$tc'DigitsOnes3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DigitsOnes"#;

GHC.Integer.Type.$tc'DigitsOnes2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'DigitsOnes3];

GHC.Integer.Type.$tc'DigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15211110739657495015##
                                    1682512192113792266##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'DigitsOnes2
                                    0#
                                    GHC.Integer.Type.$tc'DigitsOnes1];

GHC.Integer.Type.encodeDouble#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s3MX ds1_s3MY]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s3MX
                                                ds1_s3MY
                                                GHC.Prim.realWorld#]
        of
        { (#,#) _ [Occ=Dead] ds3_s3N2 [Occ=Once] -> ds3_s3N2;
        };

f_r3Bv
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s3N3 ds_s3N4 ds1_s3N5]
        case ds_s3N4 of {
          GHC.Integer.Type.Some d_s3N7 [Occ=Once] ds2_s3N8 [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s3N7
                                                      ds1_s3N5
                                                      GHC.Prim.realWorld#]
              of
              { (#,#) _ [Occ=Dead] ds4_s3Nc [Occ=Once] ->
                    case +# [ds1_s3N5 64#] of sat_s3Ne {
                      __DEFAULT ->
                          case +## [acc_s3N3 ds4_s3Nc] of sat_s3Nd {
                            __DEFAULT -> f_r3Bv sat_s3Nd ds2_s3N8 sat_s3Ne;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s3N3;
        };

GHC.Integer.Type.encodeDoubleInteger [InlPrag=NOINLINE,
                                      Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Nf e0_s3Ng]
        case ds_s3Nf of {
          GHC.Integer.Type.Positive ds0_s3Ni [Occ=Once] ->
              f_r3Bv 0.0## ds0_s3Ni e0_s3Ng;
          GHC.Integer.Type.Negative ds1_s3Nj [Occ=Once] ->
              let {
                sat_s3Nk [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s3Nj];
              } in 
                case
                    GHC.Integer.Type.encodeDoubleInteger sat_s3Nk e0_s3Ng
                of
                wild1_s3Nl
                { __DEFAULT -> negateDouble# [wild1_s3Nl];
                };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.encodeFloat#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s3Nm ds1_s3Nn]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s3Nm
                                                ds1_s3Nn
                                                GHC.Prim.realWorld#]
        of
        { (#,#) _ [Occ=Dead] ds3_s3Nr [Occ=Once] -> ds3_s3Nr;
        };

f1_r3Bw
  :: GHC.Prim.Float#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s3Ns ds_s3Nt ds1_s3Nu]
        case ds_s3Nt of {
          GHC.Integer.Type.Some d_s3Nw [Occ=Once] ds2_s3Nx [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s3Nw
                                                      ds1_s3Nu
                                                      GHC.Prim.realWorld#]
              of
              { (#,#) _ [Occ=Dead] ds4_s3NB [Occ=Once] ->
                    case +# [ds1_s3Nu 64#] of sat_s3ND {
                      __DEFAULT ->
                          case plusFloat# [acc_s3Ns ds4_s3NB] of sat_s3NC {
                            __DEFAULT -> f1_r3Bw sat_s3NC ds2_s3Nx sat_s3ND;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s3Ns;
        };

GHC.Integer.Type.encodeFloatInteger [InlPrag=NOINLINE,
                                     Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3NE e0_s3NF]
        case ds_s3NE of {
          GHC.Integer.Type.Positive ds0_s3NH [Occ=Once] ->
              f1_r3Bw 0.0# ds0_s3NH e0_s3NF;
          GHC.Integer.Type.Negative ds1_s3NI [Occ=Once] ->
              let {
                sat_s3NJ [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s3NI];
              } in 
                case
                    GHC.Integer.Type.encodeFloatInteger sat_s3NJ e0_s3NF
                of
                wild1_s3NK
                { __DEFAULT -> negateFloat# [wild1_s3NK];
                };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.Positive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Positive [eta_B1];

GHC.Integer.Type.Negative
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Negative [eta_B1];

GHC.Integer.Type.Naught :: GHC.Integer.Type.Integer
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Naught! [];

GHC.Integer.Type.Nil :: forall a. GHC.Integer.Type.List a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Nil! [];

GHC.Integer.Type.Cons
  :: forall a.
     a -> GHC.Integer.Type.List a -> GHC.Integer.Type.List a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Cons [eta_B2 eta_B1];

GHC.Integer.Type.Some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Some [eta_B2 eta_B1];

GHC.Integer.Type.None :: GHC.Integer.Type.Digits
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.None! [];


==================== STG syntax: ====================
2018-03-16 15:53:48.91781131 UTC

GHC.Integer.Type.$WPositive [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s3By]
        case dt_s3By of dt_s3Bz {
          __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Bz];
        };

GHC.Integer.Type.$WNegative [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s3BA]
        case dt_s3BA of dt_s3BB {
          __DEFAULT -> GHC.Integer.Type.Negative [dt_s3BB];
        };

GHC.Integer.Type.$WSome [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s3BC dt_s3BD]
        case dt_s3BD of dt_s3BE {
          __DEFAULT -> GHC.Integer.Type.Some [dt_s3BC dt_s3BE];
        };

GHC.Integer.Type.errorPositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [47## GHC.Integer.Type.None];

GHC.Integer.Type.errorInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.errorPositive];

GHC.Integer.Type.wordToInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s3BF]
        case w_s3BF of wild_s3BG {
          __DEFAULT ->
              let {
                sat_s3BH [Occ=Once] :: GHC.Integer.Type.Positive
                [LclId] =
                    CCCS GHC.Integer.Type.Some! [wild_s3BG GHC.Integer.Type.None];
              } in  GHC.Integer.Type.Positive [sat_s3BH];
          0## -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.integerToWord [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3BI]
        case ds_s3BI of {
          GHC.Integer.Type.Positive ds1_s3BK [Occ=Once!] ->
              case ds1_s3BK of {
                GHC.Integer.Type.Some w_s3BM [Occ=Once] _ [Occ=Dead] -> w_s3BM;
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Negative ds1_s3BO [Occ=Once!] ->
              case ds1_s3BO of {
                GHC.Integer.Type.Some w_s3BQ [Occ=Once] _ [Occ=Dead] ->
                    minusWord# [0## w_s3BQ];
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Naught -> 0##;
        };

GHC.Integer.Type.integerToInt [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [i_s3BS]
        case GHC.Integer.Type.integerToWord i_s3BS of wild_s3BT {
          __DEFAULT -> word2Int# [wild_s3BT];
        };

GHC.Integer.Type.hashInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.integerToInt eta_B1;

GHC.Integer.Type.flipBitsDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3BU]
        case ds_s3BU of {
          GHC.Integer.Type.Some w_s3BW [Occ=Once] ws_s3BX [Occ=Once] ->
              case GHC.Integer.Type.flipBitsDigits ws_s3BX of dt_s3BY {
                __DEFAULT ->
                    case not# [w_s3BW] of sat_s3BZ {
                      __DEFAULT -> GHC.Integer.Type.Some [sat_s3BZ dt_s3BY];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.flipBits1
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3C0] GHC.Integer.Type.flipBitsDigits ds_s3C0;

GHC.Integer.Type.flipBits
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.flipBits1 eta_B1;

GHC.Integer.Type.negateInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3C1]
        case ds_s3C1 of {
          GHC.Integer.Type.Positive p_s3C3 [Occ=Once] ->
              GHC.Integer.Type.Negative [p_s3C3];
          GHC.Integer.Type.Negative p_s3C4 [Occ=Once] ->
              GHC.Integer.Type.Positive [p_s3C4];
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.smallInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [i_s3C5]
        case >=# [i_s3C5 0#] of {
          __DEFAULT ->
              case negateInt# [i_s3C5] of sat_s3C7 {
                __DEFAULT ->
                    case int2Word# [sat_s3C7] of sat_s3C8 {
                      __DEFAULT ->
                          case GHC.Integer.Type.wordToInteger sat_s3C8 of sat_s3C9 {
                            __DEFAULT -> GHC.Integer.Type.negateInteger sat_s3C9;
                          };
                    };
              };
          1# ->
              case int2Word# [i_s3C5] of sat_s3Ca {
                __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s3Ca;
              };
        };

GHC.Integer.Type.decodeFloatInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [f2_s3Cb]
        case decodeFloat_Int# [f2_s3Cb] of {
          (#,#) ipv_s3Cd [Occ=Once] ipv1_s3Ce [Occ=Once] ->
              let {
                sat_s3Cf [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s3Cd] \u [] GHC.Integer.Type.smallInteger ipv_s3Cd;
              } in  (#,#) [sat_s3Cf ipv1_s3Ce];
        };

GHC.Integer.Type.absInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Cg]
        case ds_s3Cg of wild_s3Ch {
          __DEFAULT -> wild_s3Ch;
          GHC.Integer.Type.Negative x_s3Ci [Occ=Once] ->
              GHC.Integer.Type.Positive [x_s3Ci];
        };

GHC.Integer.Type.onePositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [1## GHC.Integer.Type.None];

GHC.Integer.Type.negativeOneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Negative! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.oneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.signumInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Cj]
        case ds_s3Cj of {
          GHC.Integer.Type.Positive _ [Occ=Dead] ->
              GHC.Integer.Type.oneInteger;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              GHC.Integer.Type.negativeOneInteger;
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.halfBoundUp :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3Cn] case ds_s3Cn of { () -> 9223372036854775808##; };

GHC.Integer.Type.fullBound :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3Cp] case ds_s3Cp of { () -> 18446744073709551615##; };

GHC.Integer.Type.$wsuccPositive [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s3Cr]
        case w_s3Cr of {
          GHC.Integer.Type.Some w1_s3Ct [Occ=Once!] ws_s3Cu [Occ=Once*] ->
              case w1_s3Ct of wild1_s3Cv {
                __DEFAULT ->
                    case plusWord# [wild1_s3Cv 1##] of sat_s3Cw {
                      __DEFAULT -> (#,#) [sat_s3Cw ws_s3Cu];
                    };
                18446744073709551615## ->
                    case GHC.Integer.Type.$wsuccPositive ws_s3Cu of {
                      (#,#) ww1_s3Cy [Occ=Once] ww2_s3Cz [Occ=Once] ->
                          let {
                            sat_s3CA [Occ=Once] :: GHC.Integer.Type.Digits
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [ww1_s3Cy ww2_s3Cz];
                          } in  (#,#) [0## sat_s3CA];
                    };
              };
          GHC.Integer.Type.None -> (#,#) [1## GHC.Integer.Type.None];
        };

GHC.Integer.Type.succPositive [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m1, Unf=OtherCon []] =
    [] \r [w_s3CB]
        case GHC.Integer.Type.$wsuccPositive w_s3CB of {
          (#,#) ww1_s3CD [Occ=Once] ww2_s3CE [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s3CD ww2_s3CE];
        };

lvl_r3Bo :: GHC.Integer.Type.Positive
[GblId] =
    [] \u []
        case GHC.Integer.Type.$wsuccPositive GHC.Integer.Type.None of {
          (#,#) ww1_s3CG [Occ=Once] ww2_s3CH [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s3CG ww2_s3CH];
        };

GHC.Integer.Type.plusPositive_addWithCarry [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [c_s3CI ds_s3CJ ds1_s3CK]
        case ds_s3CJ of wild_s3CL {
          GHC.Integer.Type.Some ds2_s3CM ds3_s3CN [Occ=Once*] ->
              case ds1_s3CK of wild1_s3CO {
                GHC.Integer.Type.Some y_s3CP ys'_s3CQ [Occ=Once*] ->
                    case ltWord# [ds2_s3CM y_s3CP] of {
                      __DEFAULT ->
                          case geWord# [y_s3CP 9223372036854775808##] of {
                            __DEFAULT ->
                                case geWord# [ds2_s3CM 9223372036854775808##] of {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusPositive_addWithCarry
                                              0## ds3_s3CN ys'_s3CQ
                                      of
                                      dt_s3CU
                                      { __DEFAULT ->
                                            case plusWord# [ds2_s3CM y_s3CP] of sat_s3CV {
                                              __DEFAULT ->
                                                  case plusWord# [sat_s3CV c_s3CI] of sat_s3CW {
                                                    __DEFAULT ->
                                                        GHC.Integer.Type.Some [sat_s3CW dt_s3CU];
                                                  };
                                            };
                                      };
                                  1# ->
                                      case minusWord# [ds2_s3CM 9223372036854775808##] of sat_s3CY {
                                        __DEFAULT ->
                                            case plusWord# [sat_s3CY y_s3CP] of sat_s3CZ {
                                              __DEFAULT ->
                                                  case
                                                      plusWord# [sat_s3CZ c_s3CI]
                                                  of
                                                  z_s3CX [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case
                                                            ltWord# [z_s3CX 9223372036854775808##]
                                                        of
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      1## ds3_s3CN ys'_s3CQ
                                                              of
                                                              dt_s3D1
                                                              { __DEFAULT ->
                                                                    case
                                                                        minusWord# [z_s3CX
                                                                                    9223372036854775808##]
                                                                    of
                                                                    sat_s3D2
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s3D2
                                                                                                 dt_s3D1];
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      0## ds3_s3CN ys'_s3CQ
                                                              of
                                                              dt_s3D3
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusWord# [z_s3CX
                                                                                   9223372036854775808##]
                                                                    of
                                                                    sat_s3D4
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s3D4
                                                                                                 dt_s3D3];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Integer.Type.plusPositive_addWithCarry 1## ds3_s3CN ys'_s3CQ
                                of
                                dt_s3D5
                                { __DEFAULT ->
                                      case minusWord# [y_s3CP 9223372036854775808##] of sat_s3D7 {
                                        __DEFAULT ->
                                            case
                                                minusWord# [ds2_s3CM 9223372036854775808##]
                                            of
                                            sat_s3D6
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s3D6 sat_s3D7] of sat_s3D8 {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s3D8 c_s3CI]
                                                        of
                                                        sat_s3D9
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s3D9
                                                                                     dt_s3D5];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          GHC.Integer.Type.plusPositive_addWithCarry
                              c_s3CI wild1_s3CO wild_s3CL;
                    };
                GHC.Integer.Type.None ->
                    case c_s3CI of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild_s3CL of {
                            (#,#) ww1_s3Dc [Occ=Once] ww2_s3Dd [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s3Dc ww2_s3Dd];
                          };
                      0## -> wild_s3CL;
                    };
              };
          GHC.Integer.Type.None ->
              case ds1_s3CK of wild1_s3De {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    case c_s3CI of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild1_s3De of {
                            (#,#) ww1_s3Dj [Occ=Once] ww2_s3Dk [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s3Dj ww2_s3Dk];
                          };
                      0## -> wild1_s3De;
                    };
                GHC.Integer.Type.None ->
                    case c_s3CI of {
                      __DEFAULT -> lvl_r3Bo;
                      0## -> GHC.Integer.Type.None [];
                    };
              };
        };

GHC.Integer.Type.plusPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x0_s3Dm y0_s3Dn]
        GHC.Integer.Type.plusPositive_addWithCarry 0## x0_s3Dm y0_s3Dn;

GHC.Integer.Type.minusPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Do ds1_s3Dp]
        case ds_s3Do of wild_s3Dq {
          GHC.Integer.Type.Some x_s3Dr xs_s3Ds [Occ=Once*] ->
              case ds1_s3Dp of {
                GHC.Integer.Type.Some y_s3Du ys_s3Dv [Occ=Once*] ->
                    case eqWord# [x_s3Dr y_s3Du] of {
                      __DEFAULT ->
                          case gtWord# [x_s3Dr y_s3Du] of {
                            __DEFAULT ->
                                case GHC.Integer.Type.minusPositive xs_s3Ds ys_s3Dv of sat_s3Dy {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              sat_s3Dy GHC.Integer.Type.onePositive
                                      of
                                      dt_s3Dz
                                      { __DEFAULT ->
                                            case
                                                minusWord# [18446744073709551615## y_s3Du]
                                            of
                                            sat_s3DA
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s3DA 1##] of sat_s3DB {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s3DB x_s3Dr]
                                                        of
                                                        sat_s3DC
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s3DC
                                                                                     dt_s3Dz];
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case GHC.Integer.Type.minusPositive xs_s3Ds ys_s3Dv of dt_s3DD {
                                  __DEFAULT ->
                                      case minusWord# [x_s3Dr y_s3Du] of sat_s3DE {
                                        __DEFAULT -> GHC.Integer.Type.Some [sat_s3DE dt_s3DD];
                                      };
                                };
                          };
                      1# ->
                          case GHC.Integer.Type.minusPositive xs_s3Ds ys_s3Dv of wild2_s3DF {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.Some [0## wild2_s3DF];
                            GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                          };
                    };
                GHC.Integer.Type.None -> wild_s3Dq;
              };
          GHC.Integer.Type.None ->
              case ds1_s3Dp of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Integer.Type.errorPositive;
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.twosComplementPositive1
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [p_s3DL]
        case
            GHC.Integer.Type.minusPositive p_s3DL GHC.Integer.Type.onePositive
        of
        sat_s3DM
        { __DEFAULT -> GHC.Integer.Type.flipBitsDigits sat_s3DM;
        };

GHC.Integer.Type.twosComplementPositive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.twosComplementPositive1 eta_B1;

GHC.Integer.Type.lowHalfMask :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3DN] case ds_s3DN of { () -> 4294967295##; };

GHC.Integer.Type.highHalfShift :: () -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s3DP] case ds_s3DP of { () -> 32#; };

GHC.Integer.Type.splitHalves
  :: GHC.Integer.Type.Digit
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digit #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [x_s3DR]
        case and# [x_s3DR 4294967295##] of sat_s3DT {
          __DEFAULT ->
              case uncheckedShiftRL# [x_s3DR 32#] of sat_s3DS {
                __DEFAULT -> (#,#) [sat_s3DS sat_s3DT];
              };
        };

GHC.Integer.Type.doubleFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3DU]
        case ds_s3DU of {
          GHC.Integer.Type.Some w_s3DW ds1_s3DX [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive ds1_s3DX of wild1_s3DY {
                __DEFAULT ->
                    case and# [w_s3DW 4294967295##] of sat_s3E7 {
                      __DEFAULT ->
                          case word2Int# [sat_s3E7] of sat_s3E8 {
                            __DEFAULT ->
                                case int2Double# [sat_s3E8] of sat_s3E9 {
                                  __DEFAULT ->
                                      case **## [2.0## 32.0##] of sat_s3E4 {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s3DW 32#] of sat_s3E1 {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s3E1] of sat_s3E2 {
                                                    __DEFAULT ->
                                                        case int2Double# [sat_s3E2] of sat_s3E3 {
                                                          __DEFAULT ->
                                                              case
                                                                  *## [sat_s3E3 sat_s3E4]
                                                              of
                                                              sat_s3E5
                                                              { __DEFAULT ->
                                                                    case
                                                                        **## [2.0## 64.0##]
                                                                    of
                                                                    sat_s3DZ
                                                                    { __DEFAULT ->
                                                                          case
                                                                              *## [wild1_s3DY
                                                                                   sat_s3DZ]
                                                                          of
                                                                          sat_s3E0
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +## [sat_s3E0
                                                                                         sat_s3E5]
                                                                                of
                                                                                sat_s3E6
                                                                                { __DEFAULT ->
                                                                                      +## [sat_s3E6
                                                                                           sat_s3E9];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0##;
        };

GHC.Integer.Type.doubleFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Ea]
        case ds_s3Ea of {
          GHC.Integer.Type.Positive p_s3Ec [Occ=Once] ->
              GHC.Integer.Type.doubleFromPositive p_s3Ec;
          GHC.Integer.Type.Negative p_s3Ed [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive p_s3Ed of wild1_s3Ee {
                __DEFAULT -> negateDouble# [wild1_s3Ee];
              };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.floatFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Ef]
        case ds_s3Ef of {
          GHC.Integer.Type.Some w_s3Eh ds1_s3Ei [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive ds1_s3Ei of wild1_s3Ej {
                __DEFAULT ->
                    case and# [w_s3Eh 4294967295##] of sat_s3Es {
                      __DEFAULT ->
                          case word2Int# [sat_s3Es] of sat_s3Et {
                            __DEFAULT ->
                                case int2Float# [sat_s3Et] of sat_s3Eu {
                                  __DEFAULT ->
                                      case powerFloat# [2.0# 32.0#] of sat_s3Ep {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s3Eh 32#] of sat_s3Em {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s3Em] of sat_s3En {
                                                    __DEFAULT ->
                                                        case int2Float# [sat_s3En] of sat_s3Eo {
                                                          __DEFAULT ->
                                                              case
                                                                  timesFloat# [sat_s3Eo sat_s3Ep]
                                                              of
                                                              sat_s3Eq
                                                              { __DEFAULT ->
                                                                    case
                                                                        powerFloat# [2.0# 64.0#]
                                                                    of
                                                                    sat_s3Ek
                                                                    { __DEFAULT ->
                                                                          case
                                                                              timesFloat# [wild1_s3Ej
                                                                                           sat_s3Ek]
                                                                          of
                                                                          sat_s3El
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    plusFloat# [sat_s3El
                                                                                                sat_s3Eq]
                                                                                of
                                                                                sat_s3Er
                                                                                { __DEFAULT ->
                                                                                      plusFloat# [sat_s3Er
                                                                                                  sat_s3Eu];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0#;
        };

GHC.Integer.Type.floatFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Ev]
        case ds_s3Ev of {
          GHC.Integer.Type.Positive p_s3Ex [Occ=Once] ->
              GHC.Integer.Type.floatFromPositive p_s3Ex;
          GHC.Integer.Type.Negative p_s3Ey [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive p_s3Ey of wild1_s3Ez {
                __DEFAULT -> negateFloat# [wild1_s3Ez];
              };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.timesDigit
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digit -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s3EA y_s3EB]
        case uncheckedShiftRL# [x_s3EA 32#] of ds_s3EC [Dmd=<S,U>] {
          __DEFAULT ->
              case and# [y_s3EB 4294967295##] of ds1_s3ED [Dmd=<S,U>] {
                __DEFAULT ->
                    case timesWord# [ds_s3EC ds1_s3ED] of x1_s3EE [Dmd=<S,U>] {
                      __DEFAULT ->
                          case and# [x_s3EA 4294967295##] of ds2_s3EF [Dmd=<S,U>] {
                            __DEFAULT ->
                                case uncheckedShiftRL# [y_s3EB 32#] of ds3_s3EG [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case timesWord# [ds2_s3EF ds3_s3EG] of x2_s3EH [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case timesWord# [ds2_s3EF ds1_s3ED] of sat_s3EQ {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s3ER [Occ=Once] :: GHC.Integer.Type.Positive
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [sat_s3EQ
                                                                                     GHC.Integer.Type.None];
                                                  } in 
                                                    case and# [x2_s3EH 4294967295##] of sat_s3EM {
                                                      __DEFAULT ->
                                                          case
                                                              uncheckedShiftL# [sat_s3EM 32#]
                                                          of
                                                          sat_s3EN
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s3EO [Occ=Once]
                                                                    :: GHC.Integer.Type.Positive
                                                                  [LclId] =
                                                                      CCCS GHC.Integer.Type.Some! [sat_s3EN
                                                                                                   GHC.Integer.Type.None];
                                                                } in 
                                                                  case
                                                                      and# [x1_s3EE 4294967295##]
                                                                  of
                                                                  sat_s3EJ
                                                                  { __DEFAULT ->
                                                                        case
                                                                            uncheckedShiftL# [sat_s3EJ
                                                                                              32#]
                                                                        of
                                                                        sat_s3EK
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s3EL [Occ=Once]
                                                                                  :: GHC.Integer.Type.Positive
                                                                                [LclId] =
                                                                                    CCCS GHC.Integer.Type.Some! [sat_s3EK
                                                                                                                 GHC.Integer.Type.None];
                                                                              } in 
                                                                                case
                                                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                                                        0##
                                                                                        sat_s3EL
                                                                                        sat_s3EO
                                                                                of
                                                                                sat_s3EP
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          GHC.Integer.Type.plusPositive_addWithCarry
                                                                                              0##
                                                                                              sat_s3EP
                                                                                              sat_s3ER
                                                                                      of
                                                                                      low_s3EI [Dmd=<S,1*U>]
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                uncheckedShiftRL# [x2_s3EH
                                                                                                                   32#]
                                                                                            of
                                                                                            sat_s3EV
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      uncheckedShiftRL# [x1_s3EE
                                                                                                                         32#]
                                                                                                  of
                                                                                                  sat_s3ET
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            timesWord# [ds_s3EC
                                                                                                                        ds3_s3EG]
                                                                                                        of
                                                                                                        sat_s3ES
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  plusWord# [sat_s3ES
                                                                                                                             sat_s3ET]
                                                                                                              of
                                                                                                              sat_s3EU
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        plusWord# [sat_s3EU
                                                                                                                                   sat_s3EV]
                                                                                                                    of
                                                                                                                    wild_s3EW
                                                                                                                    { __DEFAULT ->
                                                                                                                          let {
                                                                                                                            sat_s3EX [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Digits
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [wild_s3EW
                                                                                                                                                             GHC.Integer.Type.None]; } in
                                                                                                                          let {
                                                                                                                            sat_s3EY [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Positive
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [0##
                                                                                                                                                             sat_s3EX];
                                                                                                                          } in 
                                                                                                                            GHC.Integer.Type.plusPositive_addWithCarry
                                                                                                                                0##
                                                                                                                                sat_s3EY
                                                                                                                                low_s3EI;
                                                                                                                      0## ->
                                                                                                                          low_s3EI;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.timesPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3EZ ds1_s3F0]
        case ds_s3EZ of wild_s3F1 {
          GHC.Integer.Type.Some ds2_s3F2 [Occ=Once*] ds3_s3F3 [Occ=Once!] ->
              case ds1_s3F0 of wild1_s3F4 {
                GHC.Integer.Type.Some y_s3F5 [Occ=Once*] ys'_s3F6 [Occ=Once*!] ->
                    case ds3_s3F3 of wild2_s3F7 {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          case ys'_s3F6 of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                case
                                    GHC.Integer.Type.timesPositive wild2_s3F7 wild1_s3F4
                                of
                                dt_s3Fd
                                { __DEFAULT ->
                                      let {
                                        sat_s3Fg [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [0## dt_s3Fd]; } in
                                      let {
                                        sat_s3Fe [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [ds2_s3F2
                                                                         GHC.Integer.Type.None];
                                      } in 
                                        case
                                            GHC.Integer.Type.timesPositive sat_s3Fe wild1_s3F4
                                        of
                                        sat_s3Ff
                                        { __DEFAULT ->
                                              GHC.Integer.Type.plusPositive_addWithCarry
                                                  0## sat_s3Ff sat_s3Fg;
                                        };
                                };
                            GHC.Integer.Type.None ->
                                case ds2_s3F2 of wild4_s3Fh {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s3F7 wild1_s3F4
                                      of
                                      dt_s3Fi
                                      { __DEFAULT ->
                                            let {
                                              sat_s3Fk [Occ=Once] :: GHC.Integer.Type.Positive
                                              [LclId] =
                                                  CCCS GHC.Integer.Type.Some! [0## dt_s3Fi];
                                            } in 
                                              case
                                                  GHC.Integer.Type.timesDigit wild4_s3Fh y_s3F5
                                              of
                                              sat_s3Fj
                                              { __DEFAULT ->
                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                        0## sat_s3Fj sat_s3Fk;
                                              };
                                      };
                                  0## ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s3F7 wild1_s3F4
                                      of
                                      dt_s3Fl
                                      { __DEFAULT -> GHC.Integer.Type.Some [0## dt_s3Fl];
                                      };
                                };
                          };
                      GHC.Integer.Type.None ->
                          case ys'_s3F6 of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.timesPositive wild1_s3F4 wild_s3F1;
                            GHC.Integer.Type.None ->
                                GHC.Integer.Type.timesDigit ds2_s3F2 y_s3F5;
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.errorPositive;
              };
          GHC.Integer.Type.None ->
              case ds1_s3F0 of { __DEFAULT -> GHC.Integer.Type.errorPositive; };
        };

GHC.Integer.Type.timesInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Fq ds1_s3Fr]
        case ds_s3Fq of {
          GHC.Integer.Type.Positive p1_s3Ft [Occ=Once*] ->
              case ds1_s3Fr of {
                GHC.Integer.Type.Positive p2_s3Fv [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Ft p2_s3Fv of dt_s3Fw {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Fw];
                    };
                GHC.Integer.Type.Negative p2_s3Fx [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Ft p2_s3Fx of dt_s3Fy {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s3Fy];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Negative p1_s3Fz [Occ=Once*] ->
              case ds1_s3Fr of {
                GHC.Integer.Type.Positive p2_s3FB [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Fz p2_s3FB of dt_s3FC {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s3FC];
                    };
                GHC.Integer.Type.Negative p2_s3FD [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s3Fz p2_s3FD of dt_s3FE {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s3FE];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3Fr of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.twoToTheThirtytwoPositive
  :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [4294967296##
                                          GHC.Integer.Type.None];

GHC.Integer.Type.twoToTheThirtytwoInteger
  :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.twoToTheThirtytwoPositive];

GHC.Integer.Type.digitsMaybeZeroToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FG]
        case ds_s3FG of wild_s3FH {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s3FH];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.removeZeroTails [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FK]
        case ds_s3FK of {
          GHC.Integer.Type.Some w_s3FM [Occ=Once!] ds1_s3FN [Occ=Once*] ->
              case w_s3FM of wild1_s3FO {
                __DEFAULT ->
                    case GHC.Integer.Type.removeZeroTails ds1_s3FN of dt_s3FP {
                      __DEFAULT -> GHC.Integer.Type.Some [wild1_s3FO dt_s3FP];
                    };
                0## ->
                    case GHC.Integer.Type.removeZeroTails ds1_s3FN of wild2_s3FQ {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          GHC.Integer.Type.Some [0## wild2_s3FQ];
                      GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.digitsToNegativeInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FT]
        case GHC.Integer.Type.removeZeroTails ds_s3FT of wild_s3FU {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Negative [wild_s3FU];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.digitsToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3FX]
        case GHC.Integer.Type.removeZeroTails ds_s3FX of wild_s3FY {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s3FY];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.comparePositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3G1 ds1_s3G2]
        case ds_s3G1 of {
          GHC.Integer.Type.Some x_s3G4 xs_s3G5 [Occ=Once] ->
              case ds1_s3G2 of {
                GHC.Integer.Type.Some y_s3G7 ys_s3G8 [Occ=Once] ->
                    case
                        GHC.Integer.Type.comparePositive xs_s3G5 ys_s3G8
                    of
                    wild2_s3G9
                    { __DEFAULT -> wild2_s3G9;
                      GHC.Types.EQ ->
                          case ltWord# [x_s3G4 y_s3G7] of {
                            __DEFAULT ->
                                case gtWord# [x_s3G4 y_s3G7] of {
                                  __DEFAULT -> GHC.Types.EQ [];
                                  1# -> GHC.Types.GT [];
                                };
                            1# -> GHC.Types.LT [];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Types.GT [];
              };
          GHC.Integer.Type.None ->
              case ds1_s3G2 of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.None -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.compareInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Gf ds1_s3Gg]
        case ds_s3Gf of {
          GHC.Integer.Type.Positive x_s3Gi [Occ=Once] ->
              case ds1_s3Gg of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Integer.Type.Positive y_s3Gk [Occ=Once] ->
                    GHC.Integer.Type.comparePositive x_s3Gi y_s3Gk;
              };
          GHC.Integer.Type.Negative x_s3Gl [Occ=Once] ->
              case ds1_s3Gg of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.Integer.Type.Negative y_s3Gn [Occ=Once] ->
                    GHC.Integer.Type.comparePositive y_s3Gn x_s3Gl;
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3Gg of {
                GHC.Integer.Type.Positive _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.Negative _ [Occ=Dead] -> GHC.Types.GT [];
                GHC.Integer.Type.Naught -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.eqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Gr y_s3Gs]
        case GHC.Integer.Type.compareInteger x_s3Gr y_s3Gs of {
          __DEFAULT -> 0#;
          GHC.Types.EQ -> 1#;
        };

GHC.Integer.Type.eqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3Gu b_s3Gv]
        case GHC.Integer.Type.eqInteger# a_s3Gu b_s3Gv of wild_s3Gw {
          __DEFAULT -> tagToEnum# [wild_s3Gw];
        };

GHC.Integer.Type.neqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Gx y_s3Gy]
        case GHC.Integer.Type.compareInteger x_s3Gx y_s3Gy of {
          __DEFAULT -> 1#;
          GHC.Types.EQ -> 0#;
        };

GHC.Integer.Type.neqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GA b_s3GB]
        case GHC.Integer.Type.neqInteger# a_s3GA b_s3GB of wild_s3GC {
          __DEFAULT -> tagToEnum# [wild_s3GC];
        };

GHC.Integer.Type.$fEqInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

GHC.Integer.Type.ltInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GD y_s3GE]
        case GHC.Integer.Type.compareInteger x_s3GD y_s3GE of {
          __DEFAULT -> 0#;
          GHC.Types.LT -> 1#;
        };

GHC.Integer.Type.ltInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GG b_s3GH]
        case GHC.Integer.Type.ltInteger# a_s3GG b_s3GH of wild_s3GI {
          __DEFAULT -> tagToEnum# [wild_s3GI];
        };

GHC.Integer.Type.gtInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GJ y_s3GK]
        case GHC.Integer.Type.compareInteger x_s3GJ y_s3GK of {
          __DEFAULT -> 0#;
          GHC.Types.GT -> 1#;
        };

GHC.Integer.Type.gtInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GM b_s3GN]
        case GHC.Integer.Type.gtInteger# a_s3GM b_s3GN of wild_s3GO {
          __DEFAULT -> tagToEnum# [wild_s3GO];
        };

GHC.Integer.Type.leInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GP y_s3GQ]
        case GHC.Integer.Type.compareInteger x_s3GP y_s3GQ of {
          __DEFAULT -> 1#;
          GHC.Types.GT -> 0#;
        };

GHC.Integer.Type.leInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GS b_s3GT]
        case GHC.Integer.Type.leInteger# a_s3GS b_s3GT of wild_s3GU {
          __DEFAULT -> tagToEnum# [wild_s3GU];
        };

GHC.Integer.Type.geInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3GV y_s3GW]
        case GHC.Integer.Type.compareInteger x_s3GV y_s3GW of {
          __DEFAULT -> 1#;
          GHC.Types.LT -> 0#;
        };

GHC.Integer.Type.geInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s3GY b_s3GZ]
        case GHC.Integer.Type.geInteger# a_s3GY b_s3GZ of wild_s3H0 {
          __DEFAULT -> tagToEnum# [wild_s3H0];
        };

GHC.Integer.Type.$fOrdInteger_$cmax
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s3H1 y_s3H2]
        case GHC.Integer.Type.leInteger# x_s3H1 y_s3H2 of {
          __DEFAULT -> x_s3H1;
          1# -> y_s3H2;
        };

GHC.Integer.Type.$fOrdInteger_$cmin
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s3H4 y_s3H5]
        case GHC.Integer.Type.leInteger# x_s3H4 y_s3H5 of {
          __DEFAULT -> y_s3H5;
          1# -> x_s3H4;
        };

GHC.Integer.Type.$fOrdInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Integer.Type.$fEqInteger
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

GHC.Integer.Type.plusInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3H7 ds1_s3H8]
        case ds_s3H7 of wild_s3H9 {
          GHC.Integer.Type.Positive p1_s3Ha ->
              case ds1_s3H8 of {
                GHC.Integer.Type.Positive p2_s3Hc [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s3Ha p2_s3Hc
                    of
                    dt_s3Hd
                    { __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Hd];
                    };
                GHC.Integer.Type.Negative p2_s3He ->
                    case GHC.Integer.Type.comparePositive p1_s3Ha p2_s3He of {
                      GHC.Types.LT ->
                          case GHC.Integer.Type.minusPositive p2_s3He p1_s3Ha of dt_s3Hg {
                            __DEFAULT -> GHC.Integer.Type.Negative [dt_s3Hg];
                          };
                      GHC.Types.EQ -> GHC.Integer.Type.Naught [];
                      GHC.Types.GT ->
                          case GHC.Integer.Type.minusPositive p1_s3Ha p2_s3He of dt_s3Hh {
                            __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Hh];
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s3H9;
              };
          GHC.Integer.Type.Negative p1_s3Hi [Occ=Once] ->
              case ds1_s3H8 of wild1_s3Hj {
                GHC.Integer.Type.Positive _ [Occ=Dead] ->
                    GHC.Integer.Type.plusInteger wild1_s3Hj wild_s3H9;
                GHC.Integer.Type.Negative p2_s3Hl [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s3Hi p2_s3Hl
                    of
                    dt_s3Hm
                    { __DEFAULT -> GHC.Integer.Type.Negative [dt_s3Hm];
                    };
                GHC.Integer.Type.Naught -> wild_s3H9;
              };
          GHC.Integer.Type.Naught -> ds1_s3H8;
        };

GHC.Integer.Type.minusInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [i1_s3Hn i2_s3Ho]
        case GHC.Integer.Type.negateInteger i2_s3Ho of sat_s3Hp {
          __DEFAULT -> GHC.Integer.Type.plusInteger i1_s3Hn sat_s3Hp;
        };

GHC.Integer.Type.complementInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s3Hq]
        GHC.Integer.Type.minusInteger
            GHC.Integer.Type.negativeOneInteger x_s3Hq;

GHC.Integer.Type.decodeDoubleInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [d_s3Hr]
        case decodeDouble_2Int# [d_s3Hr] of {
          (#,,,#) ipv_s3Ht [Occ=Once]
                  ipv1_s3Hu [Occ=Once]
                  ipv2_s3Hv [Occ=Once]
                  ipv3_s3Hw [Occ=Once] ->
              let {
                sat_s3HC [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s3Ht ipv1_s3Hu ipv2_s3Hv] \u []
                        case GHC.Integer.Type.wordToInteger ipv2_s3Hv of sat_s3HA {
                          __DEFAULT ->
                              case GHC.Integer.Type.wordToInteger ipv1_s3Hu of sat_s3Hy {
                                __DEFAULT ->
                                    case
                                        GHC.Integer.Type.timesInteger
                                            sat_s3Hy GHC.Integer.Type.twoToTheThirtytwoInteger
                                    of
                                    sat_s3Hz
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.plusInteger sat_s3Hz sat_s3HA
                                          of
                                          sat_s3HB
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.smallInteger ipv_s3Ht
                                                of
                                                sat_s3Hx
                                                { __DEFAULT ->
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s3Hx sat_s3HB;
                                                };
                                          };
                                    };
                              };
                        };
              } in  (#,#) [sat_s3HC ipv3_s3Hw];
        };

GHC.Integer.Type.smallShiftLPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s3HD ds_s3HE]
        case ds_s3HE of ds1_s3HF {
          __DEFAULT ->
              case -# [64# ds1_s3HF] of j_s3HG {
                __DEFAULT ->
                    let {
                      f2_s3HH [Occ=LoopBreaker]
                        :: GHC.Prim.Word#
                           -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
                      [LclId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
                          sat-only [ds1_s3HF j_s3HG f2_s3HH] \r [carry_s3HI ds2_s3HJ]
                              case ds2_s3HJ of {
                                GHC.Integer.Type.Some w_s3HL ws_s3HM [Occ=Once] ->
                                    case uncheckedShiftRL# [w_s3HL j_s3HG] of sat_s3HN {
                                      __DEFAULT ->
                                          case f2_s3HH sat_s3HN ws_s3HM of dt_s3HO {
                                            __DEFAULT ->
                                                case
                                                    uncheckedShiftL# [w_s3HL ds1_s3HF]
                                                of
                                                sat_s3HP
                                                { __DEFAULT ->
                                                      case or# [sat_s3HP carry_s3HI] of sat_s3HQ {
                                                        __DEFAULT ->
                                                            GHC.Integer.Type.Some [sat_s3HQ
                                                                                   dt_s3HO];
                                                      };
                                                };
                                          };
                                    };
                                GHC.Integer.Type.None ->
                                    case carry_s3HI of wild1_s3HR {
                                      __DEFAULT ->
                                          GHC.Integer.Type.Some [wild1_s3HR GHC.Integer.Type.None];
                                      0## -> GHC.Integer.Type.None [];
                                    };
                              };
                    } in  f2_s3HH 0## p_s3HD;
              };
          0# -> p_s3HD;
        };

GHC.Integer.Type.smallShiftRPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s3HS i_s3HT]
        case p_s3HS of p1_s3HU {
          __DEFAULT ->
              case i_s3HT of wild_s3HV {
                __DEFAULT ->
                    case -# [64# wild_s3HV] of sat_s3HW {
                      __DEFAULT ->
                          case GHC.Integer.Type.smallShiftLPositive p1_s3HU sat_s3HW of {
                            GHC.Integer.Type.Some _ [Occ=Dead] p'_s3HZ [Occ=Once!] ->
                                case p'_s3HZ of wild2_s3I0 {
                                  GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Integer.Type.Positive [wild2_s3I0];
                                  GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                };
                            GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                          };
                    };
                0# -> GHC.Integer.Type.Positive [p1_s3HU];
              };
        };

GHC.Integer.Type.shiftRPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3I3 ds1_s3I4]
        case ds_s3I3 of wild_s3I5 {
          GHC.Integer.Type.Some _ [Occ=Dead] q_s3I7 [Occ=Once] ->
              case >=# [ds1_s3I4 64#] of {
                __DEFAULT ->
                    GHC.Integer.Type.smallShiftRPositive wild_s3I5 ds1_s3I4;
                1# ->
                    case -# [ds1_s3I4 64#] of sat_s3I9 {
                      __DEFAULT -> GHC.Integer.Type.shiftRPositive q_s3I7 sat_s3I9;
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftRInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s3Ia i_s3Ib]
        case ds_s3Ia of wild_s3Ic {
          GHC.Integer.Type.Positive p_s3Id [Occ=Once] ->
              GHC.Integer.Type.shiftRPositive p_s3Id i_s3Ib;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              case GHC.Integer.Type.complementInteger wild_s3Ic of sat_s3If {
                __DEFAULT ->
                    case GHC.Integer.Type.shiftRInteger sat_s3If i_s3Ib of sat_s3Ig {
                      __DEFAULT -> GHC.Integer.Type.complementInteger sat_s3Ig;
                    };
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftLPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [p_s3Ih i_s3Ii]
        case >=# [i_s3Ii 64#] of {
          __DEFAULT -> GHC.Integer.Type.smallShiftLPositive p_s3Ih i_s3Ii;
          1# ->
              case p_s3Ih of dt_s3Ik {
                __DEFAULT ->
                    case -# [i_s3Ii 64#] of sat_s3Im {
                      __DEFAULT ->
                          let {
                            sat_s3Il [Occ=Once] :: GHC.Integer.Type.Positive
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [0## dt_s3Ik];
                          } in  GHC.Integer.Type.shiftLPositive sat_s3Il sat_s3Im;
                    };
              };
        };

GHC.Integer.Type.shiftLInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3In i_s3Io]
        case ds_s3In of {
          GHC.Integer.Type.Positive p_s3Iq [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive p_s3Iq i_s3Io of dt_s3Ir {
                __DEFAULT -> GHC.Integer.Type.Positive [dt_s3Ir];
              };
          GHC.Integer.Type.Negative n_s3Is [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive n_s3Is i_s3Io of dt_s3It {
                __DEFAULT -> GHC.Integer.Type.Negative [dt_s3It];
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s3Iu ds_s3Iv]
        case ds_s3Iv of wild_s3Iw {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Some [w_s3Iu wild_s3Iw];
          GHC.Integer.Type.None ->
              case w_s3Iu of wild1_s3Iz {
                __DEFAULT ->
                    GHC.Integer.Type.Some [wild1_s3Iz GHC.Integer.Type.None];
                0## -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.quotRemPositive_g [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positives
     -> GHC.Integer.Type.Digits
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [d_s3IA ds_s3IB m_s3IC]
        case ds_s3IB of {
          GHC.Integer.Type.Nil ->
              case m_s3IC of m1_s3IE { __DEFAULT -> (#,#) [d_s3IA m1_s3IE]; };
          GHC.Integer.Type.Cons sub_s3IF subs_s3IG [Occ=Once*] ->
              case GHC.Integer.Type.comparePositive m_s3IC sub_s3IF of {
                __DEFAULT ->
                    case GHC.Integer.Type.minusPositive m_s3IC sub_s3IF of sat_s3IK {
                      __DEFAULT ->
                          case uncheckedShiftL# [d_s3IA 1#] of sat_s3II {
                            __DEFAULT ->
                                case plusWord# [sat_s3II 1##] of sat_s3IJ {
                                  __DEFAULT ->
                                      GHC.Integer.Type.quotRemPositive_g
                                          sat_s3IJ subs_s3IG sat_s3IK;
                                };
                          };
                    };
                GHC.Types.LT ->
                    case uncheckedShiftL# [d_s3IA 1#] of sat_s3IL {
                      __DEFAULT ->
                          GHC.Integer.Type.quotRemPositive_g sat_s3IL subs_s3IG m_s3IC;
                    };
              };
        };

GHC.Integer.Type.quotRemPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s3IM ys_s3IN]
        case ys_s3IN of ys1_s3IO {
          __DEFAULT ->
              let {
                subtractors_s3IP [Occ=OnceL*] :: GHC.Integer.Type.Positives
                [LclId] =
                    [ys1_s3IO] \u []
                        let {
                          lvl1_s3IQ [Occ=OnceL]
                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Unf=OtherCon []] =
                              CCCS GHC.Integer.Type.Cons! [ys1_s3IO GHC.Integer.Type.Nil]; } in
                        let {
                          mkSubtractors_s3IR [Occ=LoopBreaker]
                            :: GHC.Prim.Int# -> GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [ys1_s3IO lvl1_s3IQ mkSubtractors_s3IR] \r [n_s3IS]
                                  case n_s3IS of wild_s3IT {
                                    __DEFAULT ->
                                        let {
                                          sat_s3IW [Occ=Once]
                                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                                          [LclId] =
                                              [mkSubtractors_s3IR wild_s3IT] \u []
                                                  case -# [wild_s3IT 1#] of sat_s3IV {
                                                    __DEFAULT -> mkSubtractors_s3IR sat_s3IV;
                                                  }; } in
                                        let {
                                          sat_s3IU [Occ=Once] :: GHC.Integer.Type.Positive
                                          [LclId] =
                                              [ys1_s3IO wild_s3IT] \u []
                                                  GHC.Integer.Type.smallShiftLPositive
                                                      ys1_s3IO wild_s3IT;
                                        } in  GHC.Integer.Type.Cons [sat_s3IU sat_s3IW];
                                    0# -> lvl1_s3IQ;
                                  };
                        } in  mkSubtractors_s3IR 63#; } in
              let {
                f2_s3IX [Occ=LoopBreaker]
                  :: GHC.Integer.Type.Positive
                     -> (# GHC.Integer.Type.Digits, GHC.Integer.Type.Digits #)
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [subtractors_s3IP f2_s3IX] \r [ds_s3IY]
                        case ds_s3IY of {
                          GHC.Integer.Type.Some z_s3J0 [Occ=Once*] zs_s3J1 [Occ=Once] ->
                              case f2_s3IX zs_s3J1 of {
                                (#,#) ipv_s3J3 [Occ=Once*] ipv1_s3J4 [Occ=Once!] ->
                                    case ipv1_s3J4 of wild1_s3J5 {
                                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_s3J8 [Occ=Once] :: GHC.Integer.Type.Digits
                                            [LclId] =
                                                CCCS GHC.Integer.Type.Some! [z_s3J0 wild1_s3J5];
                                          } in 
                                            case
                                                GHC.Integer.Type.quotRemPositive_g
                                                    0## subtractors_s3IP sat_s3J8
                                            of
                                            { (#,#) ipv4_s3Ja [Occ=Once] ipv5_s3Jb [Occ=Once] ->
                                                  let {
                                                    sat_s3Jc [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        [ipv_s3J3 ipv4_s3Ja] \u []
                                                            GHC.Integer.Type.some
                                                                ipv4_s3Ja ipv_s3J3;
                                                  } in  (#,#) [sat_s3Jc ipv5_s3Jb];
                                            };
                                      GHC.Integer.Type.None ->
                                          case z_s3J0 of wild2_s3Jd {
                                            __DEFAULT ->
                                                let {
                                                  sat_s3Je [Occ=Once] :: GHC.Integer.Type.Digits
                                                  [LclId] =
                                                      CCCS GHC.Integer.Type.Some! [wild2_s3Jd
                                                                                   GHC.Integer.Type.None];
                                                } in 
                                                  case
                                                      GHC.Integer.Type.quotRemPositive_g
                                                          0## subtractors_s3IP sat_s3Je
                                                  of
                                                  { (#,#) ipv2_s3Jg [Occ=Once]
                                                          ipv3_s3Jh [Occ=Once] ->
                                                        let {
                                                          sat_s3Ji [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              [ipv_s3J3 ipv2_s3Jg] \u []
                                                                  GHC.Integer.Type.some
                                                                      ipv2_s3Jg ipv_s3J3;
                                                        } in  (#,#) [sat_s3Ji ipv3_s3Jh];
                                                  };
                                            0## ->
                                                case
                                                    GHC.Integer.Type.quotRemPositive_g
                                                        0## subtractors_s3IP GHC.Integer.Type.None
                                                of
                                                { (#,#) ipv2_s3Jk [Occ=Once] ipv3_s3Jl [Occ=Once] ->
                                                      let {
                                                        sat_s3Jm [Occ=Once]
                                                          :: GHC.Integer.Type.Digits
                                                        [LclId] =
                                                            [ipv_s3J3 ipv2_s3Jk] \u []
                                                                GHC.Integer.Type.some
                                                                    ipv2_s3Jk ipv_s3J3;
                                                      } in  (#,#) [sat_s3Jm ipv3_s3Jl];
                                                };
                                          };
                                    };
                              };
                          GHC.Integer.Type.None ->
                              (#,#) [GHC.Integer.Type.None GHC.Integer.Type.None];
                        };
              } in 
                case f2_s3IX xs_s3IM of {
                  (#,#) ipv_s3Jo [Occ=Once] ipv1_s3Jp [Occ=Once] ->
                      let {
                        sat_s3Jr [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv1_s3Jp] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv1_s3Jp; } in
                      let {
                        sat_s3Jq [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv_s3Jo] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv_s3Jo;
                      } in  (#,#) [sat_s3Jq sat_s3Jr];
                };
        };

GHC.Integer.Type.quotRemInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Js ds1_s3Jt]
        case ds_s3Js of wild_s3Ju {
          __DEFAULT ->
              case ds1_s3Jt of wild1_s3Jv {
                __DEFAULT ->
                    case wild_s3Ju of {
                      GHC.Integer.Type.Positive p1_s3Jx [Occ=Once*] ->
                          case wild1_s3Jv of {
                            GHC.Integer.Type.Positive p2_s3Jz [Occ=Once] ->
                                GHC.Integer.Type.quotRemPositive p1_s3Jx p2_s3Jz;
                            GHC.Integer.Type.Negative p2_s3JA [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s3Jx p2_s3JA of {
                                  (#,#) ipv_s3JC [Occ=Once] ipv1_s3JD [Occ=Once] ->
                                      let {
                                        sat_s3JE [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s3JC] \u []
                                                GHC.Integer.Type.negateInteger ipv_s3JC;
                                      } in  (#,#) [sat_s3JE ipv1_s3JD];
                                };
                          };
                      GHC.Integer.Type.Negative p1_s3JF [Occ=Once*] ->
                          case wild1_s3Jv of {
                            GHC.Integer.Type.Positive p2_s3JH [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s3JF p2_s3JH of {
                                  (#,#) ipv_s3JJ [Occ=Once] ipv1_s3JK [Occ=Once] ->
                                      let {
                                        sat_s3JM [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s3JK] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s3JK; } in
                                      let {
                                        sat_s3JL [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s3JJ] \u []
                                                GHC.Integer.Type.negateInteger ipv_s3JJ;
                                      } in  (#,#) [sat_s3JL sat_s3JM];
                                };
                            GHC.Integer.Type.Negative p2_s3JN [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s3JF p2_s3JN of {
                                  (#,#) ipv_s3JP [Occ=Once] ipv1_s3JQ [Occ=Once] ->
                                      let {
                                        sat_s3JR [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s3JQ] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s3JQ;
                                      } in  (#,#) [ipv_s3JP sat_s3JR];
                                };
                          };
                    };
                GHC.Integer.Type.Naught ->
                    (#,#) [GHC.Integer.Type.errorInteger
                           GHC.Integer.Type.errorInteger];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3Jt of {
                __DEFAULT ->
                    (#,#) [GHC.Integer.Type.Naught GHC.Integer.Type.Naught];
              };
        };

GHC.Integer.Type.divModInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s3JT d_s3JU]
        case GHC.Integer.Type.quotRemInteger n_s3JT d_s3JU of ds_s3JV {
          (#,#) ipv_s3JW [Occ=Once] ipv1_s3JX ->
              case GHC.Integer.Type.signumInteger d_s3JU of sat_s3JZ {
                __DEFAULT ->
                    case GHC.Integer.Type.negateInteger sat_s3JZ of sat_s3K0 {
                      __DEFAULT ->
                          case GHC.Integer.Type.signumInteger ipv1_s3JX of sat_s3JY {
                            __DEFAULT ->
                                case GHC.Integer.Type.eqInteger# sat_s3JY sat_s3K0 of {
                                  __DEFAULT -> (#,#) [ipv_s3JW ipv1_s3JX];
                                  1# ->
                                      let {
                                        sat_s3K3 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [d_s3JU ipv1_s3JX] \u []
                                                GHC.Integer.Type.plusInteger ipv1_s3JX d_s3JU; } in
                                      let {
                                        sat_s3K2 [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s3JW] \u []
                                                GHC.Integer.Type.minusInteger
                                                    ipv_s3JW GHC.Integer.Type.oneInteger;
                                      } in  (#,#) [sat_s3K2 sat_s3K3];
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.divInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s3K4 d_s3K5]
        case GHC.Integer.Type.divModInteger n_s3K4 d_s3K5 of {
          (#,#) ipv_s3K7 [Occ=Once] _ [Occ=Dead] -> ipv_s3K7;
        };

GHC.Integer.Type.modInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s3K9 d_s3Ka]
        case GHC.Integer.Type.divModInteger n_s3K9 d_s3Ka of {
          (#,#) _ [Occ=Dead] ipv1_s3Kd [Occ=Once] -> ipv1_s3Kd;
        };

GHC.Integer.Type.quotInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Ke y_s3Kf]
        case GHC.Integer.Type.quotRemInteger x_s3Ke y_s3Kf of {
          (#,#) ipv_s3Kh [Occ=Once] _ [Occ=Dead] -> ipv_s3Kh;
        };

GHC.Integer.Type.remInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s3Kj y_s3Kk]
        case GHC.Integer.Type.quotRemInteger x_s3Kj y_s3Kk of {
          (#,#) _ [Occ=Dead] ipv1_s3Kn [Occ=Once] -> ipv1_s3Kn;
        };

GHC.Integer.Type.andDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Ko ds1_s3Kp]
        case ds_s3Ko of {
          GHC.Integer.Type.Some ds2_s3Kr [Occ=Once] ds3_s3Ks [Occ=Once] ->
              case ds1_s3Kp of {
                GHC.Integer.Type.Some w2_s3Ku [Occ=Once] ws2_s3Kv [Occ=Once] ->
                    case GHC.Integer.Type.andDigits ds3_s3Ks ws2_s3Kv of dt_s3Kw {
                      __DEFAULT ->
                          case and# [ds2_s3Kr w2_s3Ku] of sat_s3Kx {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3Kx dt_s3Kw];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None ->
              case ds1_s3Kp of { __DEFAULT -> GHC.Integer.Type.None []; };
        };

GHC.Integer.Type.andDigitsOnes [Occ=LoopBreaker]
  :: GHC.Integer.Type.DigitsOnes
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Kz ds1_s3KA]
        case ds_s3Kz of {
          GHC.Integer.Type.Some ds2_s3KC [Occ=Once] ds3_s3KD [Occ=Once] ->
              case ds1_s3KA of {
                GHC.Integer.Type.Some w2_s3KF [Occ=Once] ws2_s3KG [Occ=Once] ->
                    case GHC.Integer.Type.andDigitsOnes ds3_s3KD ws2_s3KG of dt_s3KH {
                      __DEFAULT ->
                          case and# [ds2_s3KC w2_s3KF] of sat_s3KI {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3KI dt_s3KH];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None -> ds1_s3KA;
        };

GHC.Integer.Type.orDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3KJ ds1_s3KK]
        case ds_s3KJ of wild_s3KL {
          GHC.Integer.Type.Some ds2_s3KM [Occ=Once] ds3_s3KN [Occ=Once] ->
              case ds1_s3KK of {
                GHC.Integer.Type.Some w2_s3KP [Occ=Once] ds4_s3KQ [Occ=Once] ->
                    case GHC.Integer.Type.orDigits ds3_s3KN ds4_s3KQ of dt_s3KR {
                      __DEFAULT ->
                          case or# [ds2_s3KM w2_s3KP] of sat_s3KS {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3KS dt_s3KR];
                          };
                    };
                GHC.Integer.Type.None -> wild_s3KL;
              };
          GHC.Integer.Type.None -> ds1_s3KK;
        };

GHC.Integer.Type.orInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3KT i_s3KU]
        case ds_s3KT of wild_s3KV {
          __DEFAULT ->
              case i_s3KU of wild1_s3KW {
                __DEFAULT ->
                    case wild_s3KV of wild2_s3KX {
                      GHC.Integer.Type.Positive x_s3KY [Occ=Once*] ->
                          case wild1_s3KW of {
                            GHC.Integer.Type.Positive y_s3L0 [Occ=Once] ->
                                case GHC.Integer.Type.orDigits x_s3KY y_s3L0 of dt_s3L1 {
                                  __DEFAULT -> GHC.Integer.Type.Positive [dt_s3L1];
                                };
                            GHC.Integer.Type.Negative y_s3L2 [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3L2 GHC.Integer.Type.onePositive
                                of
                                sat_s3L4
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits x_s3KY of sat_s3L3 {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s3L3 sat_s3L4
                                            of
                                            sat_s3L5
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s3L5 of {
                                                    (#,#) ww1_s3L7 [Occ=Once] ww2_s3L8 [Occ=Once] ->
                                                        let {
                                                          sat_s3L9 [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s3L7
                                                                                           ww2_s3L8];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s3L9
                                                          of
                                                          wild4_s3La
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s3La];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s3Ld [Occ=Once] ->
                          case wild1_s3KW of wild3_s3Le {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.orInteger wild3_s3Le wild2_s3KX;
                            GHC.Integer.Type.Negative y_s3Lg [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3Lg GHC.Integer.Type.onePositive
                                of
                                sat_s3Li
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s3Ld GHC.Integer.Type.onePositive
                                      of
                                      sat_s3Lh
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigits sat_s3Lh sat_s3Li
                                            of
                                            sat_s3Lj
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s3Lj of {
                                                    (#,#) ww1_s3Ll [Occ=Once] ww2_s3Lm [Occ=Once] ->
                                                        let {
                                                          sat_s3Ln [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s3Ll
                                                                                           ww2_s3Lm];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s3Ln
                                                          of
                                                          wild4_s3Lo
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s3Lo];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s3KV;
              };
          GHC.Integer.Type.Naught -> i_s3KU;
        };

GHC.Integer.Type.mkInteger_f [Occ=LoopBreaker]
  :: [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s3Lr]
        case ds_s3Lr of {
          [] -> GHC.Integer.Type.Naught [];
          : ds1_s3Lt [Occ=Once!] is'_s3Lu [Occ=Once] ->
              case ds1_s3Lt of {
                GHC.Types.I# i_s3Lw [Occ=Once] ->
                    case GHC.Integer.Type.mkInteger_f is'_s3Lu of sat_s3Ly {
                      __DEFAULT ->
                          case GHC.Integer.Type.shiftLInteger sat_s3Ly 31# of sat_s3Lz {
                            __DEFAULT ->
                                case GHC.Integer.Type.smallInteger i_s3Lw of sat_s3Lx {
                                  __DEFAULT -> GHC.Integer.Type.orInteger sat_s3Lx sat_s3Lz;
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.mkInteger
  :: GHC.Types.Bool -> [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [nonNegative_s3LA is_s3LB]
        case nonNegative_s3LA of {
          GHC.Types.False ->
              case GHC.Integer.Type.mkInteger_f is_s3LB of sat_s3LD {
                __DEFAULT -> GHC.Integer.Type.negateInteger sat_s3LD;
              };
          GHC.Types.True -> GHC.Integer.Type.mkInteger_f is_s3LB;
        };

GHC.Integer.Type.andInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3LE ds1_s3LF]
        case ds_s3LE of wild_s3LG {
          __DEFAULT ->
              case ds1_s3LF of wild1_s3LH {
                __DEFAULT ->
                    case wild_s3LG of wild2_s3LI {
                      GHC.Integer.Type.Positive x_s3LJ [Occ=Once*] ->
                          case wild1_s3LH of {
                            GHC.Integer.Type.Positive y_s3LL [Occ=Once] ->
                                case GHC.Integer.Type.andDigits x_s3LJ y_s3LL of sat_s3LM {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s3LM of wild4_s3LN {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s3LN];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s3LQ [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3LQ GHC.Integer.Type.onePositive
                                of
                                sat_s3LR
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits sat_s3LR of sat_s3LS {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s3LS x_s3LJ
                                            of
                                            sat_s3LT
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s3LT
                                                  of
                                                  wild4_s3LU
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s3LU];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s3LX [Occ=Once] ->
                          case wild1_s3LH of wild3_s3LY {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.andInteger wild3_s3LY wild2_s3LI;
                            GHC.Integer.Type.Negative y_s3M0 [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3M0 GHC.Integer.Type.onePositive
                                of
                                sat_s3M2
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s3LX GHC.Integer.Type.onePositive
                                      of
                                      sat_s3M1
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.orDigits sat_s3M1 sat_s3M2
                                            of
                                            sat_s3M3
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s3M3 of {
                                                    (#,#) ww1_s3M5 [Occ=Once] ww2_s3M6 [Occ=Once] ->
                                                        let {
                                                          sat_s3M7 [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s3M5
                                                                                           ww2_s3M6];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s3M7
                                                          of
                                                          wild4_s3M8
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s3M8];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s3LF of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.testBitInteger
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s3Mc i_s3Md]
        case
            GHC.Integer.Type.shiftLInteger GHC.Integer.Type.oneInteger i_s3Md
        of
        sat_s3Me
        { __DEFAULT ->
              case GHC.Integer.Type.andInteger x_s3Mc sat_s3Me of sat_s3Mf {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.neqInteger# sat_s3Mf GHC.Integer.Type.Naught
                    of
                    wild_s3Mg
                    { __DEFAULT -> tagToEnum# [wild_s3Mg];
                    };
              };
        };

GHC.Integer.Type.xorDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Mh ds1_s3Mi]
        case ds_s3Mh of wild_s3Mj {
          GHC.Integer.Type.Some ds2_s3Mk [Occ=Once] ds3_s3Ml [Occ=Once] ->
              case ds1_s3Mi of {
                GHC.Integer.Type.Some w2_s3Mn [Occ=Once] ds4_s3Mo [Occ=Once] ->
                    case GHC.Integer.Type.xorDigits ds3_s3Ml ds4_s3Mo of dt_s3Mp {
                      __DEFAULT ->
                          case xor# [ds2_s3Mk w2_s3Mn] of sat_s3Mq {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s3Mq dt_s3Mp];
                          };
                    };
                GHC.Integer.Type.None -> wild_s3Mj;
              };
          GHC.Integer.Type.None -> ds1_s3Mi;
        };

GHC.Integer.Type.xorInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Mr i_s3Ms]
        case ds_s3Mr of wild_s3Mt {
          __DEFAULT ->
              case i_s3Ms of wild1_s3Mu {
                __DEFAULT ->
                    case wild_s3Mt of wild2_s3Mv {
                      GHC.Integer.Type.Positive x_s3Mw [Occ=Once*] ->
                          case wild1_s3Mu of {
                            GHC.Integer.Type.Positive y_s3My [Occ=Once] ->
                                case GHC.Integer.Type.xorDigits x_s3Mw y_s3My of sat_s3Mz {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s3Mz of wild4_s3MA {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s3MA];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s3MD [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3MD GHC.Integer.Type.onePositive
                                of
                                sat_s3ME
                                { __DEFAULT ->
                                      case GHC.Integer.Type.xorDigits x_s3Mw sat_s3ME of sat_s3MF {
                                        __DEFAULT ->
                                            case GHC.Integer.Type.$wsuccPositive sat_s3MF of {
                                              (#,#) ww1_s3MH [Occ=Once] ww2_s3MI [Occ=Once] ->
                                                  let {
                                                    sat_s3MJ [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [ww1_s3MH
                                                                                     ww2_s3MI];
                                                  } in 
                                                    case
                                                        GHC.Integer.Type.removeZeroTails sat_s3MJ
                                                    of
                                                    wild4_s3MK
                                                    { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                          GHC.Integer.Type.Negative [wild4_s3MK];
                                                      GHC.Integer.Type.None ->
                                                          GHC.Integer.Type.Naught [];
                                                    };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s3MN [Occ=Once] ->
                          case wild1_s3Mu of wild3_s3MO {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.xorInteger wild3_s3MO wild2_s3Mv;
                            GHC.Integer.Type.Negative y_s3MQ [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s3MQ GHC.Integer.Type.onePositive
                                of
                                sat_s3MS
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s3MN GHC.Integer.Type.onePositive
                                      of
                                      sat_s3MR
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.xorDigits sat_s3MR sat_s3MS
                                            of
                                            sat_s3MT
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s3MT
                                                  of
                                                  wild4_s3MU
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s3MU];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s3Mt;
              };
          GHC.Integer.Type.Naught -> i_s3Ms;
        };

GHC.Integer.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule4];

GHC.Integer.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Type"#;

GHC.Integer.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule2];

GHC.Integer.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Type.$trModule3
                                     GHC.Integer.Type.$trModule1];

$krep_r3Bp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r3Bq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Integer.Type.$tcDigits2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Digits"#;

GHC.Integer.Type.$tcDigits1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigits2];

GHC.Integer.Type.$tcDigits :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16647862651490579480##
                                    7069031713090282797##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigits1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'None1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigits
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'None3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'None"#;

GHC.Integer.Type.$tc'None2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'None3];

GHC.Integer.Type.$tc'None :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [903679638320298226##
                                    12977397153301278560##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'None2
                                    0#
                                    GHC.Integer.Type.$tc'None1];

$krep2_r3Br :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'None1];

GHC.Integer.Type.$tc'Some1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3Bq $krep2_r3Br];

GHC.Integer.Type.$tc'Some3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Some"#;

GHC.Integer.Type.$tc'Some2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Some3];

GHC.Integer.Type.$tc'Some :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6045911439621864566##
                                    9702873355935012388##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Some2
                                    0#
                                    GHC.Integer.Type.$tc'Some1];

GHC.Integer.Type.$tcInteger2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Integer"#;

GHC.Integer.Type.$tcInteger1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcInteger2];

GHC.Integer.Type.$tcInteger :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12260413788024328428##
                                    9583620696682509916##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcInteger1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'Naught1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'Naught3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Naught"#;

GHC.Integer.Type.$tc'Naught2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Naught3];

GHC.Integer.Type.$tc'Naught :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7287704174224038176##
                                    776397532388787230##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Naught2
                                    0#
                                    GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Negative1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Positive2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Positive"#;

GHC.Integer.Type.$tc'Positive1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Positive2];

GHC.Integer.Type.$tc'Positive :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6887932004110746796##
                                    9391890139750561935##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Positive1
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tc'Negative3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Negative"#;

GHC.Integer.Type.$tc'Negative2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Negative3];

GHC.Integer.Type.$tc'Negative :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4010847856516363452##
                                    15624358648337932456##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Negative2
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tcList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List"#;

GHC.Integer.Type.$tcList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcList2];

GHC.Integer.Type.$tcList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [732340346576824023##
                                    9653115931589988500##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcList1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep3_r3Bs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3Bp GHC.Types.[]];

GHC.Integer.Type.$tc'Nil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcList
                                              $krep3_r3Bs];

GHC.Integer.Type.$tc'Nil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Nil"#;

GHC.Integer.Type.$tc'Nil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Nil3];

GHC.Integer.Type.$tc'Nil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13538585131509945451##
                                    9366316088405446135##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Nil2
                                    1#
                                    GHC.Integer.Type.$tc'Nil1];

$krep4_r3Bt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'Nil1
                                         GHC.Integer.Type.$tc'Nil1];

GHC.Integer.Type.$tc'Cons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r3Bp $krep4_r3Bt];

GHC.Integer.Type.$tc'Cons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Cons"#;

GHC.Integer.Type.$tc'Cons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Cons3];

GHC.Integer.Type.$tc'Cons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3906777924842222150##
                                    5463288556346842885##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Cons2
                                    1#
                                    GHC.Integer.Type.$tc'Cons1];

GHC.Integer.Type.$tcDigitsOnes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DigitsOnes"#;

GHC.Integer.Type.$tcDigitsOnes1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigitsOnes2];

GHC.Integer.Type.$tcDigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4554239703586147919##
                                    6957361150436389790##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigitsOnes1
                                    0#
                                    GHC.Types.krep$*];

$krep5_r3Bu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigitsOnes
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'DigitsOnes1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         $krep5_r3Bu];

GHC.Integer.Type.$tc'DigitsOnes3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DigitsOnes"#;

GHC.Integer.Type.$tc'DigitsOnes2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'DigitsOnes3];

GHC.Integer.Type.$tc'DigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15211110739657495015##
                                    1682512192113792266##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'DigitsOnes2
                                    0#
                                    GHC.Integer.Type.$tc'DigitsOnes1];

GHC.Integer.Type.encodeDouble#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s3MX ds1_s3MY]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s3MX
                                                ds1_s3MY
                                                GHC.Prim.realWorld#]
        of
        { Unit# ds3_s3N2 [Occ=Once] -> ds3_s3N2;
        };

f_r3Bv
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s3N3 ds_s3N4 ds1_s3N5]
        case ds_s3N4 of {
          GHC.Integer.Type.Some d_s3N7 [Occ=Once] ds2_s3N8 [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s3N7
                                                      ds1_s3N5
                                                      GHC.Prim.realWorld#]
              of
              { Unit# ds4_s3Nc [Occ=Once] ->
                    case +# [ds1_s3N5 64#] of sat_s3Ne {
                      __DEFAULT ->
                          case +## [acc_s3N3 ds4_s3Nc] of sat_s3Nd {
                            __DEFAULT -> f_r3Bv sat_s3Nd ds2_s3N8 sat_s3Ne;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s3N3;
        };

GHC.Integer.Type.encodeDoubleInteger [InlPrag=NOINLINE,
                                      Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3Nf e0_s3Ng]
        case ds_s3Nf of {
          GHC.Integer.Type.Positive ds0_s3Ni [Occ=Once] ->
              f_r3Bv 0.0## ds0_s3Ni e0_s3Ng;
          GHC.Integer.Type.Negative ds1_s3Nj [Occ=Once] ->
              let {
                sat_s3Nk [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s3Nj];
              } in 
                case
                    GHC.Integer.Type.encodeDoubleInteger sat_s3Nk e0_s3Ng
                of
                wild1_s3Nl
                { __DEFAULT -> negateDouble# [wild1_s3Nl];
                };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.encodeFloat#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s3Nm ds1_s3Nn]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s3Nm
                                                ds1_s3Nn
                                                GHC.Prim.realWorld#]
        of
        { Unit# ds3_s3Nr [Occ=Once] -> ds3_s3Nr;
        };

f1_r3Bw
  :: GHC.Prim.Float#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s3Ns ds_s3Nt ds1_s3Nu]
        case ds_s3Nt of {
          GHC.Integer.Type.Some d_s3Nw [Occ=Once] ds2_s3Nx [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s3Nw
                                                      ds1_s3Nu
                                                      GHC.Prim.realWorld#]
              of
              { Unit# ds4_s3NB [Occ=Once] ->
                    case +# [ds1_s3Nu 64#] of sat_s3ND {
                      __DEFAULT ->
                          case plusFloat# [acc_s3Ns ds4_s3NB] of sat_s3NC {
                            __DEFAULT -> f1_r3Bw sat_s3NC ds2_s3Nx sat_s3ND;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s3Ns;
        };

GHC.Integer.Type.encodeFloatInteger [InlPrag=NOINLINE,
                                     Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s3NE e0_s3NF]
        case ds_s3NE of {
          GHC.Integer.Type.Positive ds0_s3NH [Occ=Once] ->
              f1_r3Bw 0.0# ds0_s3NH e0_s3NF;
          GHC.Integer.Type.Negative ds1_s3NI [Occ=Once] ->
              let {
                sat_s3NJ [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s3NI];
              } in 
                case
                    GHC.Integer.Type.encodeFloatInteger sat_s3NJ e0_s3NF
                of
                wild1_s3NK
                { __DEFAULT -> negateFloat# [wild1_s3NK];
                };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.Positive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Positive [eta_B1];

GHC.Integer.Type.Negative
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Negative [eta_B1];

GHC.Integer.Type.Naught :: GHC.Integer.Type.Integer
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Naught! [];

GHC.Integer.Type.Nil :: forall a. GHC.Integer.Type.List a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Nil! [];

GHC.Integer.Type.Cons
  :: forall a.
     a -> GHC.Integer.Type.List a -> GHC.Integer.Type.List a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Cons [eta_B2 eta_B1];

GHC.Integer.Type.Some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Some [eta_B2 eta_B1];

GHC.Integer.Type.None :: GHC.Integer.Type.Digits
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.None! [];


==================== Pre unarise: ====================
2018-03-16 15:53:54.808542367 UTC

GHC.Integer.Type.$WPositive [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7id]
        case dt_s7id of dt_s7ie {
          __DEFAULT -> GHC.Integer.Type.Positive [dt_s7ie];
        };

GHC.Integer.Type.$WNegative [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7if]
        case dt_s7if of dt_s7ig {
          __DEFAULT -> GHC.Integer.Type.Negative [dt_s7ig];
        };

GHC.Integer.Type.$WSome [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7ih dt_s7ii]
        case dt_s7ii of dt_s7ij {
          __DEFAULT -> GHC.Integer.Type.Some [dt_s7ih dt_s7ij];
        };

GHC.Integer.Type.errorPositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [47## GHC.Integer.Type.None];

GHC.Integer.Type.errorInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.errorPositive];

GHC.Integer.Type.wordToInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s7ik]
        case w_s7ik of wild_s7il {
          __DEFAULT ->
              let {
                sat_s7im [Occ=Once] :: GHC.Integer.Type.Positive
                [LclId] =
                    CCCS GHC.Integer.Type.Some! [wild_s7il GHC.Integer.Type.None];
              } in  GHC.Integer.Type.Positive [sat_s7im];
          0## -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.integerToWord [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7in]
        case ds_s7in of {
          GHC.Integer.Type.Positive ds1_s7ip [Occ=Once!] ->
              case ds1_s7ip of {
                GHC.Integer.Type.Some w_s7ir [Occ=Once] _ [Occ=Dead] -> w_s7ir;
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Negative ds1_s7it [Occ=Once!] ->
              case ds1_s7it of {
                GHC.Integer.Type.Some w_s7iv [Occ=Once] _ [Occ=Dead] ->
                    minusWord# [0## w_s7iv];
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Naught -> 0##;
        };

GHC.Integer.Type.integerToInt [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [i_s7ix]
        case GHC.Integer.Type.integerToWord i_s7ix of wild_s7iy {
          __DEFAULT -> word2Int# [wild_s7iy];
        };

GHC.Integer.Type.hashInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.integerToInt eta_B1;

GHC.Integer.Type.flipBitsDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iz]
        case ds_s7iz of {
          GHC.Integer.Type.Some w_s7iB [Occ=Once] ws_s7iC [Occ=Once] ->
              case GHC.Integer.Type.flipBitsDigits ws_s7iC of dt_s7iD {
                __DEFAULT ->
                    case not# [w_s7iB] of sat_s7iE {
                      __DEFAULT -> GHC.Integer.Type.Some [sat_s7iE dt_s7iD];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.flipBits1
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iF] GHC.Integer.Type.flipBitsDigits ds_s7iF;

GHC.Integer.Type.flipBits
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.flipBits1 eta_B1;

GHC.Integer.Type.negateInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iG]
        case ds_s7iG of {
          GHC.Integer.Type.Positive p_s7iI [Occ=Once] ->
              GHC.Integer.Type.Negative [p_s7iI];
          GHC.Integer.Type.Negative p_s7iJ [Occ=Once] ->
              GHC.Integer.Type.Positive [p_s7iJ];
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.smallInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [i_s7iK]
        case >=# [i_s7iK 0#] of {
          __DEFAULT ->
              case negateInt# [i_s7iK] of sat_s7iM {
                __DEFAULT ->
                    case int2Word# [sat_s7iM] of sat_s7iN {
                      __DEFAULT ->
                          case GHC.Integer.Type.wordToInteger sat_s7iN of sat_s7iO {
                            __DEFAULT -> GHC.Integer.Type.negateInteger sat_s7iO;
                          };
                    };
              };
          1# ->
              case int2Word# [i_s7iK] of sat_s7iP {
                __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s7iP;
              };
        };

GHC.Integer.Type.decodeFloatInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [f2_s7iQ]
        case decodeFloat_Int# [f2_s7iQ] of {
          (#,#) ipv_s7iS [Occ=Once] ipv1_s7iT [Occ=Once] ->
              let {
                sat_s7iU [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s7iS] \u [] GHC.Integer.Type.smallInteger ipv_s7iS;
              } in  (#,#) [sat_s7iU ipv1_s7iT];
        };

GHC.Integer.Type.absInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iV]
        case ds_s7iV of wild_s7iW {
          __DEFAULT -> wild_s7iW;
          GHC.Integer.Type.Negative x_s7iX [Occ=Once] ->
              GHC.Integer.Type.Positive [x_s7iX];
        };

GHC.Integer.Type.onePositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [1## GHC.Integer.Type.None];

GHC.Integer.Type.negativeOneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Negative! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.oneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.signumInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iY]
        case ds_s7iY of {
          GHC.Integer.Type.Positive _ [Occ=Dead] ->
              GHC.Integer.Type.oneInteger;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              GHC.Integer.Type.negativeOneInteger;
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.halfBoundUp :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7j2] case ds_s7j2 of { () -> 9223372036854775808##; };

GHC.Integer.Type.fullBound :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7j4] case ds_s7j4 of { () -> 18446744073709551615##; };

GHC.Integer.Type.$wsuccPositive [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s7j6]
        case w_s7j6 of {
          GHC.Integer.Type.Some w1_s7j8 [Occ=Once!] ws_s7j9 [Occ=Once*] ->
              case w1_s7j8 of wild1_s7ja {
                __DEFAULT ->
                    case plusWord# [wild1_s7ja 1##] of sat_s7jb {
                      __DEFAULT -> (#,#) [sat_s7jb ws_s7j9];
                    };
                18446744073709551615## ->
                    case GHC.Integer.Type.$wsuccPositive ws_s7j9 of {
                      (#,#) ww1_s7jd [Occ=Once] ww2_s7je [Occ=Once] ->
                          let {
                            sat_s7jf [Occ=Once] :: GHC.Integer.Type.Digits
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [ww1_s7jd ww2_s7je];
                          } in  (#,#) [0## sat_s7jf];
                    };
              };
          GHC.Integer.Type.None -> (#,#) [1## GHC.Integer.Type.None];
        };

GHC.Integer.Type.succPositive [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m1, Unf=OtherCon []] =
    [] \r [w_s7jg]
        case GHC.Integer.Type.$wsuccPositive w_s7jg of {
          (#,#) ww1_s7ji [Occ=Once] ww2_s7jj [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s7ji ww2_s7jj];
        };

lvl_r3Bo :: GHC.Integer.Type.Positive
[GblId] =
    [] \u []
        case GHC.Integer.Type.$wsuccPositive GHC.Integer.Type.None of {
          (#,#) ww1_s7jl [Occ=Once] ww2_s7jm [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s7jl ww2_s7jm];
        };

GHC.Integer.Type.plusPositive_addWithCarry [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [c_s7jn ds_s7jo ds1_s7jp]
        case ds_s7jo of wild_s7jq {
          GHC.Integer.Type.Some ds2_s7jr ds3_s7js [Occ=Once*] ->
              case ds1_s7jp of wild1_s7jt {
                GHC.Integer.Type.Some y_s7ju ys'_s7jv [Occ=Once*] ->
                    case ltWord# [ds2_s7jr y_s7ju] of {
                      __DEFAULT ->
                          case geWord# [y_s7ju 9223372036854775808##] of {
                            __DEFAULT ->
                                case geWord# [ds2_s7jr 9223372036854775808##] of {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusPositive_addWithCarry
                                              0## ds3_s7js ys'_s7jv
                                      of
                                      dt_s7jz
                                      { __DEFAULT ->
                                            case plusWord# [ds2_s7jr y_s7ju] of sat_s7jA {
                                              __DEFAULT ->
                                                  case plusWord# [sat_s7jA c_s7jn] of sat_s7jB {
                                                    __DEFAULT ->
                                                        GHC.Integer.Type.Some [sat_s7jB dt_s7jz];
                                                  };
                                            };
                                      };
                                  1# ->
                                      case minusWord# [ds2_s7jr 9223372036854775808##] of sat_s7jD {
                                        __DEFAULT ->
                                            case plusWord# [sat_s7jD y_s7ju] of sat_s7jE {
                                              __DEFAULT ->
                                                  case
                                                      plusWord# [sat_s7jE c_s7jn]
                                                  of
                                                  z_s7jC [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case
                                                            ltWord# [z_s7jC 9223372036854775808##]
                                                        of
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      1## ds3_s7js ys'_s7jv
                                                              of
                                                              dt_s7jG
                                                              { __DEFAULT ->
                                                                    case
                                                                        minusWord# [z_s7jC
                                                                                    9223372036854775808##]
                                                                    of
                                                                    sat_s7jH
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s7jH
                                                                                                 dt_s7jG];
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      0## ds3_s7js ys'_s7jv
                                                              of
                                                              dt_s7jI
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusWord# [z_s7jC
                                                                                   9223372036854775808##]
                                                                    of
                                                                    sat_s7jJ
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s7jJ
                                                                                                 dt_s7jI];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Integer.Type.plusPositive_addWithCarry 1## ds3_s7js ys'_s7jv
                                of
                                dt_s7jK
                                { __DEFAULT ->
                                      case minusWord# [y_s7ju 9223372036854775808##] of sat_s7jM {
                                        __DEFAULT ->
                                            case
                                                minusWord# [ds2_s7jr 9223372036854775808##]
                                            of
                                            sat_s7jL
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s7jL sat_s7jM] of sat_s7jN {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s7jN c_s7jn]
                                                        of
                                                        sat_s7jO
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s7jO
                                                                                     dt_s7jK];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          GHC.Integer.Type.plusPositive_addWithCarry
                              c_s7jn wild1_s7jt wild_s7jq;
                    };
                GHC.Integer.Type.None ->
                    case c_s7jn of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild_s7jq of {
                            (#,#) ww1_s7jR [Occ=Once] ww2_s7jS [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s7jR ww2_s7jS];
                          };
                      0## -> wild_s7jq;
                    };
              };
          GHC.Integer.Type.None ->
              case ds1_s7jp of wild1_s7jT {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    case c_s7jn of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild1_s7jT of {
                            (#,#) ww1_s7jY [Occ=Once] ww2_s7jZ [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s7jY ww2_s7jZ];
                          };
                      0## -> wild1_s7jT;
                    };
                GHC.Integer.Type.None ->
                    case c_s7jn of {
                      __DEFAULT -> lvl_r3Bo;
                      0## -> GHC.Integer.Type.None [];
                    };
              };
        };

GHC.Integer.Type.plusPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x0_s7k1 y0_s7k2]
        GHC.Integer.Type.plusPositive_addWithCarry 0## x0_s7k1 y0_s7k2;

GHC.Integer.Type.minusPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7k3 ds1_s7k4]
        case ds_s7k3 of wild_s7k5 {
          GHC.Integer.Type.Some x_s7k6 xs_s7k7 [Occ=Once*] ->
              case ds1_s7k4 of {
                GHC.Integer.Type.Some y_s7k9 ys_s7ka [Occ=Once*] ->
                    case eqWord# [x_s7k6 y_s7k9] of {
                      __DEFAULT ->
                          case gtWord# [x_s7k6 y_s7k9] of {
                            __DEFAULT ->
                                case GHC.Integer.Type.minusPositive xs_s7k7 ys_s7ka of sat_s7kd {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              sat_s7kd GHC.Integer.Type.onePositive
                                      of
                                      dt_s7ke
                                      { __DEFAULT ->
                                            case
                                                minusWord# [18446744073709551615## y_s7k9]
                                            of
                                            sat_s7kf
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s7kf 1##] of sat_s7kg {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s7kg x_s7k6]
                                                        of
                                                        sat_s7kh
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s7kh
                                                                                     dt_s7ke];
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case GHC.Integer.Type.minusPositive xs_s7k7 ys_s7ka of dt_s7ki {
                                  __DEFAULT ->
                                      case minusWord# [x_s7k6 y_s7k9] of sat_s7kj {
                                        __DEFAULT -> GHC.Integer.Type.Some [sat_s7kj dt_s7ki];
                                      };
                                };
                          };
                      1# ->
                          case GHC.Integer.Type.minusPositive xs_s7k7 ys_s7ka of wild2_s7kk {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.Some [0## wild2_s7kk];
                            GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                          };
                    };
                GHC.Integer.Type.None -> wild_s7k5;
              };
          GHC.Integer.Type.None ->
              case ds1_s7k4 of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Integer.Type.errorPositive;
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.twosComplementPositive1
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [p_s7kq]
        case
            GHC.Integer.Type.minusPositive p_s7kq GHC.Integer.Type.onePositive
        of
        sat_s7kr
        { __DEFAULT -> GHC.Integer.Type.flipBitsDigits sat_s7kr;
        };

GHC.Integer.Type.twosComplementPositive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.twosComplementPositive1 eta_B1;

GHC.Integer.Type.lowHalfMask :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7ks] case ds_s7ks of { () -> 4294967295##; };

GHC.Integer.Type.highHalfShift :: () -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7ku] case ds_s7ku of { () -> 32#; };

GHC.Integer.Type.splitHalves
  :: GHC.Integer.Type.Digit
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digit #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [x_s7kw]
        case and# [x_s7kw 4294967295##] of sat_s7ky {
          __DEFAULT ->
              case uncheckedShiftRL# [x_s7kw 32#] of sat_s7kx {
                __DEFAULT -> (#,#) [sat_s7kx sat_s7ky];
              };
        };

GHC.Integer.Type.doubleFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7kz]
        case ds_s7kz of {
          GHC.Integer.Type.Some w_s7kB ds1_s7kC [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive ds1_s7kC of wild1_s7kD {
                __DEFAULT ->
                    case and# [w_s7kB 4294967295##] of sat_s7kM {
                      __DEFAULT ->
                          case word2Int# [sat_s7kM] of sat_s7kN {
                            __DEFAULT ->
                                case int2Double# [sat_s7kN] of sat_s7kO {
                                  __DEFAULT ->
                                      case **## [2.0## 32.0##] of sat_s7kJ {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s7kB 32#] of sat_s7kG {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s7kG] of sat_s7kH {
                                                    __DEFAULT ->
                                                        case int2Double# [sat_s7kH] of sat_s7kI {
                                                          __DEFAULT ->
                                                              case
                                                                  *## [sat_s7kI sat_s7kJ]
                                                              of
                                                              sat_s7kK
                                                              { __DEFAULT ->
                                                                    case
                                                                        **## [2.0## 64.0##]
                                                                    of
                                                                    sat_s7kE
                                                                    { __DEFAULT ->
                                                                          case
                                                                              *## [wild1_s7kD
                                                                                   sat_s7kE]
                                                                          of
                                                                          sat_s7kF
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +## [sat_s7kF
                                                                                         sat_s7kK]
                                                                                of
                                                                                sat_s7kL
                                                                                { __DEFAULT ->
                                                                                      +## [sat_s7kL
                                                                                           sat_s7kO];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0##;
        };

GHC.Integer.Type.doubleFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7kP]
        case ds_s7kP of {
          GHC.Integer.Type.Positive p_s7kR [Occ=Once] ->
              GHC.Integer.Type.doubleFromPositive p_s7kR;
          GHC.Integer.Type.Negative p_s7kS [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive p_s7kS of wild1_s7kT {
                __DEFAULT -> negateDouble# [wild1_s7kT];
              };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.floatFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7kU]
        case ds_s7kU of {
          GHC.Integer.Type.Some w_s7kW ds1_s7kX [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive ds1_s7kX of wild1_s7kY {
                __DEFAULT ->
                    case and# [w_s7kW 4294967295##] of sat_s7l7 {
                      __DEFAULT ->
                          case word2Int# [sat_s7l7] of sat_s7l8 {
                            __DEFAULT ->
                                case int2Float# [sat_s7l8] of sat_s7l9 {
                                  __DEFAULT ->
                                      case powerFloat# [2.0# 32.0#] of sat_s7l4 {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s7kW 32#] of sat_s7l1 {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s7l1] of sat_s7l2 {
                                                    __DEFAULT ->
                                                        case int2Float# [sat_s7l2] of sat_s7l3 {
                                                          __DEFAULT ->
                                                              case
                                                                  timesFloat# [sat_s7l3 sat_s7l4]
                                                              of
                                                              sat_s7l5
                                                              { __DEFAULT ->
                                                                    case
                                                                        powerFloat# [2.0# 64.0#]
                                                                    of
                                                                    sat_s7kZ
                                                                    { __DEFAULT ->
                                                                          case
                                                                              timesFloat# [wild1_s7kY
                                                                                           sat_s7kZ]
                                                                          of
                                                                          sat_s7l0
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    plusFloat# [sat_s7l0
                                                                                                sat_s7l5]
                                                                                of
                                                                                sat_s7l6
                                                                                { __DEFAULT ->
                                                                                      plusFloat# [sat_s7l6
                                                                                                  sat_s7l9];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0#;
        };

GHC.Integer.Type.floatFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7la]
        case ds_s7la of {
          GHC.Integer.Type.Positive p_s7lc [Occ=Once] ->
              GHC.Integer.Type.floatFromPositive p_s7lc;
          GHC.Integer.Type.Negative p_s7ld [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive p_s7ld of wild1_s7le {
                __DEFAULT -> negateFloat# [wild1_s7le];
              };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.timesDigit
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digit -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s7lf y_s7lg]
        case uncheckedShiftRL# [x_s7lf 32#] of ds_s7lh [Dmd=<S,U>] {
          __DEFAULT ->
              case and# [y_s7lg 4294967295##] of ds1_s7li [Dmd=<S,U>] {
                __DEFAULT ->
                    case timesWord# [ds_s7lh ds1_s7li] of x1_s7lj [Dmd=<S,U>] {
                      __DEFAULT ->
                          case and# [x_s7lf 4294967295##] of ds2_s7lk [Dmd=<S,U>] {
                            __DEFAULT ->
                                case uncheckedShiftRL# [y_s7lg 32#] of ds3_s7ll [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case timesWord# [ds2_s7lk ds3_s7ll] of x2_s7lm [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case timesWord# [ds2_s7lk ds1_s7li] of sat_s7lv {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s7lw [Occ=Once] :: GHC.Integer.Type.Positive
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [sat_s7lv
                                                                                     GHC.Integer.Type.None];
                                                  } in 
                                                    case and# [x2_s7lm 4294967295##] of sat_s7lr {
                                                      __DEFAULT ->
                                                          case
                                                              uncheckedShiftL# [sat_s7lr 32#]
                                                          of
                                                          sat_s7ls
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s7lt [Occ=Once]
                                                                    :: GHC.Integer.Type.Positive
                                                                  [LclId] =
                                                                      CCCS GHC.Integer.Type.Some! [sat_s7ls
                                                                                                   GHC.Integer.Type.None];
                                                                } in 
                                                                  case
                                                                      and# [x1_s7lj 4294967295##]
                                                                  of
                                                                  sat_s7lo
                                                                  { __DEFAULT ->
                                                                        case
                                                                            uncheckedShiftL# [sat_s7lo
                                                                                              32#]
                                                                        of
                                                                        sat_s7lp
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s7lq [Occ=Once]
                                                                                  :: GHC.Integer.Type.Positive
                                                                                [LclId] =
                                                                                    CCCS GHC.Integer.Type.Some! [sat_s7lp
                                                                                                                 GHC.Integer.Type.None];
                                                                              } in 
                                                                                case
                                                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                                                        0##
                                                                                        sat_s7lq
                                                                                        sat_s7lt
                                                                                of
                                                                                sat_s7lu
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          GHC.Integer.Type.plusPositive_addWithCarry
                                                                                              0##
                                                                                              sat_s7lu
                                                                                              sat_s7lw
                                                                                      of
                                                                                      low_s7ln [Dmd=<S,1*U>]
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                uncheckedShiftRL# [x2_s7lm
                                                                                                                   32#]
                                                                                            of
                                                                                            sat_s7lA
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      uncheckedShiftRL# [x1_s7lj
                                                                                                                         32#]
                                                                                                  of
                                                                                                  sat_s7ly
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            timesWord# [ds_s7lh
                                                                                                                        ds3_s7ll]
                                                                                                        of
                                                                                                        sat_s7lx
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  plusWord# [sat_s7lx
                                                                                                                             sat_s7ly]
                                                                                                              of
                                                                                                              sat_s7lz
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        plusWord# [sat_s7lz
                                                                                                                                   sat_s7lA]
                                                                                                                    of
                                                                                                                    wild_s7lB
                                                                                                                    { __DEFAULT ->
                                                                                                                          let {
                                                                                                                            sat_s7lC [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Digits
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [wild_s7lB
                                                                                                                                                             GHC.Integer.Type.None]; } in
                                                                                                                          let {
                                                                                                                            sat_s7lD [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Positive
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [0##
                                                                                                                                                             sat_s7lC];
                                                                                                                          } in 
                                                                                                                            GHC.Integer.Type.plusPositive_addWithCarry
                                                                                                                                0##
                                                                                                                                sat_s7lD
                                                                                                                                low_s7ln;
                                                                                                                      0## ->
                                                                                                                          low_s7ln;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.timesPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7lE ds1_s7lF]
        case ds_s7lE of wild_s7lG {
          GHC.Integer.Type.Some ds2_s7lH [Occ=Once*] ds3_s7lI [Occ=Once!] ->
              case ds1_s7lF of wild1_s7lJ {
                GHC.Integer.Type.Some y_s7lK [Occ=Once*] ys'_s7lL [Occ=Once*!] ->
                    case ds3_s7lI of wild2_s7lM {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          case ys'_s7lL of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                case
                                    GHC.Integer.Type.timesPositive wild2_s7lM wild1_s7lJ
                                of
                                dt_s7lS
                                { __DEFAULT ->
                                      let {
                                        sat_s7lV [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [0## dt_s7lS]; } in
                                      let {
                                        sat_s7lT [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [ds2_s7lH
                                                                         GHC.Integer.Type.None];
                                      } in 
                                        case
                                            GHC.Integer.Type.timesPositive sat_s7lT wild1_s7lJ
                                        of
                                        sat_s7lU
                                        { __DEFAULT ->
                                              GHC.Integer.Type.plusPositive_addWithCarry
                                                  0## sat_s7lU sat_s7lV;
                                        };
                                };
                            GHC.Integer.Type.None ->
                                case ds2_s7lH of wild4_s7lW {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s7lM wild1_s7lJ
                                      of
                                      dt_s7lX
                                      { __DEFAULT ->
                                            let {
                                              sat_s7lZ [Occ=Once] :: GHC.Integer.Type.Positive
                                              [LclId] =
                                                  CCCS GHC.Integer.Type.Some! [0## dt_s7lX];
                                            } in 
                                              case
                                                  GHC.Integer.Type.timesDigit wild4_s7lW y_s7lK
                                              of
                                              sat_s7lY
                                              { __DEFAULT ->
                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                        0## sat_s7lY sat_s7lZ;
                                              };
                                      };
                                  0## ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s7lM wild1_s7lJ
                                      of
                                      dt_s7m0
                                      { __DEFAULT -> GHC.Integer.Type.Some [0## dt_s7m0];
                                      };
                                };
                          };
                      GHC.Integer.Type.None ->
                          case ys'_s7lL of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.timesPositive wild1_s7lJ wild_s7lG;
                            GHC.Integer.Type.None ->
                                GHC.Integer.Type.timesDigit ds2_s7lH y_s7lK;
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.errorPositive;
              };
          GHC.Integer.Type.None ->
              case ds1_s7lF of { __DEFAULT -> GHC.Integer.Type.errorPositive; };
        };

GHC.Integer.Type.timesInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7m5 ds1_s7m6]
        case ds_s7m5 of {
          GHC.Integer.Type.Positive p1_s7m8 [Occ=Once*] ->
              case ds1_s7m6 of {
                GHC.Integer.Type.Positive p2_s7ma [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7m8 p2_s7ma of dt_s7mb {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s7mb];
                    };
                GHC.Integer.Type.Negative p2_s7mc [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7m8 p2_s7mc of dt_s7md {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s7md];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Negative p1_s7me [Occ=Once*] ->
              case ds1_s7m6 of {
                GHC.Integer.Type.Positive p2_s7mg [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7me p2_s7mg of dt_s7mh {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s7mh];
                    };
                GHC.Integer.Type.Negative p2_s7mi [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7me p2_s7mi of dt_s7mj {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s7mj];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7m6 of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.twoToTheThirtytwoPositive
  :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [4294967296##
                                          GHC.Integer.Type.None];

GHC.Integer.Type.twoToTheThirtytwoInteger
  :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.twoToTheThirtytwoPositive];

GHC.Integer.Type.digitsMaybeZeroToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ml]
        case ds_s7ml of wild_s7mm {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s7mm];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.removeZeroTails [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7mp]
        case ds_s7mp of {
          GHC.Integer.Type.Some w_s7mr [Occ=Once!] ds1_s7ms [Occ=Once*] ->
              case w_s7mr of wild1_s7mt {
                __DEFAULT ->
                    case GHC.Integer.Type.removeZeroTails ds1_s7ms of dt_s7mu {
                      __DEFAULT -> GHC.Integer.Type.Some [wild1_s7mt dt_s7mu];
                    };
                0## ->
                    case GHC.Integer.Type.removeZeroTails ds1_s7ms of wild2_s7mv {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          GHC.Integer.Type.Some [0## wild2_s7mv];
                      GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.digitsToNegativeInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7my]
        case GHC.Integer.Type.removeZeroTails ds_s7my of wild_s7mz {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Negative [wild_s7mz];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.digitsToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7mC]
        case GHC.Integer.Type.removeZeroTails ds_s7mC of wild_s7mD {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s7mD];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.comparePositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7mG ds1_s7mH]
        case ds_s7mG of {
          GHC.Integer.Type.Some x_s7mJ xs_s7mK [Occ=Once] ->
              case ds1_s7mH of {
                GHC.Integer.Type.Some y_s7mM ys_s7mN [Occ=Once] ->
                    case
                        GHC.Integer.Type.comparePositive xs_s7mK ys_s7mN
                    of
                    wild2_s7mO
                    { __DEFAULT -> wild2_s7mO;
                      GHC.Types.EQ ->
                          case ltWord# [x_s7mJ y_s7mM] of {
                            __DEFAULT ->
                                case gtWord# [x_s7mJ y_s7mM] of {
                                  __DEFAULT -> GHC.Types.EQ [];
                                  1# -> GHC.Types.GT [];
                                };
                            1# -> GHC.Types.LT [];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Types.GT [];
              };
          GHC.Integer.Type.None ->
              case ds1_s7mH of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.None -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.compareInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7mU ds1_s7mV]
        case ds_s7mU of {
          GHC.Integer.Type.Positive x_s7mX [Occ=Once] ->
              case ds1_s7mV of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Integer.Type.Positive y_s7mZ [Occ=Once] ->
                    GHC.Integer.Type.comparePositive x_s7mX y_s7mZ;
              };
          GHC.Integer.Type.Negative x_s7n0 [Occ=Once] ->
              case ds1_s7mV of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.Integer.Type.Negative y_s7n2 [Occ=Once] ->
                    GHC.Integer.Type.comparePositive y_s7n2 x_s7n0;
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7mV of {
                GHC.Integer.Type.Positive _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.Negative _ [Occ=Dead] -> GHC.Types.GT [];
                GHC.Integer.Type.Naught -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.eqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7n6 y_s7n7]
        case GHC.Integer.Type.compareInteger x_s7n6 y_s7n7 of {
          __DEFAULT -> 0#;
          GHC.Types.EQ -> 1#;
        };

GHC.Integer.Type.eqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7n9 b_s7na]
        case GHC.Integer.Type.eqInteger# a_s7n9 b_s7na of wild_s7nb {
          __DEFAULT -> tagToEnum# [wild_s7nb];
        };

GHC.Integer.Type.neqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7nc y_s7nd]
        case GHC.Integer.Type.compareInteger x_s7nc y_s7nd of {
          __DEFAULT -> 1#;
          GHC.Types.EQ -> 0#;
        };

GHC.Integer.Type.neqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nf b_s7ng]
        case GHC.Integer.Type.neqInteger# a_s7nf b_s7ng of wild_s7nh {
          __DEFAULT -> tagToEnum# [wild_s7nh];
        };

GHC.Integer.Type.$fEqInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

GHC.Integer.Type.ltInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7ni y_s7nj]
        case GHC.Integer.Type.compareInteger x_s7ni y_s7nj of {
          __DEFAULT -> 0#;
          GHC.Types.LT -> 1#;
        };

GHC.Integer.Type.ltInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nl b_s7nm]
        case GHC.Integer.Type.ltInteger# a_s7nl b_s7nm of wild_s7nn {
          __DEFAULT -> tagToEnum# [wild_s7nn];
        };

GHC.Integer.Type.gtInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7no y_s7np]
        case GHC.Integer.Type.compareInteger x_s7no y_s7np of {
          __DEFAULT -> 0#;
          GHC.Types.GT -> 1#;
        };

GHC.Integer.Type.gtInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nr b_s7ns]
        case GHC.Integer.Type.gtInteger# a_s7nr b_s7ns of wild_s7nt {
          __DEFAULT -> tagToEnum# [wild_s7nt];
        };

GHC.Integer.Type.leInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7nu y_s7nv]
        case GHC.Integer.Type.compareInteger x_s7nu y_s7nv of {
          __DEFAULT -> 1#;
          GHC.Types.GT -> 0#;
        };

GHC.Integer.Type.leInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nx b_s7ny]
        case GHC.Integer.Type.leInteger# a_s7nx b_s7ny of wild_s7nz {
          __DEFAULT -> tagToEnum# [wild_s7nz];
        };

GHC.Integer.Type.geInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7nA y_s7nB]
        case GHC.Integer.Type.compareInteger x_s7nA y_s7nB of {
          __DEFAULT -> 1#;
          GHC.Types.LT -> 0#;
        };

GHC.Integer.Type.geInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nD b_s7nE]
        case GHC.Integer.Type.geInteger# a_s7nD b_s7nE of wild_s7nF {
          __DEFAULT -> tagToEnum# [wild_s7nF];
        };

GHC.Integer.Type.$fOrdInteger_$cmax
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s7nG y_s7nH]
        case GHC.Integer.Type.leInteger# x_s7nG y_s7nH of {
          __DEFAULT -> x_s7nG;
          1# -> y_s7nH;
        };

GHC.Integer.Type.$fOrdInteger_$cmin
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s7nJ y_s7nK]
        case GHC.Integer.Type.leInteger# x_s7nJ y_s7nK of {
          __DEFAULT -> y_s7nK;
          1# -> x_s7nJ;
        };

GHC.Integer.Type.$fOrdInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Integer.Type.$fEqInteger
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

GHC.Integer.Type.plusInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7nM ds1_s7nN]
        case ds_s7nM of wild_s7nO {
          GHC.Integer.Type.Positive p1_s7nP ->
              case ds1_s7nN of {
                GHC.Integer.Type.Positive p2_s7nR [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s7nP p2_s7nR
                    of
                    dt_s7nS
                    { __DEFAULT -> GHC.Integer.Type.Positive [dt_s7nS];
                    };
                GHC.Integer.Type.Negative p2_s7nT ->
                    case GHC.Integer.Type.comparePositive p1_s7nP p2_s7nT of {
                      GHC.Types.LT ->
                          case GHC.Integer.Type.minusPositive p2_s7nT p1_s7nP of dt_s7nV {
                            __DEFAULT -> GHC.Integer.Type.Negative [dt_s7nV];
                          };
                      GHC.Types.EQ -> GHC.Integer.Type.Naught [];
                      GHC.Types.GT ->
                          case GHC.Integer.Type.minusPositive p1_s7nP p2_s7nT of dt_s7nW {
                            __DEFAULT -> GHC.Integer.Type.Positive [dt_s7nW];
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s7nO;
              };
          GHC.Integer.Type.Negative p1_s7nX [Occ=Once] ->
              case ds1_s7nN of wild1_s7nY {
                GHC.Integer.Type.Positive _ [Occ=Dead] ->
                    GHC.Integer.Type.plusInteger wild1_s7nY wild_s7nO;
                GHC.Integer.Type.Negative p2_s7o0 [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s7nX p2_s7o0
                    of
                    dt_s7o1
                    { __DEFAULT -> GHC.Integer.Type.Negative [dt_s7o1];
                    };
                GHC.Integer.Type.Naught -> wild_s7nO;
              };
          GHC.Integer.Type.Naught -> ds1_s7nN;
        };

GHC.Integer.Type.minusInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [i1_s7o2 i2_s7o3]
        case GHC.Integer.Type.negateInteger i2_s7o3 of sat_s7o4 {
          __DEFAULT -> GHC.Integer.Type.plusInteger i1_s7o2 sat_s7o4;
        };

GHC.Integer.Type.complementInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s7o5]
        GHC.Integer.Type.minusInteger
            GHC.Integer.Type.negativeOneInteger x_s7o5;

GHC.Integer.Type.decodeDoubleInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [d_s7o6]
        case decodeDouble_2Int# [d_s7o6] of {
          (#,,,#) ipv_s7o8 [Occ=Once]
                  ipv1_s7o9 [Occ=Once]
                  ipv2_s7oa [Occ=Once]
                  ipv3_s7ob [Occ=Once] ->
              let {
                sat_s7oh [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s7o8 ipv1_s7o9 ipv2_s7oa] \u []
                        case GHC.Integer.Type.wordToInteger ipv2_s7oa of sat_s7of {
                          __DEFAULT ->
                              case GHC.Integer.Type.wordToInteger ipv1_s7o9 of sat_s7od {
                                __DEFAULT ->
                                    case
                                        GHC.Integer.Type.timesInteger
                                            sat_s7od GHC.Integer.Type.twoToTheThirtytwoInteger
                                    of
                                    sat_s7oe
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.plusInteger sat_s7oe sat_s7of
                                          of
                                          sat_s7og
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.smallInteger ipv_s7o8
                                                of
                                                sat_s7oc
                                                { __DEFAULT ->
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s7oc sat_s7og;
                                                };
                                          };
                                    };
                              };
                        };
              } in  (#,#) [sat_s7oh ipv3_s7ob];
        };

GHC.Integer.Type.smallShiftLPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s7oi ds_s7oj]
        case ds_s7oj of ds1_s7ok {
          __DEFAULT ->
              case -# [64# ds1_s7ok] of j_s7ol {
                __DEFAULT ->
                    let {
                      f2_s7om [Occ=LoopBreaker]
                        :: GHC.Prim.Word#
                           -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
                      [LclId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
                          sat-only [ds1_s7ok j_s7ol f2_s7om] \r [carry_s7on ds2_s7oo]
                              case ds2_s7oo of {
                                GHC.Integer.Type.Some w_s7oq ws_s7or [Occ=Once] ->
                                    case uncheckedShiftRL# [w_s7oq j_s7ol] of sat_s7os {
                                      __DEFAULT ->
                                          case f2_s7om sat_s7os ws_s7or of dt_s7ot {
                                            __DEFAULT ->
                                                case
                                                    uncheckedShiftL# [w_s7oq ds1_s7ok]
                                                of
                                                sat_s7ou
                                                { __DEFAULT ->
                                                      case or# [sat_s7ou carry_s7on] of sat_s7ov {
                                                        __DEFAULT ->
                                                            GHC.Integer.Type.Some [sat_s7ov
                                                                                   dt_s7ot];
                                                      };
                                                };
                                          };
                                    };
                                GHC.Integer.Type.None ->
                                    case carry_s7on of wild1_s7ow {
                                      __DEFAULT ->
                                          GHC.Integer.Type.Some [wild1_s7ow GHC.Integer.Type.None];
                                      0## -> GHC.Integer.Type.None [];
                                    };
                              };
                    } in  f2_s7om 0## p_s7oi;
              };
          0# -> p_s7oi;
        };

GHC.Integer.Type.smallShiftRPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s7ox i_s7oy]
        case p_s7ox of p1_s7oz {
          __DEFAULT ->
              case i_s7oy of wild_s7oA {
                __DEFAULT ->
                    case -# [64# wild_s7oA] of sat_s7oB {
                      __DEFAULT ->
                          case GHC.Integer.Type.smallShiftLPositive p1_s7oz sat_s7oB of {
                            GHC.Integer.Type.Some _ [Occ=Dead] p'_s7oE [Occ=Once!] ->
                                case p'_s7oE of wild2_s7oF {
                                  GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Integer.Type.Positive [wild2_s7oF];
                                  GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                };
                            GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                          };
                    };
                0# -> GHC.Integer.Type.Positive [p1_s7oz];
              };
        };

GHC.Integer.Type.shiftRPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7oI ds1_s7oJ]
        case ds_s7oI of wild_s7oK {
          GHC.Integer.Type.Some _ [Occ=Dead] q_s7oM [Occ=Once] ->
              case >=# [ds1_s7oJ 64#] of {
                __DEFAULT ->
                    GHC.Integer.Type.smallShiftRPositive wild_s7oK ds1_s7oJ;
                1# ->
                    case -# [ds1_s7oJ 64#] of sat_s7oO {
                      __DEFAULT -> GHC.Integer.Type.shiftRPositive q_s7oM sat_s7oO;
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftRInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s7oP i_s7oQ]
        case ds_s7oP of wild_s7oR {
          GHC.Integer.Type.Positive p_s7oS [Occ=Once] ->
              GHC.Integer.Type.shiftRPositive p_s7oS i_s7oQ;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              case GHC.Integer.Type.complementInteger wild_s7oR of sat_s7oU {
                __DEFAULT ->
                    case GHC.Integer.Type.shiftRInteger sat_s7oU i_s7oQ of sat_s7oV {
                      __DEFAULT -> GHC.Integer.Type.complementInteger sat_s7oV;
                    };
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftLPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [p_s7oW i_s7oX]
        case >=# [i_s7oX 64#] of {
          __DEFAULT -> GHC.Integer.Type.smallShiftLPositive p_s7oW i_s7oX;
          1# ->
              case p_s7oW of dt_s7oZ {
                __DEFAULT ->
                    case -# [i_s7oX 64#] of sat_s7p1 {
                      __DEFAULT ->
                          let {
                            sat_s7p0 [Occ=Once] :: GHC.Integer.Type.Positive
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [0## dt_s7oZ];
                          } in  GHC.Integer.Type.shiftLPositive sat_s7p0 sat_s7p1;
                    };
              };
        };

GHC.Integer.Type.shiftLInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7p2 i_s7p3]
        case ds_s7p2 of {
          GHC.Integer.Type.Positive p_s7p5 [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive p_s7p5 i_s7p3 of dt_s7p6 {
                __DEFAULT -> GHC.Integer.Type.Positive [dt_s7p6];
              };
          GHC.Integer.Type.Negative n_s7p7 [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive n_s7p7 i_s7p3 of dt_s7p8 {
                __DEFAULT -> GHC.Integer.Type.Negative [dt_s7p8];
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s7p9 ds_s7pa]
        case ds_s7pa of wild_s7pb {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Some [w_s7p9 wild_s7pb];
          GHC.Integer.Type.None ->
              case w_s7p9 of wild1_s7pe {
                __DEFAULT ->
                    GHC.Integer.Type.Some [wild1_s7pe GHC.Integer.Type.None];
                0## -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.quotRemPositive_g [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positives
     -> GHC.Integer.Type.Digits
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [d_s7pf ds_s7pg m_s7ph]
        case ds_s7pg of {
          GHC.Integer.Type.Nil ->
              case m_s7ph of m1_s7pj { __DEFAULT -> (#,#) [d_s7pf m1_s7pj]; };
          GHC.Integer.Type.Cons sub_s7pk subs_s7pl [Occ=Once*] ->
              case GHC.Integer.Type.comparePositive m_s7ph sub_s7pk of {
                __DEFAULT ->
                    case GHC.Integer.Type.minusPositive m_s7ph sub_s7pk of sat_s7pp {
                      __DEFAULT ->
                          case uncheckedShiftL# [d_s7pf 1#] of sat_s7pn {
                            __DEFAULT ->
                                case plusWord# [sat_s7pn 1##] of sat_s7po {
                                  __DEFAULT ->
                                      GHC.Integer.Type.quotRemPositive_g
                                          sat_s7po subs_s7pl sat_s7pp;
                                };
                          };
                    };
                GHC.Types.LT ->
                    case uncheckedShiftL# [d_s7pf 1#] of sat_s7pq {
                      __DEFAULT ->
                          GHC.Integer.Type.quotRemPositive_g sat_s7pq subs_s7pl m_s7ph;
                    };
              };
        };

GHC.Integer.Type.quotRemPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s7pr ys_s7ps]
        case ys_s7ps of ys1_s7pt {
          __DEFAULT ->
              let {
                subtractors_s7pu [Occ=OnceL*] :: GHC.Integer.Type.Positives
                [LclId] =
                    [ys1_s7pt] \u []
                        let {
                          lvl1_s7pv [Occ=OnceL]
                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Unf=OtherCon []] =
                              CCCS GHC.Integer.Type.Cons! [ys1_s7pt GHC.Integer.Type.Nil]; } in
                        let {
                          mkSubtractors_s7pw [Occ=LoopBreaker]
                            :: GHC.Prim.Int# -> GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [ys1_s7pt lvl1_s7pv mkSubtractors_s7pw] \r [n_s7px]
                                  case n_s7px of wild_s7py {
                                    __DEFAULT ->
                                        let {
                                          sat_s7pB [Occ=Once]
                                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                                          [LclId] =
                                              [mkSubtractors_s7pw wild_s7py] \u []
                                                  case -# [wild_s7py 1#] of sat_s7pA {
                                                    __DEFAULT -> mkSubtractors_s7pw sat_s7pA;
                                                  }; } in
                                        let {
                                          sat_s7pz [Occ=Once] :: GHC.Integer.Type.Positive
                                          [LclId] =
                                              [ys1_s7pt wild_s7py] \u []
                                                  GHC.Integer.Type.smallShiftLPositive
                                                      ys1_s7pt wild_s7py;
                                        } in  GHC.Integer.Type.Cons [sat_s7pz sat_s7pB];
                                    0# -> lvl1_s7pv;
                                  };
                        } in  mkSubtractors_s7pw 63#; } in
              let {
                f2_s7pC [Occ=LoopBreaker]
                  :: GHC.Integer.Type.Positive
                     -> (# GHC.Integer.Type.Digits, GHC.Integer.Type.Digits #)
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [subtractors_s7pu f2_s7pC] \r [ds_s7pD]
                        case ds_s7pD of {
                          GHC.Integer.Type.Some z_s7pF [Occ=Once*] zs_s7pG [Occ=Once] ->
                              case f2_s7pC zs_s7pG of {
                                (#,#) ipv_s7pI [Occ=Once*] ipv1_s7pJ [Occ=Once!] ->
                                    case ipv1_s7pJ of wild1_s7pK {
                                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_s7pN [Occ=Once] :: GHC.Integer.Type.Digits
                                            [LclId] =
                                                CCCS GHC.Integer.Type.Some! [z_s7pF wild1_s7pK];
                                          } in 
                                            case
                                                GHC.Integer.Type.quotRemPositive_g
                                                    0## subtractors_s7pu sat_s7pN
                                            of
                                            { (#,#) ipv4_s7pP [Occ=Once] ipv5_s7pQ [Occ=Once] ->
                                                  let {
                                                    sat_s7pR [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        [ipv_s7pI ipv4_s7pP] \u []
                                                            GHC.Integer.Type.some
                                                                ipv4_s7pP ipv_s7pI;
                                                  } in  (#,#) [sat_s7pR ipv5_s7pQ];
                                            };
                                      GHC.Integer.Type.None ->
                                          case z_s7pF of wild2_s7pS {
                                            __DEFAULT ->
                                                let {
                                                  sat_s7pT [Occ=Once] :: GHC.Integer.Type.Digits
                                                  [LclId] =
                                                      CCCS GHC.Integer.Type.Some! [wild2_s7pS
                                                                                   GHC.Integer.Type.None];
                                                } in 
                                                  case
                                                      GHC.Integer.Type.quotRemPositive_g
                                                          0## subtractors_s7pu sat_s7pT
                                                  of
                                                  { (#,#) ipv2_s7pV [Occ=Once]
                                                          ipv3_s7pW [Occ=Once] ->
                                                        let {
                                                          sat_s7pX [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              [ipv_s7pI ipv2_s7pV] \u []
                                                                  GHC.Integer.Type.some
                                                                      ipv2_s7pV ipv_s7pI;
                                                        } in  (#,#) [sat_s7pX ipv3_s7pW];
                                                  };
                                            0## ->
                                                case
                                                    GHC.Integer.Type.quotRemPositive_g
                                                        0## subtractors_s7pu GHC.Integer.Type.None
                                                of
                                                { (#,#) ipv2_s7pZ [Occ=Once] ipv3_s7q0 [Occ=Once] ->
                                                      let {
                                                        sat_s7q1 [Occ=Once]
                                                          :: GHC.Integer.Type.Digits
                                                        [LclId] =
                                                            [ipv_s7pI ipv2_s7pZ] \u []
                                                                GHC.Integer.Type.some
                                                                    ipv2_s7pZ ipv_s7pI;
                                                      } in  (#,#) [sat_s7q1 ipv3_s7q0];
                                                };
                                          };
                                    };
                              };
                          GHC.Integer.Type.None ->
                              (#,#) [GHC.Integer.Type.None GHC.Integer.Type.None];
                        };
              } in 
                case f2_s7pC xs_s7pr of {
                  (#,#) ipv_s7q3 [Occ=Once] ipv1_s7q4 [Occ=Once] ->
                      let {
                        sat_s7q6 [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv1_s7q4] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv1_s7q4; } in
                      let {
                        sat_s7q5 [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv_s7q3] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv_s7q3;
                      } in  (#,#) [sat_s7q5 sat_s7q6];
                };
        };

GHC.Integer.Type.quotRemInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7q7 ds1_s7q8]
        case ds_s7q7 of wild_s7q9 {
          __DEFAULT ->
              case ds1_s7q8 of wild1_s7qa {
                __DEFAULT ->
                    case wild_s7q9 of {
                      GHC.Integer.Type.Positive p1_s7qc [Occ=Once*] ->
                          case wild1_s7qa of {
                            GHC.Integer.Type.Positive p2_s7qe [Occ=Once] ->
                                GHC.Integer.Type.quotRemPositive p1_s7qc p2_s7qe;
                            GHC.Integer.Type.Negative p2_s7qf [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s7qc p2_s7qf of {
                                  (#,#) ipv_s7qh [Occ=Once] ipv1_s7qi [Occ=Once] ->
                                      let {
                                        sat_s7qj [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s7qh] \u []
                                                GHC.Integer.Type.negateInteger ipv_s7qh;
                                      } in  (#,#) [sat_s7qj ipv1_s7qi];
                                };
                          };
                      GHC.Integer.Type.Negative p1_s7qk [Occ=Once*] ->
                          case wild1_s7qa of {
                            GHC.Integer.Type.Positive p2_s7qm [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s7qk p2_s7qm of {
                                  (#,#) ipv_s7qo [Occ=Once] ipv1_s7qp [Occ=Once] ->
                                      let {
                                        sat_s7qr [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s7qp] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s7qp; } in
                                      let {
                                        sat_s7qq [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s7qo] \u []
                                                GHC.Integer.Type.negateInteger ipv_s7qo;
                                      } in  (#,#) [sat_s7qq sat_s7qr];
                                };
                            GHC.Integer.Type.Negative p2_s7qs [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s7qk p2_s7qs of {
                                  (#,#) ipv_s7qu [Occ=Once] ipv1_s7qv [Occ=Once] ->
                                      let {
                                        sat_s7qw [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s7qv] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s7qv;
                                      } in  (#,#) [ipv_s7qu sat_s7qw];
                                };
                          };
                    };
                GHC.Integer.Type.Naught ->
                    (#,#) [GHC.Integer.Type.errorInteger
                           GHC.Integer.Type.errorInteger];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7q8 of {
                __DEFAULT ->
                    (#,#) [GHC.Integer.Type.Naught GHC.Integer.Type.Naught];
              };
        };

GHC.Integer.Type.divModInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s7qy d_s7qz]
        case GHC.Integer.Type.quotRemInteger n_s7qy d_s7qz of ds_s7qA {
          (#,#) ipv_s7qB [Occ=Once] ipv1_s7qC ->
              case GHC.Integer.Type.signumInteger d_s7qz of sat_s7qE {
                __DEFAULT ->
                    case GHC.Integer.Type.negateInteger sat_s7qE of sat_s7qF {
                      __DEFAULT ->
                          case GHC.Integer.Type.signumInteger ipv1_s7qC of sat_s7qD {
                            __DEFAULT ->
                                case GHC.Integer.Type.eqInteger# sat_s7qD sat_s7qF of {
                                  __DEFAULT -> ds_s7qA;
                                  1# ->
                                      let {
                                        sat_s7qI [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [d_s7qz ipv1_s7qC] \u []
                                                GHC.Integer.Type.plusInteger ipv1_s7qC d_s7qz; } in
                                      let {
                                        sat_s7qH [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s7qB] \u []
                                                GHC.Integer.Type.minusInteger
                                                    ipv_s7qB GHC.Integer.Type.oneInteger;
                                      } in  (#,#) [sat_s7qH sat_s7qI];
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.divInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s7qJ d_s7qK]
        case GHC.Integer.Type.divModInteger n_s7qJ d_s7qK of {
          (#,#) ipv_s7qM [Occ=Once] _ [Occ=Dead] -> ipv_s7qM;
        };

GHC.Integer.Type.modInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s7qO d_s7qP]
        case GHC.Integer.Type.divModInteger n_s7qO d_s7qP of {
          (#,#) _ [Occ=Dead] ipv1_s7qS [Occ=Once] -> ipv1_s7qS;
        };

GHC.Integer.Type.quotInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7qT y_s7qU]
        case GHC.Integer.Type.quotRemInteger x_s7qT y_s7qU of {
          (#,#) ipv_s7qW [Occ=Once] _ [Occ=Dead] -> ipv_s7qW;
        };

GHC.Integer.Type.remInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7qY y_s7qZ]
        case GHC.Integer.Type.quotRemInteger x_s7qY y_s7qZ of {
          (#,#) _ [Occ=Dead] ipv1_s7r2 [Occ=Once] -> ipv1_s7r2;
        };

GHC.Integer.Type.andDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7r3 ds1_s7r4]
        case ds_s7r3 of {
          GHC.Integer.Type.Some ds2_s7r6 [Occ=Once] ds3_s7r7 [Occ=Once] ->
              case ds1_s7r4 of {
                GHC.Integer.Type.Some w2_s7r9 [Occ=Once] ws2_s7ra [Occ=Once] ->
                    case GHC.Integer.Type.andDigits ds3_s7r7 ws2_s7ra of dt_s7rb {
                      __DEFAULT ->
                          case and# [ds2_s7r6 w2_s7r9] of sat_s7rc {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7rc dt_s7rb];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None ->
              case ds1_s7r4 of { __DEFAULT -> GHC.Integer.Type.None []; };
        };

GHC.Integer.Type.andDigitsOnes [Occ=LoopBreaker]
  :: GHC.Integer.Type.DigitsOnes
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7re ds1_s7rf]
        case ds_s7re of {
          GHC.Integer.Type.Some ds2_s7rh [Occ=Once] ds3_s7ri [Occ=Once] ->
              case ds1_s7rf of {
                GHC.Integer.Type.Some w2_s7rk [Occ=Once] ws2_s7rl [Occ=Once] ->
                    case GHC.Integer.Type.andDigitsOnes ds3_s7ri ws2_s7rl of dt_s7rm {
                      __DEFAULT ->
                          case and# [ds2_s7rh w2_s7rk] of sat_s7rn {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7rn dt_s7rm];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None -> ds1_s7rf;
        };

GHC.Integer.Type.orDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7ro ds1_s7rp]
        case ds_s7ro of wild_s7rq {
          GHC.Integer.Type.Some ds2_s7rr [Occ=Once] ds3_s7rs [Occ=Once] ->
              case ds1_s7rp of {
                GHC.Integer.Type.Some w2_s7ru [Occ=Once] ds4_s7rv [Occ=Once] ->
                    case GHC.Integer.Type.orDigits ds3_s7rs ds4_s7rv of dt_s7rw {
                      __DEFAULT ->
                          case or# [ds2_s7rr w2_s7ru] of sat_s7rx {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7rx dt_s7rw];
                          };
                    };
                GHC.Integer.Type.None -> wild_s7rq;
              };
          GHC.Integer.Type.None -> ds1_s7rp;
        };

GHC.Integer.Type.orInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7ry i_s7rz]
        case ds_s7ry of wild_s7rA {
          __DEFAULT ->
              case i_s7rz of wild1_s7rB {
                __DEFAULT ->
                    case wild_s7rA of wild2_s7rC {
                      GHC.Integer.Type.Positive x_s7rD [Occ=Once*] ->
                          case wild1_s7rB of {
                            GHC.Integer.Type.Positive y_s7rF [Occ=Once] ->
                                case GHC.Integer.Type.orDigits x_s7rD y_s7rF of dt_s7rG {
                                  __DEFAULT -> GHC.Integer.Type.Positive [dt_s7rG];
                                };
                            GHC.Integer.Type.Negative y_s7rH [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7rH GHC.Integer.Type.onePositive
                                of
                                sat_s7rJ
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits x_s7rD of sat_s7rI {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s7rI sat_s7rJ
                                            of
                                            sat_s7rK
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s7rK of {
                                                    (#,#) ww1_s7rM [Occ=Once] ww2_s7rN [Occ=Once] ->
                                                        let {
                                                          sat_s7rO [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s7rM
                                                                                           ww2_s7rN];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s7rO
                                                          of
                                                          wild4_s7rP
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s7rP];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s7rS [Occ=Once] ->
                          case wild1_s7rB of wild3_s7rT {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.orInteger wild3_s7rT wild2_s7rC;
                            GHC.Integer.Type.Negative y_s7rV [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7rV GHC.Integer.Type.onePositive
                                of
                                sat_s7rX
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s7rS GHC.Integer.Type.onePositive
                                      of
                                      sat_s7rW
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigits sat_s7rW sat_s7rX
                                            of
                                            sat_s7rY
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s7rY of {
                                                    (#,#) ww1_s7s0 [Occ=Once] ww2_s7s1 [Occ=Once] ->
                                                        let {
                                                          sat_s7s2 [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s7s0
                                                                                           ww2_s7s1];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s7s2
                                                          of
                                                          wild4_s7s3
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s7s3];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s7rA;
              };
          GHC.Integer.Type.Naught -> i_s7rz;
        };

GHC.Integer.Type.mkInteger_f [Occ=LoopBreaker]
  :: [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7s6]
        case ds_s7s6 of {
          [] -> GHC.Integer.Type.Naught [];
          : ds1_s7s8 [Occ=Once!] is'_s7s9 [Occ=Once] ->
              case ds1_s7s8 of {
                GHC.Types.I# i_s7sb [Occ=Once] ->
                    case GHC.Integer.Type.mkInteger_f is'_s7s9 of sat_s7sd {
                      __DEFAULT ->
                          case GHC.Integer.Type.shiftLInteger sat_s7sd 31# of sat_s7se {
                            __DEFAULT ->
                                case GHC.Integer.Type.smallInteger i_s7sb of sat_s7sc {
                                  __DEFAULT -> GHC.Integer.Type.orInteger sat_s7sc sat_s7se;
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.mkInteger
  :: GHC.Types.Bool -> [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [nonNegative_s7sf is_s7sg]
        case nonNegative_s7sf of {
          GHC.Types.False ->
              case GHC.Integer.Type.mkInteger_f is_s7sg of sat_s7si {
                __DEFAULT -> GHC.Integer.Type.negateInteger sat_s7si;
              };
          GHC.Types.True -> GHC.Integer.Type.mkInteger_f is_s7sg;
        };

GHC.Integer.Type.andInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7sj ds1_s7sk]
        case ds_s7sj of wild_s7sl {
          __DEFAULT ->
              case ds1_s7sk of wild1_s7sm {
                __DEFAULT ->
                    case wild_s7sl of wild2_s7sn {
                      GHC.Integer.Type.Positive x_s7so [Occ=Once*] ->
                          case wild1_s7sm of {
                            GHC.Integer.Type.Positive y_s7sq [Occ=Once] ->
                                case GHC.Integer.Type.andDigits x_s7so y_s7sq of sat_s7sr {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s7sr of wild4_s7ss {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s7ss];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s7sv [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7sv GHC.Integer.Type.onePositive
                                of
                                sat_s7sw
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits sat_s7sw of sat_s7sx {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s7sx x_s7so
                                            of
                                            sat_s7sy
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s7sy
                                                  of
                                                  wild4_s7sz
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s7sz];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s7sC [Occ=Once] ->
                          case wild1_s7sm of wild3_s7sD {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.andInteger wild3_s7sD wild2_s7sn;
                            GHC.Integer.Type.Negative y_s7sF [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7sF GHC.Integer.Type.onePositive
                                of
                                sat_s7sH
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s7sC GHC.Integer.Type.onePositive
                                      of
                                      sat_s7sG
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.orDigits sat_s7sG sat_s7sH
                                            of
                                            sat_s7sI
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s7sI of {
                                                    (#,#) ww1_s7sK [Occ=Once] ww2_s7sL [Occ=Once] ->
                                                        let {
                                                          sat_s7sM [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s7sK
                                                                                           ww2_s7sL];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s7sM
                                                          of
                                                          wild4_s7sN
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s7sN];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7sk of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.testBitInteger
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s7sR i_s7sS]
        case
            GHC.Integer.Type.shiftLInteger GHC.Integer.Type.oneInteger i_s7sS
        of
        sat_s7sT
        { __DEFAULT ->
              case GHC.Integer.Type.andInteger x_s7sR sat_s7sT of sat_s7sU {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.neqInteger# sat_s7sU GHC.Integer.Type.Naught
                    of
                    wild_s7sV
                    { __DEFAULT -> tagToEnum# [wild_s7sV];
                    };
              };
        };

GHC.Integer.Type.xorDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7sW ds1_s7sX]
        case ds_s7sW of wild_s7sY {
          GHC.Integer.Type.Some ds2_s7sZ [Occ=Once] ds3_s7t0 [Occ=Once] ->
              case ds1_s7sX of {
                GHC.Integer.Type.Some w2_s7t2 [Occ=Once] ds4_s7t3 [Occ=Once] ->
                    case GHC.Integer.Type.xorDigits ds3_s7t0 ds4_s7t3 of dt_s7t4 {
                      __DEFAULT ->
                          case xor# [ds2_s7sZ w2_s7t2] of sat_s7t5 {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7t5 dt_s7t4];
                          };
                    };
                GHC.Integer.Type.None -> wild_s7sY;
              };
          GHC.Integer.Type.None -> ds1_s7sX;
        };

GHC.Integer.Type.xorInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7t6 i_s7t7]
        case ds_s7t6 of wild_s7t8 {
          __DEFAULT ->
              case i_s7t7 of wild1_s7t9 {
                __DEFAULT ->
                    case wild_s7t8 of wild2_s7ta {
                      GHC.Integer.Type.Positive x_s7tb [Occ=Once*] ->
                          case wild1_s7t9 of {
                            GHC.Integer.Type.Positive y_s7td [Occ=Once] ->
                                case GHC.Integer.Type.xorDigits x_s7tb y_s7td of sat_s7te {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s7te of wild4_s7tf {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s7tf];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s7ti [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7ti GHC.Integer.Type.onePositive
                                of
                                sat_s7tj
                                { __DEFAULT ->
                                      case GHC.Integer.Type.xorDigits x_s7tb sat_s7tj of sat_s7tk {
                                        __DEFAULT ->
                                            case GHC.Integer.Type.$wsuccPositive sat_s7tk of {
                                              (#,#) ww1_s7tm [Occ=Once] ww2_s7tn [Occ=Once] ->
                                                  let {
                                                    sat_s7to [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [ww1_s7tm
                                                                                     ww2_s7tn];
                                                  } in 
                                                    case
                                                        GHC.Integer.Type.removeZeroTails sat_s7to
                                                    of
                                                    wild4_s7tp
                                                    { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                          GHC.Integer.Type.Negative [wild4_s7tp];
                                                      GHC.Integer.Type.None ->
                                                          GHC.Integer.Type.Naught [];
                                                    };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s7ts [Occ=Once] ->
                          case wild1_s7t9 of wild3_s7tt {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.xorInteger wild3_s7tt wild2_s7ta;
                            GHC.Integer.Type.Negative y_s7tv [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7tv GHC.Integer.Type.onePositive
                                of
                                sat_s7tx
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s7ts GHC.Integer.Type.onePositive
                                      of
                                      sat_s7tw
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.xorDigits sat_s7tw sat_s7tx
                                            of
                                            sat_s7ty
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s7ty
                                                  of
                                                  wild4_s7tz
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s7tz];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s7t8;
              };
          GHC.Integer.Type.Naught -> i_s7t7;
        };

GHC.Integer.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule4];

GHC.Integer.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Type"#;

GHC.Integer.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule2];

GHC.Integer.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Type.$trModule3
                                     GHC.Integer.Type.$trModule1];

$krep_r3Bp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r3Bq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Integer.Type.$tcDigits2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Digits"#;

GHC.Integer.Type.$tcDigits1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigits2];

GHC.Integer.Type.$tcDigits :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16647862651490579480##
                                    7069031713090282797##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigits1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'None1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigits
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'None3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'None"#;

GHC.Integer.Type.$tc'None2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'None3];

GHC.Integer.Type.$tc'None :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [903679638320298226##
                                    12977397153301278560##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'None2
                                    0#
                                    GHC.Integer.Type.$tc'None1];

$krep2_r3Br :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'None1];

GHC.Integer.Type.$tc'Some1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3Bq $krep2_r3Br];

GHC.Integer.Type.$tc'Some3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Some"#;

GHC.Integer.Type.$tc'Some2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Some3];

GHC.Integer.Type.$tc'Some :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6045911439621864566##
                                    9702873355935012388##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Some2
                                    0#
                                    GHC.Integer.Type.$tc'Some1];

GHC.Integer.Type.$tcInteger2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Integer"#;

GHC.Integer.Type.$tcInteger1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcInteger2];

GHC.Integer.Type.$tcInteger :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12260413788024328428##
                                    9583620696682509916##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcInteger1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'Naught1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'Naught3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Naught"#;

GHC.Integer.Type.$tc'Naught2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Naught3];

GHC.Integer.Type.$tc'Naught :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7287704174224038176##
                                    776397532388787230##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Naught2
                                    0#
                                    GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Negative1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Positive2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Positive"#;

GHC.Integer.Type.$tc'Positive1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Positive2];

GHC.Integer.Type.$tc'Positive :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6887932004110746796##
                                    9391890139750561935##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Positive1
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tc'Negative3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Negative"#;

GHC.Integer.Type.$tc'Negative2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Negative3];

GHC.Integer.Type.$tc'Negative :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4010847856516363452##
                                    15624358648337932456##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Negative2
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tcList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List"#;

GHC.Integer.Type.$tcList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcList2];

GHC.Integer.Type.$tcList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [732340346576824023##
                                    9653115931589988500##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcList1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep3_r3Bs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3Bp GHC.Types.[]];

GHC.Integer.Type.$tc'Nil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcList
                                              $krep3_r3Bs];

GHC.Integer.Type.$tc'Nil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Nil"#;

GHC.Integer.Type.$tc'Nil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Nil3];

GHC.Integer.Type.$tc'Nil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13538585131509945451##
                                    9366316088405446135##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Nil2
                                    1#
                                    GHC.Integer.Type.$tc'Nil1];

$krep4_r3Bt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'Nil1
                                         GHC.Integer.Type.$tc'Nil1];

GHC.Integer.Type.$tc'Cons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r3Bp $krep4_r3Bt];

GHC.Integer.Type.$tc'Cons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Cons"#;

GHC.Integer.Type.$tc'Cons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Cons3];

GHC.Integer.Type.$tc'Cons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3906777924842222150##
                                    5463288556346842885##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Cons2
                                    1#
                                    GHC.Integer.Type.$tc'Cons1];

GHC.Integer.Type.$tcDigitsOnes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DigitsOnes"#;

GHC.Integer.Type.$tcDigitsOnes1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigitsOnes2];

GHC.Integer.Type.$tcDigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4554239703586147919##
                                    6957361150436389790##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigitsOnes1
                                    0#
                                    GHC.Types.krep$*];

$krep5_r3Bu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigitsOnes
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'DigitsOnes1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         $krep5_r3Bu];

GHC.Integer.Type.$tc'DigitsOnes3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DigitsOnes"#;

GHC.Integer.Type.$tc'DigitsOnes2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'DigitsOnes3];

GHC.Integer.Type.$tc'DigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15211110739657495015##
                                    1682512192113792266##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'DigitsOnes2
                                    0#
                                    GHC.Integer.Type.$tc'DigitsOnes1];

GHC.Integer.Type.encodeDouble#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s7tC ds1_s7tD]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s7tC
                                                ds1_s7tD
                                                GHC.Prim.realWorld#]
        of
        { (#,#) _ [Occ=Dead] ds3_s7tH [Occ=Once] -> ds3_s7tH;
        };

f_r3Bv
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s7tI ds_s7tJ ds1_s7tK]
        case ds_s7tJ of {
          GHC.Integer.Type.Some d_s7tM [Occ=Once] ds2_s7tN [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s7tM
                                                      ds1_s7tK
                                                      GHC.Prim.realWorld#]
              of
              { (#,#) _ [Occ=Dead] ds4_s7tR [Occ=Once] ->
                    case +# [ds1_s7tK 64#] of sat_s7tT {
                      __DEFAULT ->
                          case +## [acc_s7tI ds4_s7tR] of sat_s7tS {
                            __DEFAULT -> f_r3Bv sat_s7tS ds2_s7tN sat_s7tT;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s7tI;
        };

GHC.Integer.Type.encodeDoubleInteger [InlPrag=NOINLINE,
                                      Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7tU e0_s7tV]
        case ds_s7tU of {
          GHC.Integer.Type.Positive ds0_s7tX [Occ=Once] ->
              f_r3Bv 0.0## ds0_s7tX e0_s7tV;
          GHC.Integer.Type.Negative ds1_s7tY [Occ=Once] ->
              let {
                sat_s7tZ [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s7tY];
              } in 
                case
                    GHC.Integer.Type.encodeDoubleInteger sat_s7tZ e0_s7tV
                of
                wild1_s7u0
                { __DEFAULT -> negateDouble# [wild1_s7u0];
                };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.encodeFloat#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s7u1 ds1_s7u2]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s7u1
                                                ds1_s7u2
                                                GHC.Prim.realWorld#]
        of
        { (#,#) _ [Occ=Dead] ds3_s7u6 [Occ=Once] -> ds3_s7u6;
        };

f1_r3Bw
  :: GHC.Prim.Float#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s7u7 ds_s7u8 ds1_s7u9]
        case ds_s7u8 of {
          GHC.Integer.Type.Some d_s7ub [Occ=Once] ds2_s7uc [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s7ub
                                                      ds1_s7u9
                                                      GHC.Prim.realWorld#]
              of
              { (#,#) _ [Occ=Dead] ds4_s7ug [Occ=Once] ->
                    case +# [ds1_s7u9 64#] of sat_s7ui {
                      __DEFAULT ->
                          case plusFloat# [acc_s7u7 ds4_s7ug] of sat_s7uh {
                            __DEFAULT -> f1_r3Bw sat_s7uh ds2_s7uc sat_s7ui;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s7u7;
        };

GHC.Integer.Type.encodeFloatInteger [InlPrag=NOINLINE,
                                     Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7uj e0_s7uk]
        case ds_s7uj of {
          GHC.Integer.Type.Positive ds0_s7um [Occ=Once] ->
              f1_r3Bw 0.0# ds0_s7um e0_s7uk;
          GHC.Integer.Type.Negative ds1_s7un [Occ=Once] ->
              let {
                sat_s7uo [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s7un];
              } in 
                case
                    GHC.Integer.Type.encodeFloatInteger sat_s7uo e0_s7uk
                of
                wild1_s7up
                { __DEFAULT -> negateFloat# [wild1_s7up];
                };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.Positive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Positive [eta_B1];

GHC.Integer.Type.Negative
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Negative [eta_B1];

GHC.Integer.Type.Naught :: GHC.Integer.Type.Integer
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Naught! [];

GHC.Integer.Type.Nil :: forall a. GHC.Integer.Type.List a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Nil! [];

GHC.Integer.Type.Cons
  :: forall a.
     a -> GHC.Integer.Type.List a -> GHC.Integer.Type.List a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Cons [eta_B2 eta_B1];

GHC.Integer.Type.Some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Some [eta_B2 eta_B1];

GHC.Integer.Type.None :: GHC.Integer.Type.Digits
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.None! [];


==================== STG syntax: ====================
2018-03-16 15:53:54.884149004 UTC

GHC.Integer.Type.$WPositive [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7id]
        case dt_s7id of dt_s7ie {
          __DEFAULT -> GHC.Integer.Type.Positive [dt_s7ie];
        };

GHC.Integer.Type.$WNegative [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataConWrapper],
 Arity=1,
 Caf=NoCafRefs,
 Str=<S,U>m2,
 Unf=OtherCon []] =
    [] \r [dt_s7if]
        case dt_s7if of dt_s7ig {
          __DEFAULT -> GHC.Integer.Type.Negative [dt_s7ig];
        };

GHC.Integer.Type.$WSome [InlPrag=INLINE[2]]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataConWrapper],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><S,U>m1,
 Unf=OtherCon []] =
    [] \r [dt_s7ih dt_s7ii]
        case dt_s7ii of dt_s7ij {
          __DEFAULT -> GHC.Integer.Type.Some [dt_s7ih dt_s7ij];
        };

GHC.Integer.Type.errorPositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [47## GHC.Integer.Type.None];

GHC.Integer.Type.errorInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.errorPositive];

GHC.Integer.Type.wordToInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Word# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s7ik]
        case w_s7ik of wild_s7il {
          __DEFAULT ->
              let {
                sat_s7im [Occ=Once] :: GHC.Integer.Type.Positive
                [LclId] =
                    CCCS GHC.Integer.Type.Some! [wild_s7il GHC.Integer.Type.None];
              } in  GHC.Integer.Type.Positive [sat_s7im];
          0## -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.integerToWord [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Word#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7in]
        case ds_s7in of {
          GHC.Integer.Type.Positive ds1_s7ip [Occ=Once!] ->
              case ds1_s7ip of {
                GHC.Integer.Type.Some w_s7ir [Occ=Once] _ [Occ=Dead] -> w_s7ir;
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Negative ds1_s7it [Occ=Once!] ->
              case ds1_s7it of {
                GHC.Integer.Type.Some w_s7iv [Occ=Once] _ [Occ=Dead] ->
                    minusWord# [0## w_s7iv];
                GHC.Integer.Type.None -> 0##;
              };
          GHC.Integer.Type.Naught -> 0##;
        };

GHC.Integer.Type.integerToInt [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [i_s7ix]
        case GHC.Integer.Type.integerToWord i_s7ix of wild_s7iy {
          __DEFAULT -> word2Int# [wild_s7iy];
        };

GHC.Integer.Type.hashInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.integerToInt eta_B1;

GHC.Integer.Type.flipBitsDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iz]
        case ds_s7iz of {
          GHC.Integer.Type.Some w_s7iB [Occ=Once] ws_s7iC [Occ=Once] ->
              case GHC.Integer.Type.flipBitsDigits ws_s7iC of dt_s7iD {
                __DEFAULT ->
                    case not# [w_s7iB] of sat_s7iE {
                      __DEFAULT -> GHC.Integer.Type.Some [sat_s7iE dt_s7iD];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.flipBits1
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iF] GHC.Integer.Type.flipBitsDigits ds_s7iF;

GHC.Integer.Type.flipBits
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.flipBits1 eta_B1;

GHC.Integer.Type.negateInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iG]
        case ds_s7iG of {
          GHC.Integer.Type.Positive p_s7iI [Occ=Once] ->
              GHC.Integer.Type.Negative [p_s7iI];
          GHC.Integer.Type.Negative p_s7iJ [Occ=Once] ->
              GHC.Integer.Type.Positive [p_s7iJ];
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.smallInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [i_s7iK]
        case >=# [i_s7iK 0#] of {
          __DEFAULT ->
              case negateInt# [i_s7iK] of sat_s7iM {
                __DEFAULT ->
                    case int2Word# [sat_s7iM] of sat_s7iN {
                      __DEFAULT ->
                          case GHC.Integer.Type.wordToInteger sat_s7iN of sat_s7iO {
                            __DEFAULT -> GHC.Integer.Type.negateInteger sat_s7iO;
                          };
                    };
              };
          1# ->
              case int2Word# [i_s7iK] of sat_s7iP {
                __DEFAULT -> GHC.Integer.Type.wordToInteger sat_s7iP;
              };
        };

GHC.Integer.Type.decodeFloatInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Float# -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [f2_s7iQ]
        case decodeFloat_Int# [f2_s7iQ] of {
          (#,#) ipv_s7iS [Occ=Once] ipv1_s7iT [Occ=Once] ->
              let {
                sat_s7iU [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s7iS] \u [] GHC.Integer.Type.smallInteger ipv_s7iS;
              } in  (#,#) [sat_s7iU ipv1_s7iT];
        };

GHC.Integer.Type.absInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iV]
        case ds_s7iV of wild_s7iW {
          __DEFAULT -> wild_s7iW;
          GHC.Integer.Type.Negative x_s7iX [Occ=Once] ->
              GHC.Integer.Type.Positive [x_s7iX];
        };

GHC.Integer.Type.onePositive :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [1## GHC.Integer.Type.None];

GHC.Integer.Type.negativeOneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Negative! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.oneInteger :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.onePositive];

GHC.Integer.Type.signumInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7iY]
        case ds_s7iY of {
          GHC.Integer.Type.Positive _ [Occ=Dead] ->
              GHC.Integer.Type.oneInteger;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              GHC.Integer.Type.negativeOneInteger;
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.halfBoundUp :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7j2] case ds_s7j2 of { () -> 9223372036854775808##; };

GHC.Integer.Type.fullBound :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7j4] case ds_s7j4 of { () -> 18446744073709551615##; };

GHC.Integer.Type.$wsuccPositive [InlPrag=NOUSERINLINE[0],
                                 Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [w_s7j6]
        case w_s7j6 of {
          GHC.Integer.Type.Some w1_s7j8 [Occ=Once!] ws_s7j9 [Occ=Once*] ->
              case w1_s7j8 of wild1_s7ja {
                __DEFAULT ->
                    case plusWord# [wild1_s7ja 1##] of sat_s7jb {
                      __DEFAULT -> (#,#) [sat_s7jb ws_s7j9];
                    };
                18446744073709551615## ->
                    case GHC.Integer.Type.$wsuccPositive ws_s7j9 of {
                      (#,#) ww1_s7jd [Occ=Once] ww2_s7je [Occ=Once] ->
                          let {
                            sat_s7jf [Occ=Once] :: GHC.Integer.Type.Digits
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [ww1_s7jd ww2_s7je];
                          } in  (#,#) [0## sat_s7jf];
                    };
              };
          GHC.Integer.Type.None -> (#,#) [1## GHC.Integer.Type.None];
        };

GHC.Integer.Type.succPositive [InlPrag=NOUSERINLINE[0]]
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>m1, Unf=OtherCon []] =
    [] \r [w_s7jg]
        case GHC.Integer.Type.$wsuccPositive w_s7jg of {
          (#,#) ww1_s7ji [Occ=Once] ww2_s7jj [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s7ji ww2_s7jj];
        };

lvl_r3Bo :: GHC.Integer.Type.Positive
[GblId] =
    [] \u []
        case GHC.Integer.Type.$wsuccPositive GHC.Integer.Type.None of {
          (#,#) ww1_s7jl [Occ=Once] ww2_s7jm [Occ=Once] ->
              GHC.Integer.Type.Some [ww1_s7jl ww2_s7jm];
        };

GHC.Integer.Type.plusPositive_addWithCarry [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
[GblId, Arity=3, Str=<S,U><S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [c_s7jn ds_s7jo ds1_s7jp]
        case ds_s7jo of wild_s7jq {
          GHC.Integer.Type.Some ds2_s7jr ds3_s7js [Occ=Once*] ->
              case ds1_s7jp of wild1_s7jt {
                GHC.Integer.Type.Some y_s7ju ys'_s7jv [Occ=Once*] ->
                    case ltWord# [ds2_s7jr y_s7ju] of {
                      __DEFAULT ->
                          case geWord# [y_s7ju 9223372036854775808##] of {
                            __DEFAULT ->
                                case geWord# [ds2_s7jr 9223372036854775808##] of {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.plusPositive_addWithCarry
                                              0## ds3_s7js ys'_s7jv
                                      of
                                      dt_s7jz
                                      { __DEFAULT ->
                                            case plusWord# [ds2_s7jr y_s7ju] of sat_s7jA {
                                              __DEFAULT ->
                                                  case plusWord# [sat_s7jA c_s7jn] of sat_s7jB {
                                                    __DEFAULT ->
                                                        GHC.Integer.Type.Some [sat_s7jB dt_s7jz];
                                                  };
                                            };
                                      };
                                  1# ->
                                      case minusWord# [ds2_s7jr 9223372036854775808##] of sat_s7jD {
                                        __DEFAULT ->
                                            case plusWord# [sat_s7jD y_s7ju] of sat_s7jE {
                                              __DEFAULT ->
                                                  case
                                                      plusWord# [sat_s7jE c_s7jn]
                                                  of
                                                  z_s7jC [Dmd=<S,U>]
                                                  { __DEFAULT ->
                                                        case
                                                            ltWord# [z_s7jC 9223372036854775808##]
                                                        of
                                                        { __DEFAULT ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      1## ds3_s7js ys'_s7jv
                                                              of
                                                              dt_s7jG
                                                              { __DEFAULT ->
                                                                    case
                                                                        minusWord# [z_s7jC
                                                                                    9223372036854775808##]
                                                                    of
                                                                    sat_s7jH
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s7jH
                                                                                                 dt_s7jG];
                                                                    };
                                                              };
                                                          1# ->
                                                              case
                                                                  GHC.Integer.Type.plusPositive_addWithCarry
                                                                      0## ds3_s7js ys'_s7jv
                                                              of
                                                              dt_s7jI
                                                              { __DEFAULT ->
                                                                    case
                                                                        plusWord# [z_s7jC
                                                                                   9223372036854775808##]
                                                                    of
                                                                    sat_s7jJ
                                                                    { __DEFAULT ->
                                                                          GHC.Integer.Type.Some [sat_s7jJ
                                                                                                 dt_s7jI];
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case
                                    GHC.Integer.Type.plusPositive_addWithCarry 1## ds3_s7js ys'_s7jv
                                of
                                dt_s7jK
                                { __DEFAULT ->
                                      case minusWord# [y_s7ju 9223372036854775808##] of sat_s7jM {
                                        __DEFAULT ->
                                            case
                                                minusWord# [ds2_s7jr 9223372036854775808##]
                                            of
                                            sat_s7jL
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s7jL sat_s7jM] of sat_s7jN {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s7jN c_s7jn]
                                                        of
                                                        sat_s7jO
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s7jO
                                                                                     dt_s7jK];
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                      1# ->
                          GHC.Integer.Type.plusPositive_addWithCarry
                              c_s7jn wild1_s7jt wild_s7jq;
                    };
                GHC.Integer.Type.None ->
                    case c_s7jn of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild_s7jq of {
                            (#,#) ww1_s7jR [Occ=Once] ww2_s7jS [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s7jR ww2_s7jS];
                          };
                      0## -> wild_s7jq;
                    };
              };
          GHC.Integer.Type.None ->
              case ds1_s7jp of wild1_s7jT {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    case c_s7jn of {
                      __DEFAULT ->
                          case GHC.Integer.Type.$wsuccPositive wild1_s7jT of {
                            (#,#) ww1_s7jY [Occ=Once] ww2_s7jZ [Occ=Once] ->
                                GHC.Integer.Type.Some [ww1_s7jY ww2_s7jZ];
                          };
                      0## -> wild1_s7jT;
                    };
                GHC.Integer.Type.None ->
                    case c_s7jn of {
                      __DEFAULT -> lvl_r3Bo;
                      0## -> GHC.Integer.Type.None [];
                    };
              };
        };

GHC.Integer.Type.plusPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [x0_s7k1 y0_s7k2]
        GHC.Integer.Type.plusPositive_addWithCarry 0## x0_s7k1 y0_s7k2;

GHC.Integer.Type.minusPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7k3 ds1_s7k4]
        case ds_s7k3 of wild_s7k5 {
          GHC.Integer.Type.Some x_s7k6 xs_s7k7 [Occ=Once*] ->
              case ds1_s7k4 of {
                GHC.Integer.Type.Some y_s7k9 ys_s7ka [Occ=Once*] ->
                    case eqWord# [x_s7k6 y_s7k9] of {
                      __DEFAULT ->
                          case gtWord# [x_s7k6 y_s7k9] of {
                            __DEFAULT ->
                                case GHC.Integer.Type.minusPositive xs_s7k7 ys_s7ka of sat_s7kd {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              sat_s7kd GHC.Integer.Type.onePositive
                                      of
                                      dt_s7ke
                                      { __DEFAULT ->
                                            case
                                                minusWord# [18446744073709551615## y_s7k9]
                                            of
                                            sat_s7kf
                                            { __DEFAULT ->
                                                  case plusWord# [sat_s7kf 1##] of sat_s7kg {
                                                    __DEFAULT ->
                                                        case
                                                            plusWord# [sat_s7kg x_s7k6]
                                                        of
                                                        sat_s7kh
                                                        { __DEFAULT ->
                                                              GHC.Integer.Type.Some [sat_s7kh
                                                                                     dt_s7ke];
                                                        };
                                                  };
                                            };
                                      };
                                };
                            1# ->
                                case GHC.Integer.Type.minusPositive xs_s7k7 ys_s7ka of dt_s7ki {
                                  __DEFAULT ->
                                      case minusWord# [x_s7k6 y_s7k9] of sat_s7kj {
                                        __DEFAULT -> GHC.Integer.Type.Some [sat_s7kj dt_s7ki];
                                      };
                                };
                          };
                      1# ->
                          case GHC.Integer.Type.minusPositive xs_s7k7 ys_s7ka of wild2_s7kk {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.Some [0## wild2_s7kk];
                            GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                          };
                    };
                GHC.Integer.Type.None -> wild_s7k5;
              };
          GHC.Integer.Type.None ->
              case ds1_s7k4 of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                    GHC.Integer.Type.errorPositive;
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.twosComplementPositive1
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [p_s7kq]
        case
            GHC.Integer.Type.minusPositive p_s7kq GHC.Integer.Type.onePositive
        of
        sat_s7kr
        { __DEFAULT -> GHC.Integer.Type.flipBitsDigits sat_s7kr;
        };

GHC.Integer.Type.twosComplementPositive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.DigitsOnes
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.twosComplementPositive1 eta_B1;

GHC.Integer.Type.lowHalfMask :: () -> GHC.Integer.Type.Digit
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7ks] case ds_s7ks of { () -> 4294967295##; };

GHC.Integer.Type.highHalfShift :: () -> GHC.Prim.Int#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*H>, Unf=OtherCon []] =
    [] \r [ds_s7ku] case ds_s7ku of { () -> 32#; };

GHC.Integer.Type.splitHalves
  :: GHC.Integer.Type.Digit
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digit #)
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,U>, Unf=OtherCon []] =
    [] \r [x_s7kw]
        case and# [x_s7kw 4294967295##] of sat_s7ky {
          __DEFAULT ->
              case uncheckedShiftRL# [x_s7kw 32#] of sat_s7kx {
                __DEFAULT -> (#,#) [sat_s7kx sat_s7ky];
              };
        };

GHC.Integer.Type.doubleFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7kz]
        case ds_s7kz of {
          GHC.Integer.Type.Some w_s7kB ds1_s7kC [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive ds1_s7kC of wild1_s7kD {
                __DEFAULT ->
                    case and# [w_s7kB 4294967295##] of sat_s7kM {
                      __DEFAULT ->
                          case word2Int# [sat_s7kM] of sat_s7kN {
                            __DEFAULT ->
                                case int2Double# [sat_s7kN] of sat_s7kO {
                                  __DEFAULT ->
                                      case **## [2.0## 32.0##] of sat_s7kJ {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s7kB 32#] of sat_s7kG {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s7kG] of sat_s7kH {
                                                    __DEFAULT ->
                                                        case int2Double# [sat_s7kH] of sat_s7kI {
                                                          __DEFAULT ->
                                                              case
                                                                  *## [sat_s7kI sat_s7kJ]
                                                              of
                                                              sat_s7kK
                                                              { __DEFAULT ->
                                                                    case
                                                                        **## [2.0## 64.0##]
                                                                    of
                                                                    sat_s7kE
                                                                    { __DEFAULT ->
                                                                          case
                                                                              *## [wild1_s7kD
                                                                                   sat_s7kE]
                                                                          of
                                                                          sat_s7kF
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    +## [sat_s7kF
                                                                                         sat_s7kK]
                                                                                of
                                                                                sat_s7kL
                                                                                { __DEFAULT ->
                                                                                      +## [sat_s7kL
                                                                                           sat_s7kO];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0##;
        };

GHC.Integer.Type.doubleFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Double#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7kP]
        case ds_s7kP of {
          GHC.Integer.Type.Positive p_s7kR [Occ=Once] ->
              GHC.Integer.Type.doubleFromPositive p_s7kR;
          GHC.Integer.Type.Negative p_s7kS [Occ=Once] ->
              case GHC.Integer.Type.doubleFromPositive p_s7kS of wild1_s7kT {
                __DEFAULT -> negateDouble# [wild1_s7kT];
              };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.floatFromPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7kU]
        case ds_s7kU of {
          GHC.Integer.Type.Some w_s7kW ds1_s7kX [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive ds1_s7kX of wild1_s7kY {
                __DEFAULT ->
                    case and# [w_s7kW 4294967295##] of sat_s7l7 {
                      __DEFAULT ->
                          case word2Int# [sat_s7l7] of sat_s7l8 {
                            __DEFAULT ->
                                case int2Float# [sat_s7l8] of sat_s7l9 {
                                  __DEFAULT ->
                                      case powerFloat# [2.0# 32.0#] of sat_s7l4 {
                                        __DEFAULT ->
                                            case uncheckedShiftRL# [w_s7kW 32#] of sat_s7l1 {
                                              __DEFAULT ->
                                                  case word2Int# [sat_s7l1] of sat_s7l2 {
                                                    __DEFAULT ->
                                                        case int2Float# [sat_s7l2] of sat_s7l3 {
                                                          __DEFAULT ->
                                                              case
                                                                  timesFloat# [sat_s7l3 sat_s7l4]
                                                              of
                                                              sat_s7l5
                                                              { __DEFAULT ->
                                                                    case
                                                                        powerFloat# [2.0# 64.0#]
                                                                    of
                                                                    sat_s7kZ
                                                                    { __DEFAULT ->
                                                                          case
                                                                              timesFloat# [wild1_s7kY
                                                                                           sat_s7kZ]
                                                                          of
                                                                          sat_s7l0
                                                                          { __DEFAULT ->
                                                                                case
                                                                                    plusFloat# [sat_s7l0
                                                                                                sat_s7l5]
                                                                                of
                                                                                sat_s7l6
                                                                                { __DEFAULT ->
                                                                                      plusFloat# [sat_s7l6
                                                                                                  sat_s7l9];
                                                                                };
                                                                          };
                                                                    };
                                                              };
                                                        };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
              };
          GHC.Integer.Type.None -> 0.0#;
        };

GHC.Integer.Type.floatFromInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Float#
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7la]
        case ds_s7la of {
          GHC.Integer.Type.Positive p_s7lc [Occ=Once] ->
              GHC.Integer.Type.floatFromPositive p_s7lc;
          GHC.Integer.Type.Negative p_s7ld [Occ=Once] ->
              case GHC.Integer.Type.floatFromPositive p_s7ld of wild1_s7le {
                __DEFAULT -> negateFloat# [wild1_s7le];
              };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.timesDigit
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digit -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s7lf y_s7lg]
        case uncheckedShiftRL# [x_s7lf 32#] of ds_s7lh [Dmd=<S,U>] {
          __DEFAULT ->
              case and# [y_s7lg 4294967295##] of ds1_s7li [Dmd=<S,U>] {
                __DEFAULT ->
                    case timesWord# [ds_s7lh ds1_s7li] of x1_s7lj [Dmd=<S,U>] {
                      __DEFAULT ->
                          case and# [x_s7lf 4294967295##] of ds2_s7lk [Dmd=<S,U>] {
                            __DEFAULT ->
                                case uncheckedShiftRL# [y_s7lg 32#] of ds3_s7ll [Dmd=<S,U>] {
                                  __DEFAULT ->
                                      case timesWord# [ds2_s7lk ds3_s7ll] of x2_s7lm [Dmd=<S,U>] {
                                        __DEFAULT ->
                                            case timesWord# [ds2_s7lk ds1_s7li] of sat_s7lv {
                                              __DEFAULT ->
                                                  let {
                                                    sat_s7lw [Occ=Once] :: GHC.Integer.Type.Positive
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [sat_s7lv
                                                                                     GHC.Integer.Type.None];
                                                  } in 
                                                    case and# [x2_s7lm 4294967295##] of sat_s7lr {
                                                      __DEFAULT ->
                                                          case
                                                              uncheckedShiftL# [sat_s7lr 32#]
                                                          of
                                                          sat_s7ls
                                                          { __DEFAULT ->
                                                                let {
                                                                  sat_s7lt [Occ=Once]
                                                                    :: GHC.Integer.Type.Positive
                                                                  [LclId] =
                                                                      CCCS GHC.Integer.Type.Some! [sat_s7ls
                                                                                                   GHC.Integer.Type.None];
                                                                } in 
                                                                  case
                                                                      and# [x1_s7lj 4294967295##]
                                                                  of
                                                                  sat_s7lo
                                                                  { __DEFAULT ->
                                                                        case
                                                                            uncheckedShiftL# [sat_s7lo
                                                                                              32#]
                                                                        of
                                                                        sat_s7lp
                                                                        { __DEFAULT ->
                                                                              let {
                                                                                sat_s7lq [Occ=Once]
                                                                                  :: GHC.Integer.Type.Positive
                                                                                [LclId] =
                                                                                    CCCS GHC.Integer.Type.Some! [sat_s7lp
                                                                                                                 GHC.Integer.Type.None];
                                                                              } in 
                                                                                case
                                                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                                                        0##
                                                                                        sat_s7lq
                                                                                        sat_s7lt
                                                                                of
                                                                                sat_s7lu
                                                                                { __DEFAULT ->
                                                                                      case
                                                                                          GHC.Integer.Type.plusPositive_addWithCarry
                                                                                              0##
                                                                                              sat_s7lu
                                                                                              sat_s7lw
                                                                                      of
                                                                                      low_s7ln [Dmd=<S,1*U>]
                                                                                      { __DEFAULT ->
                                                                                            case
                                                                                                uncheckedShiftRL# [x2_s7lm
                                                                                                                   32#]
                                                                                            of
                                                                                            sat_s7lA
                                                                                            { __DEFAULT ->
                                                                                                  case
                                                                                                      uncheckedShiftRL# [x1_s7lj
                                                                                                                         32#]
                                                                                                  of
                                                                                                  sat_s7ly
                                                                                                  { __DEFAULT ->
                                                                                                        case
                                                                                                            timesWord# [ds_s7lh
                                                                                                                        ds3_s7ll]
                                                                                                        of
                                                                                                        sat_s7lx
                                                                                                        { __DEFAULT ->
                                                                                                              case
                                                                                                                  plusWord# [sat_s7lx
                                                                                                                             sat_s7ly]
                                                                                                              of
                                                                                                              sat_s7lz
                                                                                                              { __DEFAULT ->
                                                                                                                    case
                                                                                                                        plusWord# [sat_s7lz
                                                                                                                                   sat_s7lA]
                                                                                                                    of
                                                                                                                    wild_s7lB
                                                                                                                    { __DEFAULT ->
                                                                                                                          let {
                                                                                                                            sat_s7lC [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Digits
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [wild_s7lB
                                                                                                                                                             GHC.Integer.Type.None]; } in
                                                                                                                          let {
                                                                                                                            sat_s7lD [Occ=Once]
                                                                                                                              :: GHC.Integer.Type.Positive
                                                                                                                            [LclId] =
                                                                                                                                CCCS GHC.Integer.Type.Some! [0##
                                                                                                                                                             sat_s7lC];
                                                                                                                          } in 
                                                                                                                            GHC.Integer.Type.plusPositive_addWithCarry
                                                                                                                                0##
                                                                                                                                sat_s7lD
                                                                                                                                low_s7ln;
                                                                                                                      0## ->
                                                                                                                          low_s7ln;
                                                                                                                    };
                                                                                                              };
                                                                                                        };
                                                                                                  };
                                                                                            };
                                                                                      };
                                                                                };
                                                                        };
                                                                  };
                                                          };
                                                    };
                                            };
                                      };
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.timesPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Integer.Type.Positive
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7lE ds1_s7lF]
        case ds_s7lE of wild_s7lG {
          GHC.Integer.Type.Some ds2_s7lH [Occ=Once*] ds3_s7lI [Occ=Once!] ->
              case ds1_s7lF of wild1_s7lJ {
                GHC.Integer.Type.Some y_s7lK [Occ=Once*] ys'_s7lL [Occ=Once*!] ->
                    case ds3_s7lI of wild2_s7lM {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          case ys'_s7lL of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                case
                                    GHC.Integer.Type.timesPositive wild2_s7lM wild1_s7lJ
                                of
                                dt_s7lS
                                { __DEFAULT ->
                                      let {
                                        sat_s7lV [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [0## dt_s7lS]; } in
                                      let {
                                        sat_s7lT [Occ=Once] :: GHC.Integer.Type.Positive
                                        [LclId] =
                                            CCCS GHC.Integer.Type.Some! [ds2_s7lH
                                                                         GHC.Integer.Type.None];
                                      } in 
                                        case
                                            GHC.Integer.Type.timesPositive sat_s7lT wild1_s7lJ
                                        of
                                        sat_s7lU
                                        { __DEFAULT ->
                                              GHC.Integer.Type.plusPositive_addWithCarry
                                                  0## sat_s7lU sat_s7lV;
                                        };
                                };
                            GHC.Integer.Type.None ->
                                case ds2_s7lH of wild4_s7lW {
                                  __DEFAULT ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s7lM wild1_s7lJ
                                      of
                                      dt_s7lX
                                      { __DEFAULT ->
                                            let {
                                              sat_s7lZ [Occ=Once] :: GHC.Integer.Type.Positive
                                              [LclId] =
                                                  CCCS GHC.Integer.Type.Some! [0## dt_s7lX];
                                            } in 
                                              case
                                                  GHC.Integer.Type.timesDigit wild4_s7lW y_s7lK
                                              of
                                              sat_s7lY
                                              { __DEFAULT ->
                                                    GHC.Integer.Type.plusPositive_addWithCarry
                                                        0## sat_s7lY sat_s7lZ;
                                              };
                                      };
                                  0## ->
                                      case
                                          GHC.Integer.Type.timesPositive wild2_s7lM wild1_s7lJ
                                      of
                                      dt_s7m0
                                      { __DEFAULT -> GHC.Integer.Type.Some [0## dt_s7m0];
                                      };
                                };
                          };
                      GHC.Integer.Type.None ->
                          case ys'_s7lL of {
                            GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                GHC.Integer.Type.timesPositive wild1_s7lJ wild_s7lG;
                            GHC.Integer.Type.None ->
                                GHC.Integer.Type.timesDigit ds2_s7lH y_s7lK;
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.errorPositive;
              };
          GHC.Integer.Type.None ->
              case ds1_s7lF of { __DEFAULT -> GHC.Integer.Type.errorPositive; };
        };

GHC.Integer.Type.timesInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7m5 ds1_s7m6]
        case ds_s7m5 of {
          GHC.Integer.Type.Positive p1_s7m8 [Occ=Once*] ->
              case ds1_s7m6 of {
                GHC.Integer.Type.Positive p2_s7ma [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7m8 p2_s7ma of dt_s7mb {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s7mb];
                    };
                GHC.Integer.Type.Negative p2_s7mc [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7m8 p2_s7mc of dt_s7md {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s7md];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Negative p1_s7me [Occ=Once*] ->
              case ds1_s7m6 of {
                GHC.Integer.Type.Positive p2_s7mg [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7me p2_s7mg of dt_s7mh {
                      __DEFAULT -> GHC.Integer.Type.Negative [dt_s7mh];
                    };
                GHC.Integer.Type.Negative p2_s7mi [Occ=Once] ->
                    case GHC.Integer.Type.timesPositive p1_s7me p2_s7mi of dt_s7mj {
                      __DEFAULT -> GHC.Integer.Type.Positive [dt_s7mj];
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7m6 of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.twoToTheThirtytwoPositive
  :: GHC.Integer.Type.Positive
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Some! [4294967296##
                                          GHC.Integer.Type.None];

GHC.Integer.Type.twoToTheThirtytwoInteger
  :: GHC.Integer.Type.Integer
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Positive! [GHC.Integer.Type.twoToTheThirtytwoPositive];

GHC.Integer.Type.digitsMaybeZeroToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7ml]
        case ds_s7ml of wild_s7mm {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s7mm];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.removeZeroTails [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7mp]
        case ds_s7mp of {
          GHC.Integer.Type.Some w_s7mr [Occ=Once!] ds1_s7ms [Occ=Once*] ->
              case w_s7mr of wild1_s7mt {
                __DEFAULT ->
                    case GHC.Integer.Type.removeZeroTails ds1_s7ms of dt_s7mu {
                      __DEFAULT -> GHC.Integer.Type.Some [wild1_s7mt dt_s7mu];
                    };
                0## ->
                    case GHC.Integer.Type.removeZeroTails ds1_s7ms of wild2_s7mv {
                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                          GHC.Integer.Type.Some [0## wild2_s7mv];
                      GHC.Integer.Type.None -> GHC.Integer.Type.None [];
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.None [];
        };

GHC.Integer.Type.digitsToNegativeInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7my]
        case GHC.Integer.Type.removeZeroTails ds_s7my of wild_s7mz {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Negative [wild_s7mz];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.digitsToInteger
  :: GHC.Integer.Type.Digits -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7mC]
        case GHC.Integer.Type.removeZeroTails ds_s7mC of wild_s7mD {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Positive [wild_s7mD];
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.comparePositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7mG ds1_s7mH]
        case ds_s7mG of {
          GHC.Integer.Type.Some x_s7mJ xs_s7mK [Occ=Once] ->
              case ds1_s7mH of {
                GHC.Integer.Type.Some y_s7mM ys_s7mN [Occ=Once] ->
                    case
                        GHC.Integer.Type.comparePositive xs_s7mK ys_s7mN
                    of
                    wild2_s7mO
                    { __DEFAULT -> wild2_s7mO;
                      GHC.Types.EQ ->
                          case ltWord# [x_s7mJ y_s7mM] of {
                            __DEFAULT ->
                                case gtWord# [x_s7mJ y_s7mM] of {
                                  __DEFAULT -> GHC.Types.EQ [];
                                  1# -> GHC.Types.GT [];
                                };
                            1# -> GHC.Types.LT [];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Types.GT [];
              };
          GHC.Integer.Type.None ->
              case ds1_s7mH of {
                GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.None -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.compareInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Ordering
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7mU ds1_s7mV]
        case ds_s7mU of {
          GHC.Integer.Type.Positive x_s7mX [Occ=Once] ->
              case ds1_s7mV of {
                __DEFAULT -> GHC.Types.GT [];
                GHC.Integer.Type.Positive y_s7mZ [Occ=Once] ->
                    GHC.Integer.Type.comparePositive x_s7mX y_s7mZ;
              };
          GHC.Integer.Type.Negative x_s7n0 [Occ=Once] ->
              case ds1_s7mV of {
                __DEFAULT -> GHC.Types.LT [];
                GHC.Integer.Type.Negative y_s7n2 [Occ=Once] ->
                    GHC.Integer.Type.comparePositive y_s7n2 x_s7n0;
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7mV of {
                GHC.Integer.Type.Positive _ [Occ=Dead] -> GHC.Types.LT [];
                GHC.Integer.Type.Negative _ [Occ=Dead] -> GHC.Types.GT [];
                GHC.Integer.Type.Naught -> GHC.Types.EQ [];
              };
        };

GHC.Integer.Type.eqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7n6 y_s7n7]
        case GHC.Integer.Type.compareInteger x_s7n6 y_s7n7 of {
          __DEFAULT -> 0#;
          GHC.Types.EQ -> 1#;
        };

GHC.Integer.Type.eqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7n9 b_s7na]
        case GHC.Integer.Type.eqInteger# a_s7n9 b_s7na of wild_s7nb {
          __DEFAULT -> tagToEnum# [wild_s7nb];
        };

GHC.Integer.Type.neqInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7nc y_s7nd]
        case GHC.Integer.Type.compareInteger x_s7nc y_s7nd of {
          __DEFAULT -> 1#;
          GHC.Types.EQ -> 0#;
        };

GHC.Integer.Type.neqInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nf b_s7ng]
        case GHC.Integer.Type.neqInteger# a_s7nf b_s7ng of wild_s7nh {
          __DEFAULT -> tagToEnum# [wild_s7nh];
        };

GHC.Integer.Type.$fEqInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Eq GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Eq! [GHC.Integer.Type.eqInteger
                                     GHC.Integer.Type.neqInteger];

GHC.Integer.Type.ltInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7ni y_s7nj]
        case GHC.Integer.Type.compareInteger x_s7ni y_s7nj of {
          __DEFAULT -> 0#;
          GHC.Types.LT -> 1#;
        };

GHC.Integer.Type.ltInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nl b_s7nm]
        case GHC.Integer.Type.ltInteger# a_s7nl b_s7nm of wild_s7nn {
          __DEFAULT -> tagToEnum# [wild_s7nn];
        };

GHC.Integer.Type.gtInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7no y_s7np]
        case GHC.Integer.Type.compareInteger x_s7no y_s7np of {
          __DEFAULT -> 0#;
          GHC.Types.GT -> 1#;
        };

GHC.Integer.Type.gtInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nr b_s7ns]
        case GHC.Integer.Type.gtInteger# a_s7nr b_s7ns of wild_s7nt {
          __DEFAULT -> tagToEnum# [wild_s7nt];
        };

GHC.Integer.Type.leInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7nu y_s7nv]
        case GHC.Integer.Type.compareInteger x_s7nu y_s7nv of {
          __DEFAULT -> 1#;
          GHC.Types.GT -> 0#;
        };

GHC.Integer.Type.leInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nx b_s7ny]
        case GHC.Integer.Type.leInteger# a_s7nx b_s7ny of wild_s7nz {
          __DEFAULT -> tagToEnum# [wild_s7nz];
        };

GHC.Integer.Type.geInteger# [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7nA y_s7nB]
        case GHC.Integer.Type.compareInteger x_s7nA y_s7nB of {
          __DEFAULT -> 1#;
          GHC.Types.LT -> 0#;
        };

GHC.Integer.Type.geInteger [InlPrag=INLINE (sat-args=2)]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [a_s7nD b_s7nE]
        case GHC.Integer.Type.geInteger# a_s7nD b_s7nE of wild_s7nF {
          __DEFAULT -> tagToEnum# [wild_s7nF];
        };

GHC.Integer.Type.$fOrdInteger_$cmax
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s7nG y_s7nH]
        case GHC.Integer.Type.leInteger# x_s7nG y_s7nH of {
          __DEFAULT -> x_s7nG;
          1# -> y_s7nH;
        };

GHC.Integer.Type.$fOrdInteger_$cmin
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [x_s7nJ y_s7nK]
        case GHC.Integer.Type.leInteger# x_s7nJ y_s7nK of {
          __DEFAULT -> y_s7nK;
          1# -> x_s7nJ;
        };

GHC.Integer.Type.$fOrdInteger [InlPrag=NOUSERINLINE CONLIKE]
  :: GHC.Classes.Ord GHC.Integer.Type.Integer
[GblId[DFunId], Caf=NoCafRefs, Str=m] =
    CCS_DONT_CARE GHC.Classes.C:Ord! [GHC.Integer.Type.$fEqInteger
                                      GHC.Integer.Type.compareInteger
                                      GHC.Integer.Type.ltInteger
                                      GHC.Integer.Type.leInteger
                                      GHC.Integer.Type.gtInteger
                                      GHC.Integer.Type.geInteger
                                      GHC.Integer.Type.$fOrdInteger_$cmax
                                      GHC.Integer.Type.$fOrdInteger_$cmin];

GHC.Integer.Type.plusInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7nM ds1_s7nN]
        case ds_s7nM of wild_s7nO {
          GHC.Integer.Type.Positive p1_s7nP ->
              case ds1_s7nN of {
                GHC.Integer.Type.Positive p2_s7nR [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s7nP p2_s7nR
                    of
                    dt_s7nS
                    { __DEFAULT -> GHC.Integer.Type.Positive [dt_s7nS];
                    };
                GHC.Integer.Type.Negative p2_s7nT ->
                    case GHC.Integer.Type.comparePositive p1_s7nP p2_s7nT of {
                      GHC.Types.LT ->
                          case GHC.Integer.Type.minusPositive p2_s7nT p1_s7nP of dt_s7nV {
                            __DEFAULT -> GHC.Integer.Type.Negative [dt_s7nV];
                          };
                      GHC.Types.EQ -> GHC.Integer.Type.Naught [];
                      GHC.Types.GT ->
                          case GHC.Integer.Type.minusPositive p1_s7nP p2_s7nT of dt_s7nW {
                            __DEFAULT -> GHC.Integer.Type.Positive [dt_s7nW];
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s7nO;
              };
          GHC.Integer.Type.Negative p1_s7nX [Occ=Once] ->
              case ds1_s7nN of wild1_s7nY {
                GHC.Integer.Type.Positive _ [Occ=Dead] ->
                    GHC.Integer.Type.plusInteger wild1_s7nY wild_s7nO;
                GHC.Integer.Type.Negative p2_s7o0 [Occ=Once] ->
                    case
                        GHC.Integer.Type.plusPositive_addWithCarry 0## p1_s7nX p2_s7o0
                    of
                    dt_s7o1
                    { __DEFAULT -> GHC.Integer.Type.Negative [dt_s7o1];
                    };
                GHC.Integer.Type.Naught -> wild_s7nO;
              };
          GHC.Integer.Type.Naught -> ds1_s7nN;
        };

GHC.Integer.Type.minusInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,1*U>, Unf=OtherCon []] =
    [] \r [i1_s7o2 i2_s7o3]
        case GHC.Integer.Type.negateInteger i2_s7o3 of sat_s7o4 {
          __DEFAULT -> GHC.Integer.Type.plusInteger i1_s7o2 sat_s7o4;
        };

GHC.Integer.Type.complementInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [x_s7o5]
        GHC.Integer.Type.minusInteger
            GHC.Integer.Type.negativeOneInteger x_s7o5;

GHC.Integer.Type.decodeDoubleInteger [InlPrag=NOINLINE]
  :: GHC.Prim.Double#
     -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [d_s7o6]
        case decodeDouble_2Int# [d_s7o6] of {
          (#,,,#) ipv_s7o8 [Occ=Once]
                  ipv1_s7o9 [Occ=Once]
                  ipv2_s7oa [Occ=Once]
                  ipv3_s7ob [Occ=Once] ->
              let {
                sat_s7oh [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    [ipv_s7o8 ipv1_s7o9 ipv2_s7oa] \u []
                        case GHC.Integer.Type.wordToInteger ipv2_s7oa of sat_s7of {
                          __DEFAULT ->
                              case GHC.Integer.Type.wordToInteger ipv1_s7o9 of sat_s7od {
                                __DEFAULT ->
                                    case
                                        GHC.Integer.Type.timesInteger
                                            sat_s7od GHC.Integer.Type.twoToTheThirtytwoInteger
                                    of
                                    sat_s7oe
                                    { __DEFAULT ->
                                          case
                                              GHC.Integer.Type.plusInteger sat_s7oe sat_s7of
                                          of
                                          sat_s7og
                                          { __DEFAULT ->
                                                case
                                                    GHC.Integer.Type.smallInteger ipv_s7o8
                                                of
                                                sat_s7oc
                                                { __DEFAULT ->
                                                      GHC.Integer.Type.timesInteger
                                                          sat_s7oc sat_s7og;
                                                };
                                          };
                                    };
                              };
                        };
              } in  (#,#) [sat_s7oh ipv3_s7ob];
        };

GHC.Integer.Type.smallShiftLPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s7oi ds_s7oj]
        case ds_s7oj of ds1_s7ok {
          __DEFAULT ->
              case -# [64# ds1_s7ok] of j_s7ol {
                __DEFAULT ->
                    let {
                      f2_s7om [Occ=LoopBreaker]
                        :: GHC.Prim.Word#
                           -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
                      [LclId, Arity=2, Str=<S,U><S,1*U>, Unf=OtherCon []] =
                          sat-only [ds1_s7ok j_s7ol f2_s7om] \r [carry_s7on ds2_s7oo]
                              case ds2_s7oo of {
                                GHC.Integer.Type.Some w_s7oq ws_s7or [Occ=Once] ->
                                    case uncheckedShiftRL# [w_s7oq j_s7ol] of sat_s7os {
                                      __DEFAULT ->
                                          case f2_s7om sat_s7os ws_s7or of dt_s7ot {
                                            __DEFAULT ->
                                                case
                                                    uncheckedShiftL# [w_s7oq ds1_s7ok]
                                                of
                                                sat_s7ou
                                                { __DEFAULT ->
                                                      case or# [sat_s7ou carry_s7on] of sat_s7ov {
                                                        __DEFAULT ->
                                                            GHC.Integer.Type.Some [sat_s7ov
                                                                                   dt_s7ot];
                                                      };
                                                };
                                          };
                                    };
                                GHC.Integer.Type.None ->
                                    case carry_s7on of wild1_s7ow {
                                      __DEFAULT ->
                                          GHC.Integer.Type.Some [wild1_s7ow GHC.Integer.Type.None];
                                      0## -> GHC.Integer.Type.None [];
                                    };
                              };
                    } in  f2_s7om 0## p_s7oi;
              };
          0# -> p_s7oi;
        };

GHC.Integer.Type.smallShiftRPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [p_s7ox i_s7oy]
        case p_s7ox of p1_s7oz {
          __DEFAULT ->
              case i_s7oy of wild_s7oA {
                __DEFAULT ->
                    case -# [64# wild_s7oA] of sat_s7oB {
                      __DEFAULT ->
                          case GHC.Integer.Type.smallShiftLPositive p1_s7oz sat_s7oB of {
                            GHC.Integer.Type.Some _ [Occ=Dead] p'_s7oE [Occ=Once!] ->
                                case p'_s7oE of wild2_s7oF {
                                  GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                      GHC.Integer.Type.Positive [wild2_s7oF];
                                  GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                };
                            GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                          };
                    };
                0# -> GHC.Integer.Type.Positive [p1_s7oz];
              };
        };

GHC.Integer.Type.shiftRPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7oI ds1_s7oJ]
        case ds_s7oI of wild_s7oK {
          GHC.Integer.Type.Some _ [Occ=Dead] q_s7oM [Occ=Once] ->
              case >=# [ds1_s7oJ 64#] of {
                __DEFAULT ->
                    GHC.Integer.Type.smallShiftRPositive wild_s7oK ds1_s7oJ;
                1# ->
                    case -# [ds1_s7oJ 64#] of sat_s7oO {
                      __DEFAULT -> GHC.Integer.Type.shiftRPositive q_s7oM sat_s7oO;
                    };
              };
          GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftRInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><L,U>, Unf=OtherCon []] =
    [] \r [ds_s7oP i_s7oQ]
        case ds_s7oP of wild_s7oR {
          GHC.Integer.Type.Positive p_s7oS [Occ=Once] ->
              GHC.Integer.Type.shiftRPositive p_s7oS i_s7oQ;
          GHC.Integer.Type.Negative _ [Occ=Dead] ->
              case GHC.Integer.Type.complementInteger wild_s7oR of sat_s7oU {
                __DEFAULT ->
                    case GHC.Integer.Type.shiftRInteger sat_s7oU i_s7oQ of sat_s7oV {
                      __DEFAULT -> GHC.Integer.Type.complementInteger sat_s7oV;
                    };
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.shiftLPositive [Occ=LoopBreaker]
  :: GHC.Integer.Type.Positive
     -> GHC.Prim.Int# -> GHC.Integer.Type.Positive
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [p_s7oW i_s7oX]
        case >=# [i_s7oX 64#] of {
          __DEFAULT -> GHC.Integer.Type.smallShiftLPositive p_s7oW i_s7oX;
          1# ->
              case p_s7oW of dt_s7oZ {
                __DEFAULT ->
                    case -# [i_s7oX 64#] of sat_s7p1 {
                      __DEFAULT ->
                          let {
                            sat_s7p0 [Occ=Once] :: GHC.Integer.Type.Positive
                            [LclId] =
                                CCCS GHC.Integer.Type.Some! [0## dt_s7oZ];
                          } in  GHC.Integer.Type.shiftLPositive sat_s7p0 sat_s7p1;
                    };
              };
        };

GHC.Integer.Type.shiftLInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Prim.Int# -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7p2 i_s7p3]
        case ds_s7p2 of {
          GHC.Integer.Type.Positive p_s7p5 [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive p_s7p5 i_s7p3 of dt_s7p6 {
                __DEFAULT -> GHC.Integer.Type.Positive [dt_s7p6];
              };
          GHC.Integer.Type.Negative n_s7p7 [Occ=Once] ->
              case GHC.Integer.Type.shiftLPositive n_s7p7 i_s7p3 of dt_s7p8 {
                __DEFAULT -> GHC.Integer.Type.Negative [dt_s7p8];
              };
          GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
        };

GHC.Integer.Type.some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [w_s7p9 ds_s7pa]
        case ds_s7pa of wild_s7pb {
          GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
              GHC.Integer.Type.Some [w_s7p9 wild_s7pb];
          GHC.Integer.Type.None ->
              case w_s7p9 of wild1_s7pe {
                __DEFAULT ->
                    GHC.Integer.Type.Some [wild1_s7pe GHC.Integer.Type.None];
                0## -> GHC.Integer.Type.None [];
              };
        };

GHC.Integer.Type.quotRemPositive_g [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Positives
     -> GHC.Integer.Type.Digits
     -> (# GHC.Integer.Type.Digit, GHC.Integer.Type.Digits #)
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<S,U><S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [d_s7pf ds_s7pg m_s7ph]
        case ds_s7pg of {
          GHC.Integer.Type.Nil ->
              case m_s7ph of m1_s7pj { __DEFAULT -> (#,#) [d_s7pf m1_s7pj]; };
          GHC.Integer.Type.Cons sub_s7pk subs_s7pl [Occ=Once*] ->
              case GHC.Integer.Type.comparePositive m_s7ph sub_s7pk of {
                __DEFAULT ->
                    case GHC.Integer.Type.minusPositive m_s7ph sub_s7pk of sat_s7pp {
                      __DEFAULT ->
                          case uncheckedShiftL# [d_s7pf 1#] of sat_s7pn {
                            __DEFAULT ->
                                case plusWord# [sat_s7pn 1##] of sat_s7po {
                                  __DEFAULT ->
                                      GHC.Integer.Type.quotRemPositive_g
                                          sat_s7po subs_s7pl sat_s7pp;
                                };
                          };
                    };
                GHC.Types.LT ->
                    case uncheckedShiftL# [d_s7pf 1#] of sat_s7pq {
                      __DEFAULT ->
                          GHC.Integer.Type.quotRemPositive_g sat_s7pq subs_s7pl m_s7ph;
                    };
              };
        };

GHC.Integer.Type.quotRemPositive
  :: GHC.Integer.Type.Positive
     -> GHC.Integer.Type.Positive
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [xs_s7pr ys_s7ps]
        case ys_s7ps of ys1_s7pt {
          __DEFAULT ->
              let {
                subtractors_s7pu [Occ=OnceL*] :: GHC.Integer.Type.Positives
                [LclId] =
                    [ys1_s7pt] \u []
                        let {
                          lvl1_s7pv [Occ=OnceL]
                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Unf=OtherCon []] =
                              CCCS GHC.Integer.Type.Cons! [ys1_s7pt GHC.Integer.Type.Nil]; } in
                        let {
                          mkSubtractors_s7pw [Occ=LoopBreaker]
                            :: GHC.Prim.Int# -> GHC.Integer.Type.List GHC.Integer.Type.Positive
                          [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                              sat-only [ys1_s7pt lvl1_s7pv mkSubtractors_s7pw] \r [n_s7px]
                                  case n_s7px of wild_s7py {
                                    __DEFAULT ->
                                        let {
                                          sat_s7pB [Occ=Once]
                                            :: GHC.Integer.Type.List GHC.Integer.Type.Positive
                                          [LclId] =
                                              [mkSubtractors_s7pw wild_s7py] \u []
                                                  case -# [wild_s7py 1#] of sat_s7pA {
                                                    __DEFAULT -> mkSubtractors_s7pw sat_s7pA;
                                                  }; } in
                                        let {
                                          sat_s7pz [Occ=Once] :: GHC.Integer.Type.Positive
                                          [LclId] =
                                              [ys1_s7pt wild_s7py] \u []
                                                  GHC.Integer.Type.smallShiftLPositive
                                                      ys1_s7pt wild_s7py;
                                        } in  GHC.Integer.Type.Cons [sat_s7pz sat_s7pB];
                                    0# -> lvl1_s7pv;
                                  };
                        } in  mkSubtractors_s7pw 63#; } in
              let {
                f2_s7pC [Occ=LoopBreaker]
                  :: GHC.Integer.Type.Positive
                     -> (# GHC.Integer.Type.Digits, GHC.Integer.Type.Digits #)
                [LclId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
                    sat-only [subtractors_s7pu f2_s7pC] \r [ds_s7pD]
                        case ds_s7pD of {
                          GHC.Integer.Type.Some z_s7pF [Occ=Once*] zs_s7pG [Occ=Once] ->
                              case f2_s7pC zs_s7pG of {
                                (#,#) ipv_s7pI [Occ=Once*] ipv1_s7pJ [Occ=Once!] ->
                                    case ipv1_s7pJ of wild1_s7pK {
                                      GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                          let {
                                            sat_s7pN [Occ=Once] :: GHC.Integer.Type.Digits
                                            [LclId] =
                                                CCCS GHC.Integer.Type.Some! [z_s7pF wild1_s7pK];
                                          } in 
                                            case
                                                GHC.Integer.Type.quotRemPositive_g
                                                    0## subtractors_s7pu sat_s7pN
                                            of
                                            { (#,#) ipv4_s7pP [Occ=Once] ipv5_s7pQ [Occ=Once] ->
                                                  let {
                                                    sat_s7pR [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        [ipv_s7pI ipv4_s7pP] \u []
                                                            GHC.Integer.Type.some
                                                                ipv4_s7pP ipv_s7pI;
                                                  } in  (#,#) [sat_s7pR ipv5_s7pQ];
                                            };
                                      GHC.Integer.Type.None ->
                                          case z_s7pF of wild2_s7pS {
                                            __DEFAULT ->
                                                let {
                                                  sat_s7pT [Occ=Once] :: GHC.Integer.Type.Digits
                                                  [LclId] =
                                                      CCCS GHC.Integer.Type.Some! [wild2_s7pS
                                                                                   GHC.Integer.Type.None];
                                                } in 
                                                  case
                                                      GHC.Integer.Type.quotRemPositive_g
                                                          0## subtractors_s7pu sat_s7pT
                                                  of
                                                  { (#,#) ipv2_s7pV [Occ=Once]
                                                          ipv3_s7pW [Occ=Once] ->
                                                        let {
                                                          sat_s7pX [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              [ipv_s7pI ipv2_s7pV] \u []
                                                                  GHC.Integer.Type.some
                                                                      ipv2_s7pV ipv_s7pI;
                                                        } in  (#,#) [sat_s7pX ipv3_s7pW];
                                                  };
                                            0## ->
                                                case
                                                    GHC.Integer.Type.quotRemPositive_g
                                                        0## subtractors_s7pu GHC.Integer.Type.None
                                                of
                                                { (#,#) ipv2_s7pZ [Occ=Once] ipv3_s7q0 [Occ=Once] ->
                                                      let {
                                                        sat_s7q1 [Occ=Once]
                                                          :: GHC.Integer.Type.Digits
                                                        [LclId] =
                                                            [ipv_s7pI ipv2_s7pZ] \u []
                                                                GHC.Integer.Type.some
                                                                    ipv2_s7pZ ipv_s7pI;
                                                      } in  (#,#) [sat_s7q1 ipv3_s7q0];
                                                };
                                          };
                                    };
                              };
                          GHC.Integer.Type.None ->
                              (#,#) [GHC.Integer.Type.None GHC.Integer.Type.None];
                        };
              } in 
                case f2_s7pC xs_s7pr of {
                  (#,#) ipv_s7q3 [Occ=Once] ipv1_s7q4 [Occ=Once] ->
                      let {
                        sat_s7q6 [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv1_s7q4] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv1_s7q4; } in
                      let {
                        sat_s7q5 [Occ=Once] :: GHC.Integer.Type.Integer
                        [LclId] =
                            [ipv_s7q3] \u []
                                GHC.Integer.Type.digitsMaybeZeroToInteger ipv_s7q3;
                      } in  (#,#) [sat_s7q5 sat_s7q6];
                };
        };

GHC.Integer.Type.quotRemInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7q7 ds1_s7q8]
        case ds_s7q7 of wild_s7q9 {
          __DEFAULT ->
              case ds1_s7q8 of wild1_s7qa {
                __DEFAULT ->
                    case wild_s7q9 of {
                      GHC.Integer.Type.Positive p1_s7qc [Occ=Once*] ->
                          case wild1_s7qa of {
                            GHC.Integer.Type.Positive p2_s7qe [Occ=Once] ->
                                GHC.Integer.Type.quotRemPositive p1_s7qc p2_s7qe;
                            GHC.Integer.Type.Negative p2_s7qf [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s7qc p2_s7qf of {
                                  (#,#) ipv_s7qh [Occ=Once] ipv1_s7qi [Occ=Once] ->
                                      let {
                                        sat_s7qj [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s7qh] \u []
                                                GHC.Integer.Type.negateInteger ipv_s7qh;
                                      } in  (#,#) [sat_s7qj ipv1_s7qi];
                                };
                          };
                      GHC.Integer.Type.Negative p1_s7qk [Occ=Once*] ->
                          case wild1_s7qa of {
                            GHC.Integer.Type.Positive p2_s7qm [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s7qk p2_s7qm of {
                                  (#,#) ipv_s7qo [Occ=Once] ipv1_s7qp [Occ=Once] ->
                                      let {
                                        sat_s7qr [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s7qp] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s7qp; } in
                                      let {
                                        sat_s7qq [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s7qo] \u []
                                                GHC.Integer.Type.negateInteger ipv_s7qo;
                                      } in  (#,#) [sat_s7qq sat_s7qr];
                                };
                            GHC.Integer.Type.Negative p2_s7qs [Occ=Once] ->
                                case GHC.Integer.Type.quotRemPositive p1_s7qk p2_s7qs of {
                                  (#,#) ipv_s7qu [Occ=Once] ipv1_s7qv [Occ=Once] ->
                                      let {
                                        sat_s7qw [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv1_s7qv] \u []
                                                GHC.Integer.Type.negateInteger ipv1_s7qv;
                                      } in  (#,#) [ipv_s7qu sat_s7qw];
                                };
                          };
                    };
                GHC.Integer.Type.Naught ->
                    (#,#) [GHC.Integer.Type.errorInteger
                           GHC.Integer.Type.errorInteger];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7q8 of {
                __DEFAULT ->
                    (#,#) [GHC.Integer.Type.Naught GHC.Integer.Type.Naught];
              };
        };

GHC.Integer.Type.divModInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer
     -> (# GHC.Integer.Type.Integer, GHC.Integer.Type.Integer #)
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s7qy d_s7qz]
        case GHC.Integer.Type.quotRemInteger n_s7qy d_s7qz of ds_s7qA {
          (#,#) ipv_s7qB [Occ=Once] ipv1_s7qC ->
              case GHC.Integer.Type.signumInteger d_s7qz of sat_s7qE {
                __DEFAULT ->
                    case GHC.Integer.Type.negateInteger sat_s7qE of sat_s7qF {
                      __DEFAULT ->
                          case GHC.Integer.Type.signumInteger ipv1_s7qC of sat_s7qD {
                            __DEFAULT ->
                                case GHC.Integer.Type.eqInteger# sat_s7qD sat_s7qF of {
                                  __DEFAULT -> (#,#) [ipv_s7qB ipv1_s7qC];
                                  1# ->
                                      let {
                                        sat_s7qI [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [d_s7qz ipv1_s7qC] \u []
                                                GHC.Integer.Type.plusInteger ipv1_s7qC d_s7qz; } in
                                      let {
                                        sat_s7qH [Occ=Once] :: GHC.Integer.Type.Integer
                                        [LclId] =
                                            [ipv_s7qB] \u []
                                                GHC.Integer.Type.minusInteger
                                                    ipv_s7qB GHC.Integer.Type.oneInteger;
                                      } in  (#,#) [sat_s7qH sat_s7qI];
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.divInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s7qJ d_s7qK]
        case GHC.Integer.Type.divModInteger n_s7qJ d_s7qK of {
          (#,#) ipv_s7qM [Occ=Once] _ [Occ=Dead] -> ipv_s7qM;
        };

GHC.Integer.Type.modInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId, Arity=2, Str=<S,1*U><S,U>, Unf=OtherCon []] =
    [] \r [n_s7qO d_s7qP]
        case GHC.Integer.Type.divModInteger n_s7qO d_s7qP of {
          (#,#) _ [Occ=Dead] ipv1_s7qS [Occ=Once] -> ipv1_s7qS;
        };

GHC.Integer.Type.quotInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7qT y_s7qU]
        case GHC.Integer.Type.quotRemInteger x_s7qT y_s7qU of {
          (#,#) ipv_s7qW [Occ=Once] _ [Occ=Dead] -> ipv_s7qW;
        };

GHC.Integer.Type.remInteger [InlPrag=NOINLINE]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [x_s7qY y_s7qZ]
        case GHC.Integer.Type.quotRemInteger x_s7qY y_s7qZ of {
          (#,#) _ [Occ=Dead] ipv1_s7r2 [Occ=Once] -> ipv1_s7r2;
        };

GHC.Integer.Type.andDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7r3 ds1_s7r4]
        case ds_s7r3 of {
          GHC.Integer.Type.Some ds2_s7r6 [Occ=Once] ds3_s7r7 [Occ=Once] ->
              case ds1_s7r4 of {
                GHC.Integer.Type.Some w2_s7r9 [Occ=Once] ws2_s7ra [Occ=Once] ->
                    case GHC.Integer.Type.andDigits ds3_s7r7 ws2_s7ra of dt_s7rb {
                      __DEFAULT ->
                          case and# [ds2_s7r6 w2_s7r9] of sat_s7rc {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7rc dt_s7rb];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None ->
              case ds1_s7r4 of { __DEFAULT -> GHC.Integer.Type.None []; };
        };

GHC.Integer.Type.andDigitsOnes [Occ=LoopBreaker]
  :: GHC.Integer.Type.DigitsOnes
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7re ds1_s7rf]
        case ds_s7re of {
          GHC.Integer.Type.Some ds2_s7rh [Occ=Once] ds3_s7ri [Occ=Once] ->
              case ds1_s7rf of {
                GHC.Integer.Type.Some w2_s7rk [Occ=Once] ws2_s7rl [Occ=Once] ->
                    case GHC.Integer.Type.andDigitsOnes ds3_s7ri ws2_s7rl of dt_s7rm {
                      __DEFAULT ->
                          case and# [ds2_s7rh w2_s7rk] of sat_s7rn {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7rn dt_s7rm];
                          };
                    };
                GHC.Integer.Type.None -> GHC.Integer.Type.None [];
              };
          GHC.Integer.Type.None -> ds1_s7rf;
        };

GHC.Integer.Type.orDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7ro ds1_s7rp]
        case ds_s7ro of wild_s7rq {
          GHC.Integer.Type.Some ds2_s7rr [Occ=Once] ds3_s7rs [Occ=Once] ->
              case ds1_s7rp of {
                GHC.Integer.Type.Some w2_s7ru [Occ=Once] ds4_s7rv [Occ=Once] ->
                    case GHC.Integer.Type.orDigits ds3_s7rs ds4_s7rv of dt_s7rw {
                      __DEFAULT ->
                          case or# [ds2_s7rr w2_s7ru] of sat_s7rx {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7rx dt_s7rw];
                          };
                    };
                GHC.Integer.Type.None -> wild_s7rq;
              };
          GHC.Integer.Type.None -> ds1_s7rp;
        };

GHC.Integer.Type.orInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7ry i_s7rz]
        case ds_s7ry of wild_s7rA {
          __DEFAULT ->
              case i_s7rz of wild1_s7rB {
                __DEFAULT ->
                    case wild_s7rA of wild2_s7rC {
                      GHC.Integer.Type.Positive x_s7rD [Occ=Once*] ->
                          case wild1_s7rB of {
                            GHC.Integer.Type.Positive y_s7rF [Occ=Once] ->
                                case GHC.Integer.Type.orDigits x_s7rD y_s7rF of dt_s7rG {
                                  __DEFAULT -> GHC.Integer.Type.Positive [dt_s7rG];
                                };
                            GHC.Integer.Type.Negative y_s7rH [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7rH GHC.Integer.Type.onePositive
                                of
                                sat_s7rJ
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits x_s7rD of sat_s7rI {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s7rI sat_s7rJ
                                            of
                                            sat_s7rK
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s7rK of {
                                                    (#,#) ww1_s7rM [Occ=Once] ww2_s7rN [Occ=Once] ->
                                                        let {
                                                          sat_s7rO [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s7rM
                                                                                           ww2_s7rN];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s7rO
                                                          of
                                                          wild4_s7rP
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s7rP];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s7rS [Occ=Once] ->
                          case wild1_s7rB of wild3_s7rT {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.orInteger wild3_s7rT wild2_s7rC;
                            GHC.Integer.Type.Negative y_s7rV [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7rV GHC.Integer.Type.onePositive
                                of
                                sat_s7rX
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s7rS GHC.Integer.Type.onePositive
                                      of
                                      sat_s7rW
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigits sat_s7rW sat_s7rX
                                            of
                                            sat_s7rY
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s7rY of {
                                                    (#,#) ww1_s7s0 [Occ=Once] ww2_s7s1 [Occ=Once] ->
                                                        let {
                                                          sat_s7s2 [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s7s0
                                                                                           ww2_s7s1];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s7s2
                                                          of
                                                          wild4_s7s3
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s7s3];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s7rA;
              };
          GHC.Integer.Type.Naught -> i_s7rz;
        };

GHC.Integer.Type.mkInteger_f [Occ=LoopBreaker]
  :: [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId, Arity=1, Caf=NoCafRefs, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [ds_s7s6]
        case ds_s7s6 of {
          [] -> GHC.Integer.Type.Naught [];
          : ds1_s7s8 [Occ=Once!] is'_s7s9 [Occ=Once] ->
              case ds1_s7s8 of {
                GHC.Types.I# i_s7sb [Occ=Once] ->
                    case GHC.Integer.Type.mkInteger_f is'_s7s9 of sat_s7sd {
                      __DEFAULT ->
                          case GHC.Integer.Type.shiftLInteger sat_s7sd 31# of sat_s7se {
                            __DEFAULT ->
                                case GHC.Integer.Type.smallInteger i_s7sb of sat_s7sc {
                                  __DEFAULT -> GHC.Integer.Type.orInteger sat_s7sc sat_s7se;
                                };
                          };
                    };
              };
        };

GHC.Integer.Type.mkInteger
  :: GHC.Types.Bool -> [GHC.Types.Int] -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [nonNegative_s7sf is_s7sg]
        case nonNegative_s7sf of {
          GHC.Types.False ->
              case GHC.Integer.Type.mkInteger_f is_s7sg of sat_s7si {
                __DEFAULT -> GHC.Integer.Type.negateInteger sat_s7si;
              };
          GHC.Types.True -> GHC.Integer.Type.mkInteger_f is_s7sg;
        };

GHC.Integer.Type.andInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7sj ds1_s7sk]
        case ds_s7sj of wild_s7sl {
          __DEFAULT ->
              case ds1_s7sk of wild1_s7sm {
                __DEFAULT ->
                    case wild_s7sl of wild2_s7sn {
                      GHC.Integer.Type.Positive x_s7so [Occ=Once*] ->
                          case wild1_s7sm of {
                            GHC.Integer.Type.Positive y_s7sq [Occ=Once] ->
                                case GHC.Integer.Type.andDigits x_s7so y_s7sq of sat_s7sr {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s7sr of wild4_s7ss {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s7ss];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s7sv [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7sv GHC.Integer.Type.onePositive
                                of
                                sat_s7sw
                                { __DEFAULT ->
                                      case GHC.Integer.Type.flipBitsDigits sat_s7sw of sat_s7sx {
                                        __DEFAULT ->
                                            case
                                                GHC.Integer.Type.andDigitsOnes sat_s7sx x_s7so
                                            of
                                            sat_s7sy
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s7sy
                                                  of
                                                  wild4_s7sz
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s7sz];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s7sC [Occ=Once] ->
                          case wild1_s7sm of wild3_s7sD {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.andInteger wild3_s7sD wild2_s7sn;
                            GHC.Integer.Type.Negative y_s7sF [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7sF GHC.Integer.Type.onePositive
                                of
                                sat_s7sH
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s7sC GHC.Integer.Type.onePositive
                                      of
                                      sat_s7sG
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.orDigits sat_s7sG sat_s7sH
                                            of
                                            sat_s7sI
                                            { __DEFAULT ->
                                                  case GHC.Integer.Type.$wsuccPositive sat_s7sI of {
                                                    (#,#) ww1_s7sK [Occ=Once] ww2_s7sL [Occ=Once] ->
                                                        let {
                                                          sat_s7sM [Occ=Once]
                                                            :: GHC.Integer.Type.Digits
                                                          [LclId] =
                                                              CCCS GHC.Integer.Type.Some! [ww1_s7sK
                                                                                           ww2_s7sL];
                                                        } in 
                                                          case
                                                              GHC.Integer.Type.removeZeroTails
                                                                  sat_s7sM
                                                          of
                                                          wild4_s7sN
                                                          { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                                  _ [Occ=Dead] ->
                                                                GHC.Integer.Type.Negative [wild4_s7sN];
                                                            GHC.Integer.Type.None ->
                                                                GHC.Integer.Type.Naught [];
                                                          };
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> GHC.Integer.Type.Naught [];
              };
          GHC.Integer.Type.Naught ->
              case ds1_s7sk of { __DEFAULT -> GHC.Integer.Type.Naught []; };
        };

GHC.Integer.Type.testBitInteger
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Types.Bool
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,U>,
 Unf=OtherCon []] =
    [] \r [x_s7sR i_s7sS]
        case
            GHC.Integer.Type.shiftLInteger GHC.Integer.Type.oneInteger i_s7sS
        of
        sat_s7sT
        { __DEFAULT ->
              case GHC.Integer.Type.andInteger x_s7sR sat_s7sT of sat_s7sU {
                __DEFAULT ->
                    case
                        GHC.Integer.Type.neqInteger# sat_s7sU GHC.Integer.Type.Naught
                    of
                    wild_s7sV
                    { __DEFAULT -> tagToEnum# [wild_s7sV];
                    };
              };
        };

GHC.Integer.Type.xorDigits [Occ=LoopBreaker]
  :: GHC.Integer.Type.Digits
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7sW ds1_s7sX]
        case ds_s7sW of wild_s7sY {
          GHC.Integer.Type.Some ds2_s7sZ [Occ=Once] ds3_s7t0 [Occ=Once] ->
              case ds1_s7sX of {
                GHC.Integer.Type.Some w2_s7t2 [Occ=Once] ds4_s7t3 [Occ=Once] ->
                    case GHC.Integer.Type.xorDigits ds3_s7t0 ds4_s7t3 of dt_s7t4 {
                      __DEFAULT ->
                          case xor# [ds2_s7sZ w2_s7t2] of sat_s7t5 {
                            __DEFAULT -> GHC.Integer.Type.Some [sat_s7t5 dt_s7t4];
                          };
                    };
                GHC.Integer.Type.None -> wild_s7sY;
              };
          GHC.Integer.Type.None -> ds1_s7sX;
        };

GHC.Integer.Type.xorInteger [InlPrag=NOINLINE, Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Integer.Type.Integer
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><S,1*U>,
 Unf=OtherCon []] =
    [] \r [ds_s7t6 i_s7t7]
        case ds_s7t6 of wild_s7t8 {
          __DEFAULT ->
              case i_s7t7 of wild1_s7t9 {
                __DEFAULT ->
                    case wild_s7t8 of wild2_s7ta {
                      GHC.Integer.Type.Positive x_s7tb [Occ=Once*] ->
                          case wild1_s7t9 of {
                            GHC.Integer.Type.Positive y_s7td [Occ=Once] ->
                                case GHC.Integer.Type.xorDigits x_s7tb y_s7td of sat_s7te {
                                  __DEFAULT ->
                                      case GHC.Integer.Type.removeZeroTails sat_s7te of wild4_s7tf {
                                        GHC.Integer.Type.Some _ [Occ=Dead] _ [Occ=Dead] ->
                                            GHC.Integer.Type.Positive [wild4_s7tf];
                                        GHC.Integer.Type.None -> GHC.Integer.Type.Naught [];
                                      };
                                };
                            GHC.Integer.Type.Negative y_s7ti [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7ti GHC.Integer.Type.onePositive
                                of
                                sat_s7tj
                                { __DEFAULT ->
                                      case GHC.Integer.Type.xorDigits x_s7tb sat_s7tj of sat_s7tk {
                                        __DEFAULT ->
                                            case GHC.Integer.Type.$wsuccPositive sat_s7tk of {
                                              (#,#) ww1_s7tm [Occ=Once] ww2_s7tn [Occ=Once] ->
                                                  let {
                                                    sat_s7to [Occ=Once] :: GHC.Integer.Type.Digits
                                                    [LclId] =
                                                        CCCS GHC.Integer.Type.Some! [ww1_s7tm
                                                                                     ww2_s7tn];
                                                  } in 
                                                    case
                                                        GHC.Integer.Type.removeZeroTails sat_s7to
                                                    of
                                                    wild4_s7tp
                                                    { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                            _ [Occ=Dead] ->
                                                          GHC.Integer.Type.Negative [wild4_s7tp];
                                                      GHC.Integer.Type.None ->
                                                          GHC.Integer.Type.Naught [];
                                                    };
                                            };
                                      };
                                };
                          };
                      GHC.Integer.Type.Negative x_s7ts [Occ=Once] ->
                          case wild1_s7t9 of wild3_s7tt {
                            GHC.Integer.Type.Positive _ [Occ=Dead] ->
                                GHC.Integer.Type.xorInteger wild3_s7tt wild2_s7ta;
                            GHC.Integer.Type.Negative y_s7tv [Occ=Once] ->
                                case
                                    GHC.Integer.Type.minusPositive
                                        y_s7tv GHC.Integer.Type.onePositive
                                of
                                sat_s7tx
                                { __DEFAULT ->
                                      case
                                          GHC.Integer.Type.minusPositive
                                              x_s7ts GHC.Integer.Type.onePositive
                                      of
                                      sat_s7tw
                                      { __DEFAULT ->
                                            case
                                                GHC.Integer.Type.xorDigits sat_s7tw sat_s7tx
                                            of
                                            sat_s7ty
                                            { __DEFAULT ->
                                                  case
                                                      GHC.Integer.Type.removeZeroTails sat_s7ty
                                                  of
                                                  wild4_s7tz
                                                  { GHC.Integer.Type.Some _ [Occ=Dead]
                                                                          _ [Occ=Dead] ->
                                                        GHC.Integer.Type.Positive [wild4_s7tz];
                                                    GHC.Integer.Type.None ->
                                                        GHC.Integer.Type.Naught [];
                                                  };
                                            };
                                      };
                                };
                          };
                    };
                GHC.Integer.Type.Naught -> wild_s7t8;
              };
          GHC.Integer.Type.Naught -> i_s7t7;
        };

GHC.Integer.Type.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Type.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule4];

GHC.Integer.Type.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Type"#;

GHC.Integer.Type.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$trModule2];

GHC.Integer.Type.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Type.$trModule3
                                     GHC.Integer.Type.$trModule1];

$krep_r3Bp :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepVar! [0#];

$krep1_r3Bq :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Types.$tcWord#
                                              GHC.Types.[]];

GHC.Integer.Type.$tcDigits2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Digits"#;

GHC.Integer.Type.$tcDigits1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigits2];

GHC.Integer.Type.$tcDigits :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [16647862651490579480##
                                    7069031713090282797##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigits1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'None1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigits
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'None3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'None"#;

GHC.Integer.Type.$tc'None2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'None3];

GHC.Integer.Type.$tc'None :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [903679638320298226##
                                    12977397153301278560##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'None2
                                    0#
                                    GHC.Integer.Type.$tc'None1];

$krep2_r3Br :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'None1];

GHC.Integer.Type.$tc'Some1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep1_r3Bq $krep2_r3Br];

GHC.Integer.Type.$tc'Some3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Some"#;

GHC.Integer.Type.$tc'Some2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Some3];

GHC.Integer.Type.$tc'Some :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6045911439621864566##
                                    9702873355935012388##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Some2
                                    0#
                                    GHC.Integer.Type.$tc'Some1];

GHC.Integer.Type.$tcInteger2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "Integer"#;

GHC.Integer.Type.$tcInteger1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcInteger2];

GHC.Integer.Type.$tcInteger :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [12260413788024328428##
                                    9583620696682509916##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcInteger1
                                    0#
                                    GHC.Types.krep$*];

GHC.Integer.Type.$tc'Naught1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcInteger
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'Naught3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Naught"#;

GHC.Integer.Type.$tc'Naught2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Naught3];

GHC.Integer.Type.$tc'Naught :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [7287704174224038176##
                                    776397532388787230##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Naught2
                                    0#
                                    GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Negative1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         GHC.Integer.Type.$tc'Naught1];

GHC.Integer.Type.$tc'Positive2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Positive"#;

GHC.Integer.Type.$tc'Positive1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Positive2];

GHC.Integer.Type.$tc'Positive :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [6887932004110746796##
                                    9391890139750561935##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Positive1
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tc'Negative3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Negative"#;

GHC.Integer.Type.$tc'Negative2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Negative3];

GHC.Integer.Type.$tc'Negative :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4010847856516363452##
                                    15624358648337932456##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Negative2
                                    0#
                                    GHC.Integer.Type.$tc'Negative1];

GHC.Integer.Type.$tcList2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "List"#;

GHC.Integer.Type.$tcList1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcList2];

GHC.Integer.Type.$tcList :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [732340346576824023##
                                    9653115931589988500##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcList1
                                    0#
                                    GHC.Types.krep$*Arr*];

$krep3_r3Bs :: [GHC.Types.KindRep]
[GblId, Caf=NoCafRefs, Str=m2, Unf=OtherCon []] =
    CCS_DONT_CARE :! [$krep_r3Bp GHC.Types.[]];

GHC.Integer.Type.$tc'Nil1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcList
                                              $krep3_r3Bs];

GHC.Integer.Type.$tc'Nil3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Nil"#;

GHC.Integer.Type.$tc'Nil2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Nil3];

GHC.Integer.Type.$tc'Nil :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [13538585131509945451##
                                    9366316088405446135##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Nil2
                                    1#
                                    GHC.Integer.Type.$tc'Nil1];

$krep4_r3Bt :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'Nil1
                                         GHC.Integer.Type.$tc'Nil1];

GHC.Integer.Type.$tc'Cons1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [$krep_r3Bp $krep4_r3Bt];

GHC.Integer.Type.$tc'Cons3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'Cons"#;

GHC.Integer.Type.$tc'Cons2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'Cons3];

GHC.Integer.Type.$tc'Cons :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [3906777924842222150##
                                    5463288556346842885##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'Cons2
                                    1#
                                    GHC.Integer.Type.$tc'Cons1];

GHC.Integer.Type.$tcDigitsOnes2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "DigitsOnes"#;

GHC.Integer.Type.$tcDigitsOnes1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tcDigitsOnes2];

GHC.Integer.Type.$tcDigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [4554239703586147919##
                                    6957361150436389790##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tcDigitsOnes1
                                    0#
                                    GHC.Types.krep$*];

$krep5_r3Bu :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepTyConApp! [GHC.Integer.Type.$tcDigitsOnes
                                              GHC.Types.[]];

GHC.Integer.Type.$tc'DigitsOnes1 [InlPrag=NOUSERINLINE[~]]
  :: GHC.Types.KindRep
[GblId, Caf=NoCafRefs, Str=m4, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.KindRepFun! [GHC.Integer.Type.$tc'None1
                                         $krep5_r3Bu];

GHC.Integer.Type.$tc'DigitsOnes3 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "'DigitsOnes"#;

GHC.Integer.Type.$tc'DigitsOnes2 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Type.$tc'DigitsOnes3];

GHC.Integer.Type.$tc'DigitsOnes :: GHC.Types.TyCon
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TyCon! [15211110739657495015##
                                    1682512192113792266##
                                    GHC.Integer.Type.$trModule
                                    GHC.Integer.Type.$tc'DigitsOnes2
                                    0#
                                    GHC.Integer.Type.$tc'DigitsOnes1];

GHC.Integer.Type.encodeDouble#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s7tC ds1_s7tD]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s7tC
                                                ds1_s7tD
                                                GHC.Prim.realWorld#]
        of
        { Unit# ds3_s7tH [Occ=Once] -> ds3_s7tH;
        };

f_r3Bv
  :: GHC.Prim.Double#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s7tI ds_s7tJ ds1_s7tK]
        case ds_s7tJ of {
          GHC.Integer.Type.Some d_s7tM [Occ=Once] ds2_s7tN [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s7tM
                                                      ds1_s7tK
                                                      GHC.Prim.realWorld#]
              of
              { Unit# ds4_s7tR [Occ=Once] ->
                    case +# [ds1_s7tK 64#] of sat_s7tT {
                      __DEFAULT ->
                          case +## [acc_s7tI ds4_s7tR] of sat_s7tS {
                            __DEFAULT -> f_r3Bv sat_s7tS ds2_s7tN sat_s7tT;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s7tI;
        };

GHC.Integer.Type.encodeDoubleInteger [InlPrag=NOINLINE,
                                      Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Double#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7tU e0_s7tV]
        case ds_s7tU of {
          GHC.Integer.Type.Positive ds0_s7tX [Occ=Once] ->
              f_r3Bv 0.0## ds0_s7tX e0_s7tV;
          GHC.Integer.Type.Negative ds1_s7tY [Occ=Once] ->
              let {
                sat_s7tZ [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s7tY];
              } in 
                case
                    GHC.Integer.Type.encodeDoubleInteger sat_s7tZ e0_s7tV
                of
                wild1_s7u0
                { __DEFAULT -> negateDouble# [wild1_s7u0];
                };
          GHC.Integer.Type.Naught -> 0.0##;
        };

GHC.Integer.Type.encodeFloat#
  :: GHC.Prim.Word# -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId, Arity=2, Caf=NoCafRefs, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [ds_s7u1 ds1_s7u2]
        case
            __pkg_ccall integer-simple-0.1.1.1 [ds_s7u1
                                                ds1_s7u2
                                                GHC.Prim.realWorld#]
        of
        { Unit# ds3_s7u6 [Occ=Once] -> ds3_s7u6;
        };

f1_r3Bw
  :: GHC.Prim.Float#
     -> GHC.Integer.Type.Digits -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=3,
 Caf=NoCafRefs,
 Str=<L,U><S,1*U><L,U>,
 Unf=OtherCon []] =
    sat-only [] \r [acc_s7u7 ds_s7u8 ds1_s7u9]
        case ds_s7u8 of {
          GHC.Integer.Type.Some d_s7ub [Occ=Once] ds2_s7uc [Occ=Once] ->
              case
                  __pkg_ccall integer-simple-0.1.1.1 [d_s7ub
                                                      ds1_s7u9
                                                      GHC.Prim.realWorld#]
              of
              { Unit# ds4_s7ug [Occ=Once] ->
                    case +# [ds1_s7u9 64#] of sat_s7ui {
                      __DEFAULT ->
                          case plusFloat# [acc_s7u7 ds4_s7ug] of sat_s7uh {
                            __DEFAULT -> f1_r3Bw sat_s7uh ds2_s7uc sat_s7ui;
                          };
                    };
              };
          GHC.Integer.Type.None -> acc_s7u7;
        };

GHC.Integer.Type.encodeFloatInteger [InlPrag=NOINLINE,
                                     Occ=LoopBreaker]
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int# -> GHC.Prim.Float#
[GblId,
 Arity=2,
 Caf=NoCafRefs,
 Str=<S,1*U><L,U>,
 Unf=OtherCon []] =
    [] \r [ds_s7uj e0_s7uk]
        case ds_s7uj of {
          GHC.Integer.Type.Positive ds0_s7um [Occ=Once] ->
              f1_r3Bw 0.0# ds0_s7um e0_s7uk;
          GHC.Integer.Type.Negative ds1_s7un [Occ=Once] ->
              let {
                sat_s7uo [Occ=Once] :: GHC.Integer.Type.Integer
                [LclId] =
                    CCCS GHC.Integer.Type.Positive! [ds1_s7un];
              } in 
                case
                    GHC.Integer.Type.encodeFloatInteger sat_s7uo e0_s7uk
                of
                wild1_s7up
                { __DEFAULT -> negateFloat# [wild1_s7up];
                };
          GHC.Integer.Type.Naught -> 0.0#;
        };

GHC.Integer.Type.Positive
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Positive [eta_B1];

GHC.Integer.Type.Negative
  :: GHC.Integer.Type.Positive -> GHC.Integer.Type.Integer
[GblId[DataCon],
 Arity=1,
 Caf=NoCafRefs,
 Str=<L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Type.Negative [eta_B1];

GHC.Integer.Type.Naught :: GHC.Integer.Type.Integer
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Naught! [];

GHC.Integer.Type.Nil :: forall a. GHC.Integer.Type.List a
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.Nil! [];

GHC.Integer.Type.Cons
  :: forall a.
     a -> GHC.Integer.Type.List a -> GHC.Integer.Type.List a
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m2,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Cons [eta_B2 eta_B1];

GHC.Integer.Type.Some
  :: GHC.Integer.Type.Digit
     -> GHC.Integer.Type.Digits -> GHC.Integer.Type.Digits
[GblId[DataCon],
 Arity=2,
 Caf=NoCafRefs,
 Str=<L,U><L,U>m1,
 Unf=OtherCon []] =
    [] \r [eta_B2 eta_B1] GHC.Integer.Type.Some [eta_B2 eta_B1];

GHC.Integer.Type.None :: GHC.Integer.Type.Digits
[GblId[DataCon], Caf=NoCafRefs, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Integer.Type.None! [];

