
==================== Pre unarise: ====================
2018-03-16 15:53:58.65292402 UTC

GHC.Integer.Logarithms.integerLogBase#
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [b_sb6h m_sb6i]
        let {
          step_sb6j [Occ=LoopBreaker]
            :: GHC.Integer.Type.Integer
               -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [m_sb6i step_sb6j] \r [pw_sb6k]
                  case GHC.Integer.Type.ltInteger# m_sb6i pw_sb6k of {
                    __DEFAULT ->
                        case GHC.Integer.Type.timesInteger pw_sb6k pw_sb6k of sat_sb6m {
                          __DEFAULT ->
                              case step_sb6j sat_sb6m of {
                                (#,#) ipv_sb6o ipv1_sb6p [Occ=Once*] ->
                                    case GHC.Integer.Type.ltInteger# ipv_sb6o pw_sb6k of {
                                      __DEFAULT ->
                                          case *# [2# ipv1_sb6p] of sat_sb6s {
                                            __DEFAULT ->
                                                case +# [sat_sb6s 1#] of sat_sb6t {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sb6r [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [pw_sb6k ipv_sb6o] \u []
                                                                GHC.Integer.Type.quotInteger
                                                                    ipv_sb6o pw_sb6k;
                                                      } in  (#,#) [sat_sb6r sat_sb6t];
                                                };
                                          };
                                      1# ->
                                          case *# [2# ipv1_sb6p] of sat_sb6u {
                                            __DEFAULT -> (#,#) [ipv_sb6o sat_sb6u];
                                          };
                                    };
                              };
                        };
                    1# -> (#,#) [m_sb6i 0#];
                  };
        } in 
          case step_sb6j b_sb6h of {
            (#,#) _ [Occ=Dead] ipv1_sb6x [Occ=Once] -> ipv1_sb6x;
          };

GHC.Integer.Logarithms.integerLog2#
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Integer.Logarithms.Internals.integerLog2# eta_B1;

GHC.Integer.Logarithms.wordLog2# :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Logarithms.Internals.wordLog2# eta_B1;

GHC.Integer.Logarithms.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Logarithms.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule4];

GHC.Integer.Logarithms.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Logarithms"#;

GHC.Integer.Logarithms.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule2];

GHC.Integer.Logarithms.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Logarithms.$trModule3
                                     GHC.Integer.Logarithms.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:53:58.655217454 UTC

GHC.Integer.Logarithms.integerLogBase#
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [b_sb6h m_sb6i]
        let {
          step_sb6j [Occ=LoopBreaker]
            :: GHC.Integer.Type.Integer
               -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [m_sb6i step_sb6j] \r [pw_sb6k]
                  case GHC.Integer.Type.ltInteger# m_sb6i pw_sb6k of {
                    __DEFAULT ->
                        case GHC.Integer.Type.timesInteger pw_sb6k pw_sb6k of sat_sb6m {
                          __DEFAULT ->
                              case step_sb6j sat_sb6m of {
                                (#,#) ipv_sb6o ipv1_sb6p [Occ=Once*] ->
                                    case GHC.Integer.Type.ltInteger# ipv_sb6o pw_sb6k of {
                                      __DEFAULT ->
                                          case *# [2# ipv1_sb6p] of sat_sb6s {
                                            __DEFAULT ->
                                                case +# [sat_sb6s 1#] of sat_sb6t {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sb6r [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [pw_sb6k ipv_sb6o] \u []
                                                                GHC.Integer.Type.quotInteger
                                                                    ipv_sb6o pw_sb6k;
                                                      } in  (#,#) [sat_sb6r sat_sb6t];
                                                };
                                          };
                                      1# ->
                                          case *# [2# ipv1_sb6p] of sat_sb6u {
                                            __DEFAULT -> (#,#) [ipv_sb6o sat_sb6u];
                                          };
                                    };
                              };
                        };
                    1# -> (#,#) [m_sb6i 0#];
                  };
        } in 
          case step_sb6j b_sb6h of {
            (#,#) _ [Occ=Dead] ipv1_sb6x [Occ=Once] -> ipv1_sb6x;
          };

GHC.Integer.Logarithms.integerLog2#
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Integer.Logarithms.Internals.integerLog2# eta_B1;

GHC.Integer.Logarithms.wordLog2# :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Logarithms.Internals.wordLog2# eta_B1;

GHC.Integer.Logarithms.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Logarithms.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule4];

GHC.Integer.Logarithms.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Logarithms"#;

GHC.Integer.Logarithms.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule2];

GHC.Integer.Logarithms.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Logarithms.$trModule3
                                     GHC.Integer.Logarithms.$trModule1];


==================== Pre unarise: ====================
2018-03-16 15:53:58.898187396 UTC

GHC.Integer.Logarithms.integerLogBase#
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [b_sbbp m_sbbq]
        let {
          step_sbbr [Occ=LoopBreaker]
            :: GHC.Integer.Type.Integer
               -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [m_sbbq step_sbbr] \r [pw_sbbs]
                  case GHC.Integer.Type.ltInteger# m_sbbq pw_sbbs of {
                    __DEFAULT ->
                        case GHC.Integer.Type.timesInteger pw_sbbs pw_sbbs of sat_sbbu {
                          __DEFAULT ->
                              case step_sbbr sat_sbbu of {
                                (#,#) ipv_sbbw ipv1_sbbx [Occ=Once*] ->
                                    case GHC.Integer.Type.ltInteger# ipv_sbbw pw_sbbs of {
                                      __DEFAULT ->
                                          case *# [2# ipv1_sbbx] of sat_sbbA {
                                            __DEFAULT ->
                                                case +# [sat_sbbA 1#] of sat_sbbB {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sbbz [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [pw_sbbs ipv_sbbw] \u []
                                                                GHC.Integer.Type.quotInteger
                                                                    ipv_sbbw pw_sbbs;
                                                      } in  (#,#) [sat_sbbz sat_sbbB];
                                                };
                                          };
                                      1# ->
                                          case *# [2# ipv1_sbbx] of sat_sbbC {
                                            __DEFAULT -> (#,#) [ipv_sbbw sat_sbbC];
                                          };
                                    };
                              };
                        };
                    1# -> (#,#) [m_sbbq 0#];
                  };
        } in 
          case step_sbbr b_sbbp of {
            (#,#) _ [Occ=Dead] ipv1_sbbF [Occ=Once] -> ipv1_sbbF;
          };

GHC.Integer.Logarithms.integerLog2#
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Integer.Logarithms.Internals.integerLog2# eta_B1;

GHC.Integer.Logarithms.wordLog2# :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Logarithms.Internals.wordLog2# eta_B1;

GHC.Integer.Logarithms.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Logarithms.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule4];

GHC.Integer.Logarithms.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Logarithms"#;

GHC.Integer.Logarithms.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule2];

GHC.Integer.Logarithms.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Logarithms.$trModule3
                                     GHC.Integer.Logarithms.$trModule1];


==================== STG syntax: ====================
2018-03-16 15:53:58.900474809 UTC

GHC.Integer.Logarithms.integerLogBase#
  :: GHC.Integer.Type.Integer
     -> GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=2, Str=<S,U><S,U>, Unf=OtherCon []] =
    [] \r [b_sbbp m_sbbq]
        let {
          step_sbbr [Occ=LoopBreaker]
            :: GHC.Integer.Type.Integer
               -> (# GHC.Integer.Type.Integer, GHC.Prim.Int# #)
          [LclId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
              sat-only [m_sbbq step_sbbr] \r [pw_sbbs]
                  case GHC.Integer.Type.ltInteger# m_sbbq pw_sbbs of {
                    __DEFAULT ->
                        case GHC.Integer.Type.timesInteger pw_sbbs pw_sbbs of sat_sbbu {
                          __DEFAULT ->
                              case step_sbbr sat_sbbu of {
                                (#,#) ipv_sbbw ipv1_sbbx [Occ=Once*] ->
                                    case GHC.Integer.Type.ltInteger# ipv_sbbw pw_sbbs of {
                                      __DEFAULT ->
                                          case *# [2# ipv1_sbbx] of sat_sbbA {
                                            __DEFAULT ->
                                                case +# [sat_sbbA 1#] of sat_sbbB {
                                                  __DEFAULT ->
                                                      let {
                                                        sat_sbbz [Occ=Once]
                                                          :: GHC.Integer.Type.Integer
                                                        [LclId] =
                                                            [pw_sbbs ipv_sbbw] \u []
                                                                GHC.Integer.Type.quotInteger
                                                                    ipv_sbbw pw_sbbs;
                                                      } in  (#,#) [sat_sbbz sat_sbbB];
                                                };
                                          };
                                      1# ->
                                          case *# [2# ipv1_sbbx] of sat_sbbC {
                                            __DEFAULT -> (#,#) [ipv_sbbw sat_sbbC];
                                          };
                                    };
                              };
                        };
                    1# -> (#,#) [m_sbbq 0#];
                  };
        } in 
          case step_sbbr b_sbbp of {
            (#,#) _ [Occ=Dead] ipv1_sbbF [Occ=Once] -> ipv1_sbbF;
          };

GHC.Integer.Logarithms.integerLog2#
  :: GHC.Integer.Type.Integer -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,1*U>, Unf=OtherCon []] =
    [] \r [eta_B1]
        GHC.Integer.Logarithms.Internals.integerLog2# eta_B1;

GHC.Integer.Logarithms.wordLog2# :: GHC.Prim.Word# -> GHC.Prim.Int#
[GblId, Arity=1, Str=<S,U>, Unf=OtherCon []] =
    [] \r [eta_B1] GHC.Integer.Logarithms.Internals.wordLog2# eta_B1;

GHC.Integer.Logarithms.$trModule4 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "integer-simple"#;

GHC.Integer.Logarithms.$trModule3 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule4];

GHC.Integer.Logarithms.$trModule2 :: GHC.Prim.Addr#
[GblId, Caf=NoCafRefs, Unf=OtherCon []] =
    "GHC.Integer.Logarithms"#;

GHC.Integer.Logarithms.$trModule1 :: GHC.Types.TrName
[GblId, Caf=NoCafRefs, Str=m1, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.TrNameS! [GHC.Integer.Logarithms.$trModule2];

GHC.Integer.Logarithms.$trModule :: GHC.Types.Module
[GblId, Caf=NoCafRefs, Str=m, Unf=OtherCon []] =
    CCS_DONT_CARE GHC.Types.Module! [GHC.Integer.Logarithms.$trModule3
                                     GHC.Integer.Logarithms.$trModule1];

