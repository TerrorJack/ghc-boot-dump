
==================== Raw Cmm ====================
2018-03-16 15:53:58.679117961 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:53:58.689361911 UTC

[section ""data" . GHC.Integer.Logarithms.integerLogBase#_closure" {
     GHC.Integer.Logarithms.integerLogBase#_closure:
         const GHC.Integer.Logarithms.integerLogBase#_info;
         const 0;
 },
 sat_sb6r_entry() //  [R1]
         { []
         }
     {offset
       cb9Q: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cb9R; else goto cb9S;
       cb9R: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cb9S: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sb6r_info" {
     sat_sb6r_info:
         const sat_sb6r_entry;
         const 2;
         const 18;
 },
 step_sb6j_entry() //  [R1, R2]
         { []
         }
     {offset
       cb9W: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cb9X; else goto cb9Y;
       cb9X: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cb9Y: // global
           I64[Sp - 32] = block_cb9q_info;
           R3 = R2;
           _sb6k::P64 = R2;
           _sb6i::P64 = P64[R1 + 7];
           R2 = _sb6i::P64;
           P64[Sp - 24] = _sb6i::P64;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sb6k::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . step_sb6j_info" {
     step_sb6j_info:
         const step_sb6j_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const Sb7G_srt;
 },
 _cb9q() //  [R1]
         { []
         }
     {offset
       cb9q: // global
           if (R1 == 1) goto cb9V; else goto cb9U;
       cb9V: // global
           R2 = 0;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cb9U: // global
           I64[Sp + 8] = block_cb9u_info;
           _sb6k::P64 = P64[Sp + 24];
           R3 = _sb6k::P64;
           R2 = _sb6k::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cb9q_info" {
     block_cb9q_info:
         const _cb9q;
         const 3;
         const 4294967326;
         const Sb7G_srt;
 },
 _cb9u() //  [R1]
         { []
         }
     {offset
       cb9u: // global
           _sb6j::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cb9y_info;
           R2 = R1;
           R1 = _sb6j::P64;
           Sp = Sp + 8;
           call step_sb6j_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cb9u_info" {
     block_cb9u_info:
         const _cb9u;
         const 2;
         const 4294967326;
         const Sb7G_srt;
 },
 _cb9y() //  [R1, R2]
         { []
         }
     {offset
       cb9y: // global
           I64[Sp - 16] = block_cb9C_info;
           R3 = P64[Sp + 8];
           _sb6p::I64 = R2;
           R2 = R1;
           I64[Sp - 8] = _sb6p::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cb9y_info" {
     block_cb9y_info:
         const _cb9y;
         const 1;
         const 30;
 },
 _cb9C() //  [R1]
         { []
         }
     {offset
       cb9C: // global
           _sb6o::P64 = P64[Sp + 16];
           _sb6p::I64 = I64[Sp + 8];
           if (R1 == 1) goto cbaa; else goto cba3;
       cbaa: // global
           R2 = _sb6p::I64 << 1;
           R1 = _sb6o::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cba3: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cba6; else goto cba5;
       cba6: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cba5: // global
           I64[Hp - 24] = sat_sb6r_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sb6o::P64;
           R2 = (_sb6p::I64 << 1) + 1;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cb9C_info" {
     block_cb9C_info:
         const _cb9C;
         const 67;
         const 30;
 },
 GHC.Integer.Logarithms.integerLogBase#_entry() //  [R2, R3]
         { []
         }
     {offset
       cbaj: // global
           _sb6i::P64 = R3;
           _sb6h::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cbak; else goto cbal;
       cbal: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cban; else goto cbam;
       cban: // global
           HpAlloc = 16;
           goto cbak;
       cbak: // global
           R3 = _sb6i::P64;
           R2 = _sb6h::P64;
           R1 = GHC.Integer.Logarithms.integerLogBase#_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbam: // global
           I64[Hp - 8] = step_sb6j_info;
           P64[Hp] = _sb6i::P64;
           I64[Sp - 8] = block_cbaf_info;
           R2 = _sb6h::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call step_sb6j_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Integer.Logarithms.integerLogBase#_info" {
     GHC.Integer.Logarithms.integerLogBase#_info:
         const GHC.Integer.Logarithms.integerLogBase#_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const Sb7G_srt;
 },
 _cbaf() //  [R2]
         { []
         }
     {offset
       cbaf: // global
           R1 = R2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbaf_info" {
     block_cbaf_info:
         const _cbaf;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.714439153 UTC

[section ""data" . GHC.Integer.Logarithms.integerLog2#_closure" {
     GHC.Integer.Logarithms.integerLog2#_closure:
         const GHC.Integer.Logarithms.integerLog2#_info;
         const 0;
 },
 GHC.Integer.Logarithms.integerLog2#_entry() //  [R2]
         { []
         }
     {offset
       cbb1: // global
           R2 = R2;
           call GHC.Integer.Logarithms.Internals.integerLog2#_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Integer.Logarithms.integerLog2#_info" {
     GHC.Integer.Logarithms.integerLog2#_info:
         const GHC.Integer.Logarithms.integerLog2#_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const Sb7G_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.71854098 UTC

[section ""data" . GHC.Integer.Logarithms.wordLog2#_closure" {
     GHC.Integer.Logarithms.wordLog2#_closure:
         const GHC.Integer.Logarithms.wordLog2#_info;
         const 0;
 },
 GHC.Integer.Logarithms.wordLog2#_entry() //  [R2]
         { []
         }
     {offset
       cbbc: // global
           R2 = R2;
           call GHC.Integer.Logarithms.Internals.wordLog2#_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Integer.Logarithms.wordLog2#_info" {
     GHC.Integer.Logarithms.wordLog2#_info:
         const GHC.Integer.Logarithms.wordLog2#_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const Sb7G_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.722313443 UTC

[section ""cstring" . GHC.Integer.Logarithms.$trModule4_bytes" {
     GHC.Integer.Logarithms.$trModule4_bytes:
         I8[] [105,110,116,101,103,101,114,45,115,105,109,112,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.72447482 UTC

[section ""data" . GHC.Integer.Logarithms.$trModule3_closure" {
     GHC.Integer.Logarithms.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Integer.Logarithms.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.72655617 UTC

[section ""cstring" . GHC.Integer.Logarithms.$trModule2_bytes" {
     GHC.Integer.Logarithms.$trModule2_bytes:
         I8[] [71,72,67,46,73,110,116,101,103,101,114,46,76,111,103,97,114,105,116,104,109,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.728521846 UTC

[section ""data" . GHC.Integer.Logarithms.$trModule1_closure" {
     GHC.Integer.Logarithms.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Integer.Logarithms.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.730630904 UTC

[section ""data" . GHC.Integer.Logarithms.$trModule_closure" {
     GHC.Integer.Logarithms.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Integer.Logarithms.$trModule3_closure+1;
         const GHC.Integer.Logarithms.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.732638424 UTC

[section ""relreadonly" . Sb7G_srt" {
     Sb7G_srt:
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Integer.Logarithms.integerLogBase#_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2#_closure;
         const GHC.Integer.Logarithms.Internals.wordLog2#_closure;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.904352141 UTC

[]


==================== Raw Cmm ====================
2018-03-16 15:53:58.908915214 UTC

[section ""data" . GHC.Integer.Logarithms.integerLogBase#_closure" {
     GHC.Integer.Logarithms.integerLogBase#_closure:
         const GHC.Integer.Logarithms.integerLogBase#_info;
         const 0;
 },
 sat_sbbz_entry() //  [R1]
         { []
         }
     {offset
       cbcf: // global
           if ((Sp + -16) < SpLim) (likely: False) goto cbcg; else goto cbch;
       cbcg: // global
           R1 = R1;
           call (stg_gc_enter_1)(R1) args: 8, res: 0, upd: 8;
       cbch: // global
           I64[Sp - 16] = stg_upd_frame_info;
           P64[Sp - 8] = R1;
           R3 = P64[R1 + 16];
           R2 = P64[R1 + 24];
           Sp = Sp - 16;
           call GHC.Integer.Type.quotInteger_entry(R3,
                                                   R2) args: 24, res: 0, upd: 24;
     }
 },
 section ""relreadonly" . sat_sbbz_info" {
     sat_sbbz_info:
         const sat_sbbz_entry;
         const 2;
         const 18;
 },
 step_sbbr_entry() //  [R1, R2]
         { []
         }
     {offset
       cbcl: // global
           if ((Sp + -32) < SpLim) (likely: False) goto cbcm; else goto cbcn;
       cbcm: // global
           R2 = R2;
           R1 = R1;
           call (stg_gc_fun)(R2, R1) args: 8, res: 0, upd: 8;
       cbcn: // global
           I64[Sp - 32] = block_cbbP_info;
           R3 = R2;
           _sbbs::P64 = R2;
           _sbbq::P64 = P64[R1 + 7];
           R2 = _sbbq::P64;
           P64[Sp - 24] = _sbbq::P64;
           P64[Sp - 16] = R1;
           P64[Sp - 8] = _sbbs::P64;
           Sp = Sp - 32;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . step_sbbr_info" {
     step_sbbr_info:
         const step_sbbr_entry;
         const 1;
         const 4294967305;
         const 4294967301;
         const SbcO_srt;
 },
 _cbbP() //  [R1]
         { []
         }
     {offset
       cbbP: // global
           if (R1 == 1) goto cbck; else goto cbcj;
       cbck: // global
           R2 = 0;
           R1 = P64[Sp + 8];
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cbcj: // global
           I64[Sp + 8] = block_cbbT_info;
           _sbbs::P64 = P64[Sp + 24];
           R3 = _sbbs::P64;
           R2 = _sbbs::P64;
           Sp = Sp + 8;
           call GHC.Integer.Type.timesInteger_entry(R3,
                                                    R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbP_info" {
     block_cbbP_info:
         const _cbbP;
         const 3;
         const 4294967326;
         const SbcO_srt;
 },
 _cbbT() //  [R1]
         { []
         }
     {offset
       cbbT: // global
           _sbbr::P64 = P64[Sp + 8];
           I64[Sp + 8] = block_cbbX_info;
           R2 = R1;
           R1 = _sbbr::P64;
           Sp = Sp + 8;
           call step_sbbr_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbT_info" {
     block_cbbT_info:
         const _cbbT;
         const 2;
         const 4294967326;
         const SbcO_srt;
 },
 _cbbX() //  [R1, R2]
         { []
         }
     {offset
       cbbX: // global
           I64[Sp - 16] = block_cbc1_info;
           R3 = P64[Sp + 8];
           _sbbx::I64 = R2;
           R2 = R1;
           I64[Sp - 8] = _sbbx::I64;
           P64[Sp] = R1;
           Sp = Sp - 16;
           call GHC.Integer.Type.ltInteger#_entry(R3,
                                                  R2) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . block_cbbX_info" {
     block_cbbX_info:
         const _cbbX;
         const 1;
         const 30;
 },
 _cbc1() //  [R1]
         { []
         }
     {offset
       cbc1: // global
           _sbbw::P64 = P64[Sp + 16];
           _sbbx::I64 = I64[Sp + 8];
           if (R1 == 1) goto cbcz; else goto cbcs;
       cbcz: // global
           R2 = _sbbx::I64 << 1;
           R1 = _sbbw::P64;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
       cbcs: // global
           Hp = Hp + 32;
           if (Hp > HpLim) (likely: False) goto cbcv; else goto cbcu;
       cbcv: // global
           HpAlloc = 32;
           R1 = R1;
           call stg_gc_unbx_r1(R1) args: 8, res: 8, upd: 8;
       cbcu: // global
           I64[Hp - 24] = sat_sbbz_info;
           P64[Hp - 8] = P64[Sp + 24];
           P64[Hp] = _sbbw::P64;
           R2 = (_sbbx::I64 << 1) + 1;
           R1 = Hp - 24;
           Sp = Sp + 32;
           call (I64[P64[Sp]])(R2, R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbc1_info" {
     block_cbc1_info:
         const _cbc1;
         const 67;
         const 30;
 },
 GHC.Integer.Logarithms.integerLogBase#_entry() //  [R2, R3]
         { []
         }
     {offset
       cbcI: // global
           _sbbq::P64 = R3;
           _sbbp::P64 = R2;
           if ((Sp + -8) < SpLim) (likely: False) goto cbcJ; else goto cbcK;
       cbcK: // global
           Hp = Hp + 16;
           if (Hp > HpLim) (likely: False) goto cbcM; else goto cbcL;
       cbcM: // global
           HpAlloc = 16;
           goto cbcJ;
       cbcJ: // global
           R3 = _sbbq::P64;
           R2 = _sbbp::P64;
           R1 = GHC.Integer.Logarithms.integerLogBase#_closure;
           call (stg_gc_fun)(R3, R2, R1) args: 8, res: 0, upd: 8;
       cbcL: // global
           I64[Hp - 8] = step_sbbr_info;
           P64[Hp] = _sbbq::P64;
           I64[Sp - 8] = block_cbcE_info;
           R2 = _sbbp::P64;
           R1 = Hp - 7;
           Sp = Sp - 8;
           call step_sbbr_entry(R2, R1) args: 8, res: 8, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Integer.Logarithms.integerLogBase#_info" {
     GHC.Integer.Logarithms.integerLogBase#_info:
         const GHC.Integer.Logarithms.integerLogBase#_entry;
         const 0;
         const 12884901902;
         const 8589934607;
         const SbcO_srt;
 },
 _cbcE() //  [R2]
         { []
         }
     {offset
       cbcE: // global
           R1 = R2;
           Sp = Sp + 8;
           call (I64[P64[Sp]])(R1) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . block_cbcE_info" {
     block_cbcE_info:
         const _cbcE;
         const 0;
         const 30;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.927927743 UTC

[section ""data" . GHC.Integer.Logarithms.integerLog2#_closure" {
     GHC.Integer.Logarithms.integerLog2#_closure:
         const GHC.Integer.Logarithms.integerLog2#_info;
         const 0;
 },
 GHC.Integer.Logarithms.integerLog2#_entry() //  [R2]
         { []
         }
     {offset
       cbdz: // global
           R2 = R2;
           call GHC.Integer.Logarithms.Internals.integerLog2#_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Integer.Logarithms.integerLog2#_info" {
     GHC.Integer.Logarithms.integerLog2#_info:
         const GHC.Integer.Logarithms.integerLog2#_entry;
         const 0;
         const 4294967310;
         const 4294967301;
         const SbcO_srt+16;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.931941128 UTC

[section ""data" . GHC.Integer.Logarithms.wordLog2#_closure" {
     GHC.Integer.Logarithms.wordLog2#_closure:
         const GHC.Integer.Logarithms.wordLog2#_info;
         const 0;
 },
 GHC.Integer.Logarithms.wordLog2#_entry() //  [R2]
         { []
         }
     {offset
       cbdK: // global
           R2 = R2;
           call GHC.Integer.Logarithms.Internals.wordLog2#_entry(R2) args: 8, res: 0, upd: 8;
     }
 },
 section ""relreadonly" . GHC.Integer.Logarithms.wordLog2#_info" {
     GHC.Integer.Logarithms.wordLog2#_info:
         const GHC.Integer.Logarithms.wordLog2#_entry;
         const 0;
         const 4294967310;
         const 4294967300;
         const SbcO_srt+24;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.935891535 UTC

[section ""cstring" . GHC.Integer.Logarithms.$trModule4_bytes" {
     GHC.Integer.Logarithms.$trModule4_bytes:
         I8[] [105,110,116,101,103,101,114,45,115,105,109,112,108,101]
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.938397705 UTC

[section ""data" . GHC.Integer.Logarithms.$trModule3_closure" {
     GHC.Integer.Logarithms.$trModule3_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Integer.Logarithms.$trModule4_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.941439104 UTC

[section ""cstring" . GHC.Integer.Logarithms.$trModule2_bytes" {
     GHC.Integer.Logarithms.$trModule2_bytes:
         I8[] [71,72,67,46,73,110,116,101,103,101,114,46,76,111,103,97,114,105,116,104,109,115]
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.944689113 UTC

[section ""data" . GHC.Integer.Logarithms.$trModule1_closure" {
     GHC.Integer.Logarithms.$trModule1_closure:
         const GHC.Types.TrNameS_con_info;
         const GHC.Integer.Logarithms.$trModule2_bytes;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.94762099 UTC

[section ""data" . GHC.Integer.Logarithms.$trModule_closure" {
     GHC.Integer.Logarithms.$trModule_closure:
         const GHC.Types.Module_con_info;
         const GHC.Integer.Logarithms.$trModule3_closure+1;
         const GHC.Integer.Logarithms.$trModule1_closure+1;
         const 3;
 }]


==================== Raw Cmm ====================
2018-03-16 15:53:58.950568475 UTC

[section ""relreadonly" . SbcO_srt" {
     SbcO_srt:
         const GHC.Integer.Type.timesInteger_closure;
         const GHC.Integer.Logarithms.integerLogBase#_closure;
         const GHC.Integer.Logarithms.Internals.integerLog2#_closure;
         const GHC.Integer.Logarithms.Internals.wordLog2#_closure;
 }]

